// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_mega_138k_pro.v
// Device     : GW5AST-LV138FPG676AES
// LiteX sha1 : --------
// Date       : 2025-02-13 15:37:15
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_mega_138k_pro (
    input  wire          clk50,
    output wire          led_n0,
    output wire          led_n1,
    output wire          led_n2,
    output wire          led_n3,
    output wire          led_n4,
    output wire          led_n5,
    input  wire          rst,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── my_module (MyModule)
│    └─── [MyModule]
└─── crg (_CRG)
│    └─── pll (GW5APLL)
│    │    └─── [PLL]
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire   [13:0] builder_adr;
reg    [29:0] builder_array_muxed0 = 30'd0;
reg    [31:0] builder_array_muxed1 = 32'd0;
reg     [3:0] builder_array_muxed2 = 4'd0;
reg           builder_array_muxed3 = 1'd0;
reg           builder_array_muxed4 = 1'd0;
reg           builder_array_muxed5 = 1'd0;
reg     [2:0] builder_array_muxed6 = 3'd0;
reg     [1:0] builder_array_muxed7 = 2'd0;
reg    [19:0] builder_count = 20'd1000000;
wire   [31:0] builder_csrbank0_bus_errors_r;
reg           builder_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] builder_csrbank0_bus_errors_w;
reg           builder_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] builder_csrbank0_reset0_r;
reg           builder_csrbank0_reset0_re = 1'd0;
wire    [1:0] builder_csrbank0_reset0_w;
reg           builder_csrbank0_reset0_we = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_r;
reg           builder_csrbank0_scratch0_re = 1'd0;
wire   [31:0] builder_csrbank0_scratch0_w;
reg           builder_csrbank0_scratch0_we = 1'd0;
wire          builder_csrbank0_sel;
wire    [5:0] builder_csrbank1_out0_r;
reg           builder_csrbank1_out0_re = 1'd0;
wire    [5:0] builder_csrbank1_out0_w;
reg           builder_csrbank1_out0_we = 1'd0;
wire          builder_csrbank1_sel;
wire   [31:0] builder_csrbank2_data_in0_r;
reg           builder_csrbank2_data_in0_re = 1'd0;
wire   [31:0] builder_csrbank2_data_in0_w;
reg           builder_csrbank2_data_in0_we = 1'd0;
wire   [31:0] builder_csrbank2_data_out_r;
reg           builder_csrbank2_data_out_re = 1'd0;
wire   [31:0] builder_csrbank2_data_out_w;
reg           builder_csrbank2_data_out_we = 1'd0;
wire          builder_csrbank2_sel;
wire          builder_csrbank3_en0_r;
reg           builder_csrbank3_en0_re = 1'd0;
wire          builder_csrbank3_en0_w;
reg           builder_csrbank3_en0_we = 1'd0;
wire          builder_csrbank3_ev_enable0_r;
reg           builder_csrbank3_ev_enable0_re = 1'd0;
wire          builder_csrbank3_ev_enable0_w;
reg           builder_csrbank3_ev_enable0_we = 1'd0;
wire          builder_csrbank3_ev_pending_r;
reg           builder_csrbank3_ev_pending_re = 1'd0;
wire          builder_csrbank3_ev_pending_w;
reg           builder_csrbank3_ev_pending_we = 1'd0;
wire          builder_csrbank3_ev_status_r;
reg           builder_csrbank3_ev_status_re = 1'd0;
wire          builder_csrbank3_ev_status_w;
reg           builder_csrbank3_ev_status_we = 1'd0;
wire   [31:0] builder_csrbank3_load0_r;
reg           builder_csrbank3_load0_re = 1'd0;
wire   [31:0] builder_csrbank3_load0_w;
reg           builder_csrbank3_load0_we = 1'd0;
wire   [31:0] builder_csrbank3_reload0_r;
reg           builder_csrbank3_reload0_re = 1'd0;
wire   [31:0] builder_csrbank3_reload0_w;
reg           builder_csrbank3_reload0_we = 1'd0;
wire          builder_csrbank3_sel;
wire          builder_csrbank3_update_value0_r;
reg           builder_csrbank3_update_value0_re = 1'd0;
wire          builder_csrbank3_update_value0_w;
reg           builder_csrbank3_update_value0_we = 1'd0;
wire   [31:0] builder_csrbank3_value_r;
reg           builder_csrbank3_value_re = 1'd0;
wire   [31:0] builder_csrbank3_value_w;
reg           builder_csrbank3_value_we = 1'd0;
wire    [1:0] builder_csrbank4_ev_enable0_r;
reg           builder_csrbank4_ev_enable0_re = 1'd0;
wire    [1:0] builder_csrbank4_ev_enable0_w;
reg           builder_csrbank4_ev_enable0_we = 1'd0;
wire    [1:0] builder_csrbank4_ev_pending_r;
reg           builder_csrbank4_ev_pending_re = 1'd0;
wire    [1:0] builder_csrbank4_ev_pending_w;
reg           builder_csrbank4_ev_pending_we = 1'd0;
wire    [1:0] builder_csrbank4_ev_status_r;
reg           builder_csrbank4_ev_status_re = 1'd0;
wire    [1:0] builder_csrbank4_ev_status_w;
reg           builder_csrbank4_ev_status_we = 1'd0;
wire          builder_csrbank4_rxempty_r;
reg           builder_csrbank4_rxempty_re = 1'd0;
wire          builder_csrbank4_rxempty_w;
reg           builder_csrbank4_rxempty_we = 1'd0;
wire          builder_csrbank4_rxfull_r;
reg           builder_csrbank4_rxfull_re = 1'd0;
wire          builder_csrbank4_rxfull_w;
reg           builder_csrbank4_rxfull_we = 1'd0;
wire          builder_csrbank4_sel;
wire          builder_csrbank4_txempty_r;
reg           builder_csrbank4_txempty_re = 1'd0;
wire          builder_csrbank4_txempty_w;
reg           builder_csrbank4_txempty_we = 1'd0;
wire          builder_csrbank4_txfull_r;
reg           builder_csrbank4_txfull_re = 1'd0;
wire          builder_csrbank4_txfull_w;
reg           builder_csrbank4_txfull_we = 1'd0;
wire   [31:0] builder_dat_r;
wire   [31:0] builder_dat_w;
wire          builder_done;
reg           builder_error = 1'd0;
reg           builder_grant = 1'd0;
wire          builder_gw5apll0;
wire          builder_gw5apll1;
wire          builder_gw5apll2;
wire          builder_gw5apll3;
wire          builder_gw5apll4;
wire          builder_gw5apll5;
wire          builder_gw5apll6;
reg           builder_interface0_ack = 1'd0;
wire   [29:0] builder_interface0_adr;
wire   [13:0] builder_interface0_bank_bus_adr;
reg    [31:0] builder_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface0_bank_bus_dat_w;
wire          builder_interface0_bank_bus_re;
wire          builder_interface0_bank_bus_we;
wire    [1:0] builder_interface0_bte;
wire    [2:0] builder_interface0_cti;
wire          builder_interface0_cyc;
reg    [31:0] builder_interface0_dat_r = 32'd0;
wire   [31:0] builder_interface0_dat_w;
reg           builder_interface0_err = 1'd0;
wire    [3:0] builder_interface0_sel;
wire          builder_interface0_stb;
wire          builder_interface0_we;
reg    [13:0] builder_interface1_adr = 14'd0;
wire   [13:0] builder_interface1_bank_bus_adr;
reg    [31:0] builder_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface1_bank_bus_dat_w;
wire          builder_interface1_bank_bus_re;
wire          builder_interface1_bank_bus_we;
wire   [31:0] builder_interface1_dat_r;
reg    [31:0] builder_interface1_dat_w = 32'd0;
reg           builder_interface1_re = 1'd0;
reg           builder_interface1_we = 1'd0;
wire   [13:0] builder_interface2_bank_bus_adr;
reg    [31:0] builder_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface2_bank_bus_dat_w;
wire          builder_interface2_bank_bus_re;
wire          builder_interface2_bank_bus_we;
wire   [13:0] builder_interface3_bank_bus_adr;
reg    [31:0] builder_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface3_bank_bus_dat_w;
wire          builder_interface3_bank_bus_re;
wire          builder_interface3_bank_bus_we;
wire   [13:0] builder_interface4_bank_bus_adr;
reg    [31:0] builder_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] builder_interface4_bank_bus_dat_w;
wire          builder_interface4_bank_bus_re;
wire          builder_interface4_bank_bus_we;
reg           builder_next_state = 1'd0;
wire          builder_re;
reg           builder_regs0 = 1'd0;
reg           builder_regs1 = 1'd0;
wire    [1:0] builder_request;
reg           builder_rs232phyrx_next_state = 1'd0;
reg           builder_rs232phyrx_state = 1'd0;
reg           builder_rs232phytx_next_state = 1'd0;
reg           builder_rs232phytx_state = 1'd0;
wire          builder_rst1;
reg           builder_shared_ack = 1'd0;
wire   [29:0] builder_shared_adr;
wire    [1:0] builder_shared_bte;
wire    [2:0] builder_shared_cti;
wire          builder_shared_cyc;
reg    [31:0] builder_shared_dat_r = 32'd0;
wire   [31:0] builder_shared_dat_w;
wire          builder_shared_err;
wire    [3:0] builder_shared_sel;
wire          builder_shared_stb;
wire          builder_shared_we;
reg     [2:0] builder_slave_sel = 3'd0;
reg     [2:0] builder_slave_sel_r = 3'd0;
reg           builder_state = 1'd0;
wire          builder_wait;
wire          builder_we;
wire   [14:0] main_basesoc_basesoc_adr;
reg           main_basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] main_basesoc_basesoc_dat_r;
reg           main_basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_basesoc_ram_bus_adr;
wire    [1:0] main_basesoc_basesoc_ram_bus_bte;
wire    [2:0] main_basesoc_basesoc_ram_bus_cti;
wire          main_basesoc_basesoc_ram_bus_cyc;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] main_basesoc_basesoc_ram_bus_dat_w;
reg           main_basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_basesoc_ram_bus_sel;
wire          main_basesoc_basesoc_ram_bus_stb;
wire          main_basesoc_basesoc_ram_bus_we;
wire          main_basesoc_bus_error;
reg    [31:0] main_basesoc_bus_errors = 32'd0;
reg           main_basesoc_bus_errors_re = 1'd0;
wire   [31:0] main_basesoc_bus_errors_status;
wire          main_basesoc_bus_errors_we;
wire          main_basesoc_cpu_rst;
wire          main_basesoc_dbus_ack;
wire   [29:0] main_basesoc_dbus_adr;
wire    [1:0] main_basesoc_dbus_bte;
wire    [2:0] main_basesoc_dbus_cti;
wire          main_basesoc_dbus_cyc;
wire   [31:0] main_basesoc_dbus_dat_r;
wire   [31:0] main_basesoc_dbus_dat_w;
wire          main_basesoc_dbus_err;
wire    [3:0] main_basesoc_dbus_sel;
wire          main_basesoc_dbus_stb;
wire          main_basesoc_dbus_we;
wire          main_basesoc_ibus_ack;
wire   [29:0] main_basesoc_ibus_adr;
wire    [1:0] main_basesoc_ibus_bte;
wire    [2:0] main_basesoc_ibus_cti;
wire          main_basesoc_ibus_cyc;
wire   [31:0] main_basesoc_ibus_dat_r;
wire   [31:0] main_basesoc_ibus_dat_w;
wire          main_basesoc_ibus_err;
wire    [3:0] main_basesoc_ibus_sel;
wire          main_basesoc_ibus_stb;
wire          main_basesoc_ibus_we;
reg    [31:0] main_basesoc_interrupt = 32'd0;
wire   [12:0] main_basesoc_ram_adr;
reg           main_basesoc_ram_adr_burst = 1'd0;
reg           main_basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] main_basesoc_ram_bus_ram_bus_adr;
wire    [1:0] main_basesoc_ram_bus_ram_bus_bte;
wire    [2:0] main_basesoc_ram_bus_ram_bus_cti;
wire          main_basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] main_basesoc_ram_bus_ram_bus_dat_w;
reg           main_basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] main_basesoc_ram_bus_ram_bus_sel;
wire          main_basesoc_ram_bus_ram_bus_stb;
wire          main_basesoc_ram_bus_ram_bus_we;
wire   [31:0] main_basesoc_ram_dat_r;
wire   [31:0] main_basesoc_ram_dat_w;
reg     [3:0] main_basesoc_ram_we = 4'd0;
wire          main_basesoc_reset;
reg           main_basesoc_reset_re = 1'd0;
reg     [1:0] main_basesoc_reset_storage = 2'd0;
reg     [3:0] main_basesoc_rx_count = 4'd0;
reg     [3:0] main_basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           main_basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_rx_data = 8'd0;
reg     [7:0] main_basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           main_basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           main_basesoc_rx_enable = 1'd0;
reg    [31:0] main_basesoc_rx_phase = 32'd0;
wire          main_basesoc_rx_rx;
reg           main_basesoc_rx_rx_d = 1'd0;
reg           main_basesoc_rx_source_first = 1'd0;
reg           main_basesoc_rx_source_last = 1'd0;
reg     [7:0] main_basesoc_rx_source_payload_data = 8'd0;
wire          main_basesoc_rx_source_ready;
reg           main_basesoc_rx_source_valid = 1'd0;
reg           main_basesoc_rx_tick = 1'd0;
reg           main_basesoc_scratch_re = 1'd0;
reg    [31:0] main_basesoc_scratch_storage = 32'd305419896;
reg           main_basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           main_basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           main_basesoc_soc_rst = 1'd0;
reg           main_basesoc_timer_en_re = 1'd0;
reg           main_basesoc_timer_en_storage = 1'd0;
reg           main_basesoc_timer_enable_re = 1'd0;
reg           main_basesoc_timer_enable_storage = 1'd0;
wire          main_basesoc_timer_irq;
reg           main_basesoc_timer_load_re = 1'd0;
reg    [31:0] main_basesoc_timer_load_storage = 32'd0;
reg           main_basesoc_timer_pending_r = 1'd0;
reg           main_basesoc_timer_pending_re = 1'd0;
wire          main_basesoc_timer_pending_status;
wire          main_basesoc_timer_pending_we;
reg           main_basesoc_timer_reload_re = 1'd0;
reg    [31:0] main_basesoc_timer_reload_storage = 32'd0;
reg           main_basesoc_timer_status_re = 1'd0;
wire          main_basesoc_timer_status_status;
wire          main_basesoc_timer_status_we;
reg           main_basesoc_timer_update_value_re = 1'd0;
reg           main_basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] main_basesoc_timer_value = 32'd0;
reg           main_basesoc_timer_value_re = 1'd0;
reg    [31:0] main_basesoc_timer_value_status = 32'd0;
wire          main_basesoc_timer_value_we;
wire          main_basesoc_timer_zero0;
wire          main_basesoc_timer_zero1;
wire          main_basesoc_timer_zero2;
reg           main_basesoc_timer_zero_clear = 1'd0;
reg           main_basesoc_timer_zero_pending = 1'd0;
wire          main_basesoc_timer_zero_status;
wire          main_basesoc_timer_zero_trigger;
reg           main_basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] main_basesoc_tx_count = 4'd0;
reg     [3:0] main_basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           main_basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] main_basesoc_tx_data = 8'd0;
reg     [7:0] main_basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           main_basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           main_basesoc_tx_enable = 1'd0;
reg    [31:0] main_basesoc_tx_phase = 32'd0;
wire          main_basesoc_tx_sink_first;
wire          main_basesoc_tx_sink_last;
wire    [7:0] main_basesoc_tx_sink_payload_data;
reg           main_basesoc_tx_sink_ready = 1'd0;
wire          main_basesoc_tx_sink_valid;
reg           main_basesoc_tx_tick = 1'd0;
reg           main_basesoc_uart_enable_re = 1'd0;
reg     [1:0] main_basesoc_uart_enable_storage = 2'd0;
wire          main_basesoc_uart_irq;
reg     [1:0] main_basesoc_uart_pending_r = 2'd0;
reg           main_basesoc_uart_pending_re = 1'd0;
reg     [1:0] main_basesoc_uart_pending_status = 2'd0;
wire          main_basesoc_uart_pending_we;
wire          main_basesoc_uart_rx0;
wire          main_basesoc_uart_rx1;
wire          main_basesoc_uart_rx2;
reg           main_basesoc_uart_rx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_rx_fifo_consume = 4'd0;
wire          main_basesoc_uart_rx_fifo_do_read;
wire          main_basesoc_uart_rx_fifo_fifo_in_first;
wire          main_basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_rx_fifo_fifo_out_first;
wire          main_basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_rx_fifo_level1;
reg     [3:0] main_basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_rx_fifo_rdport_dat_r;
wire          main_basesoc_uart_rx_fifo_rdport_re;
wire          main_basesoc_uart_rx_fifo_re;
reg           main_basesoc_uart_rx_fifo_readable = 1'd0;
reg           main_basesoc_uart_rx_fifo_replace = 1'd0;
wire          main_basesoc_uart_rx_fifo_sink_first;
wire          main_basesoc_uart_rx_fifo_sink_last;
wire    [7:0] main_basesoc_uart_rx_fifo_sink_payload_data;
wire          main_basesoc_uart_rx_fifo_sink_ready;
wire          main_basesoc_uart_rx_fifo_sink_valid;
wire          main_basesoc_uart_rx_fifo_source_first;
wire          main_basesoc_uart_rx_fifo_source_last;
wire    [7:0] main_basesoc_uart_rx_fifo_source_payload_data;
wire          main_basesoc_uart_rx_fifo_source_ready;
wire          main_basesoc_uart_rx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_rx_fifo_syncfifo_dout;
wire          main_basesoc_uart_rx_fifo_syncfifo_re;
wire          main_basesoc_uart_rx_fifo_syncfifo_readable;
wire          main_basesoc_uart_rx_fifo_syncfifo_we;
wire          main_basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_rx_fifo_wrport_dat_w;
wire          main_basesoc_uart_rx_fifo_wrport_we;
reg           main_basesoc_uart_rx_pending = 1'd0;
wire          main_basesoc_uart_rx_status;
wire          main_basesoc_uart_rx_trigger;
reg           main_basesoc_uart_rx_trigger_d = 1'd0;
reg           main_basesoc_uart_rxempty_re = 1'd0;
wire          main_basesoc_uart_rxempty_status;
wire          main_basesoc_uart_rxempty_we;
reg           main_basesoc_uart_rxfull_re = 1'd0;
wire          main_basesoc_uart_rxfull_status;
wire          main_basesoc_uart_rxfull_we;
wire    [7:0] main_basesoc_uart_rxtx_r;
reg           main_basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] main_basesoc_uart_rxtx_w;
reg           main_basesoc_uart_rxtx_we = 1'd0;
reg           main_basesoc_uart_status_re = 1'd0;
reg     [1:0] main_basesoc_uart_status_status = 2'd0;
wire          main_basesoc_uart_status_we;
wire          main_basesoc_uart_tx0;
wire          main_basesoc_uart_tx1;
wire          main_basesoc_uart_tx2;
reg           main_basesoc_uart_tx_clear = 1'd0;
reg     [3:0] main_basesoc_uart_tx_fifo_consume = 4'd0;
wire          main_basesoc_uart_tx_fifo_do_read;
wire          main_basesoc_uart_tx_fifo_fifo_in_first;
wire          main_basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          main_basesoc_uart_tx_fifo_fifo_out_first;
wire          main_basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] main_basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] main_basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] main_basesoc_uart_tx_fifo_level1;
reg     [3:0] main_basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] main_basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] main_basesoc_uart_tx_fifo_rdport_dat_r;
wire          main_basesoc_uart_tx_fifo_rdport_re;
wire          main_basesoc_uart_tx_fifo_re;
reg           main_basesoc_uart_tx_fifo_readable = 1'd0;
reg           main_basesoc_uart_tx_fifo_replace = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           main_basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] main_basesoc_uart_tx_fifo_sink_payload_data;
wire          main_basesoc_uart_tx_fifo_sink_ready;
wire          main_basesoc_uart_tx_fifo_sink_valid;
wire          main_basesoc_uart_tx_fifo_source_first;
wire          main_basesoc_uart_tx_fifo_source_last;
wire    [7:0] main_basesoc_uart_tx_fifo_source_payload_data;
wire          main_basesoc_uart_tx_fifo_source_ready;
wire          main_basesoc_uart_tx_fifo_source_valid;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] main_basesoc_uart_tx_fifo_syncfifo_dout;
wire          main_basesoc_uart_tx_fifo_syncfifo_re;
wire          main_basesoc_uart_tx_fifo_syncfifo_readable;
wire          main_basesoc_uart_tx_fifo_syncfifo_we;
wire          main_basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] main_basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] main_basesoc_uart_tx_fifo_wrport_dat_w;
wire          main_basesoc_uart_tx_fifo_wrport_we;
reg           main_basesoc_uart_tx_pending = 1'd0;
wire          main_basesoc_uart_tx_status;
wire          main_basesoc_uart_tx_trigger;
reg           main_basesoc_uart_tx_trigger_d = 1'd0;
reg           main_basesoc_uart_txempty_re = 1'd0;
wire          main_basesoc_uart_txempty_status;
wire          main_basesoc_uart_txempty_we;
reg           main_basesoc_uart_txfull_re = 1'd0;
wire          main_basesoc_uart_txfull_status;
wire          main_basesoc_uart_txfull_we;
wire          main_basesoc_uart_uart_sink_first;
wire          main_basesoc_uart_uart_sink_last;
wire    [7:0] main_basesoc_uart_uart_sink_payload_data;
wire          main_basesoc_uart_uart_sink_ready;
wire          main_basesoc_uart_uart_sink_valid;
wire          main_basesoc_uart_uart_source_first;
wire          main_basesoc_uart_uart_source_last;
wire    [7:0] main_basesoc_uart_uart_source_payload_data;
wire          main_basesoc_uart_uart_source_ready;
wire          main_basesoc_uart_uart_source_valid;
reg    [31:0] main_basesoc_vexriscv = 32'd0;
reg     [5:0] main_chaser = 6'd0;
reg    [21:0] main_count = 22'd4166666;
wire          main_crg_clkin;
wire          main_crg_clkout;
wire          main_crg_locked;
reg    [15:0] main_crg_por_count = 16'd65535;
wire          main_crg_por_done;
wire          main_crg_reset;
reg           main_crg_rst = 1'd0;
reg           main_data_in_re = 1'd0;
reg    [31:0] main_data_in_storage = 32'd0;
reg           main_data_out_re = 1'd0;
wire   [31:0] main_data_out_status;
wire          main_data_out_we;
wire          main_done;
reg     [5:0] main_leds = 6'd0;
reg           main_mode = 1'd0;
reg           main_re = 1'd0;
reg     [5:0] main_storage = 6'd0;
wire          main_wait;
wire          por_clk;
reg           por_rst = 1'd0;
wire          sys_clk;
wire          sys_rst;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_basesoc_reset = (main_basesoc_soc_rst | main_basesoc_cpu_rst);
always @(*) begin
    main_crg_rst <= 1'd0;
    if (main_basesoc_soc_rst) begin
        main_crg_rst <= 1'd1;
    end
end
assign main_basesoc_bus_error = builder_error;
always @(*) begin
    main_basesoc_interrupt <= 32'd0;
    main_basesoc_interrupt[1] <= main_basesoc_timer_irq;
    main_basesoc_interrupt[0] <= main_basesoc_uart_irq;
end
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign main_basesoc_ibus_dat_r = builder_shared_dat_r;
assign main_basesoc_dbus_dat_r = builder_shared_dat_r;
assign main_basesoc_ibus_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_basesoc_dbus_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_basesoc_ibus_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_basesoc_dbus_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_basesoc_dbus_cyc, main_basesoc_ibus_cyc};
always @(*) begin
    builder_slave_sel <= 3'd0;
    builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
    builder_slave_sel[1] <= (builder_shared_adr[29:13] == 14'd8192);
    builder_slave_sel[2] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_basesoc_basesoc_ram_bus_adr = builder_shared_adr;
assign main_basesoc_basesoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_basesoc_ram_bus_sel = builder_shared_sel;
assign main_basesoc_basesoc_ram_bus_stb = builder_shared_stb;
assign main_basesoc_basesoc_ram_bus_we = builder_shared_we;
assign main_basesoc_basesoc_ram_bus_cti = builder_shared_cti;
assign main_basesoc_basesoc_ram_bus_bte = builder_shared_bte;
assign main_basesoc_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_basesoc_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_basesoc_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_basesoc_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_basesoc_ram_bus_ram_bus_we = builder_shared_we;
assign main_basesoc_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_basesoc_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_interface0_adr = builder_shared_adr;
assign builder_interface0_dat_w = builder_shared_dat_w;
assign builder_interface0_sel = builder_shared_sel;
assign builder_interface0_stb = builder_shared_stb;
assign builder_interface0_we = builder_shared_we;
assign builder_interface0_cti = builder_shared_cti;
assign builder_interface0_bte = builder_shared_bte;
assign main_basesoc_basesoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_basesoc_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign builder_interface0_cyc = (builder_shared_cyc & builder_slave_sel[2]);
assign builder_shared_err = ((main_basesoc_basesoc_ram_bus_err | main_basesoc_ram_bus_ram_bus_err) | builder_interface0_err);
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
    builder_error <= 1'd0;
    builder_shared_ack <= 1'd0;
    builder_shared_dat_r <= 32'd0;
    builder_shared_ack <= ((main_basesoc_basesoc_ram_bus_ack | main_basesoc_ram_bus_ram_bus_ack) | builder_interface0_ack);
    builder_shared_dat_r <= ((({32{builder_slave_sel_r[0]}} & main_basesoc_basesoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_basesoc_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & builder_interface0_dat_r));
    if (builder_done) begin
        builder_shared_dat_r <= 32'd4294967295;
        builder_shared_ack <= 1'd1;
        builder_error <= 1'd1;
    end
end
assign builder_done = (builder_count == 1'd0);
assign main_basesoc_bus_errors_status = main_basesoc_bus_errors;
assign main_basesoc_basesoc_adr = main_basesoc_basesoc_ram_bus_adr[14:0];
assign main_basesoc_basesoc_ram_bus_dat_r = main_basesoc_basesoc_dat_r;
always @(*) begin
    main_basesoc_ram_we <= 4'd0;
    main_basesoc_ram_we[0] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[0]);
    main_basesoc_ram_we[1] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[1]);
    main_basesoc_ram_we[2] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[2]);
    main_basesoc_ram_we[3] <= (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & main_basesoc_ram_bus_ram_bus_we) & main_basesoc_ram_bus_ram_bus_sel[3]);
end
assign main_basesoc_ram_adr = main_basesoc_ram_bus_ram_bus_adr[12:0];
assign main_basesoc_ram_bus_ram_bus_dat_r = main_basesoc_ram_dat_r;
assign main_basesoc_ram_dat_w = main_basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    builder_rs232phytx_next_state <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    main_basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    main_basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    main_basesoc_tx_enable <= 1'd0;
    main_basesoc_tx_sink_ready <= 1'd0;
    builder_rs232phytx_next_state <= builder_rs232phytx_state;
    case (builder_rs232phytx_state)
        1'd1: begin
            main_basesoc_tx_enable <= 1'd1;
            if (main_basesoc_tx_tick) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= main_basesoc_tx_data;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_count_rs232phytx_next_value0 <= (main_basesoc_tx_count + 1'd1);
                main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, main_basesoc_tx_data[7:1]};
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((main_basesoc_tx_count == 4'd9)) begin
                    main_basesoc_tx_sink_ready <= 1'd1;
                    builder_rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            main_basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (main_basesoc_tx_sink_valid) begin
                main_basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                main_basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                main_basesoc_tx_data_rs232phytx_next_value2 <= main_basesoc_tx_sink_payload_data;
                main_basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                builder_rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    builder_rs232phyrx_next_state <= 1'd0;
    main_basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    main_basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    main_basesoc_rx_enable <= 1'd0;
    main_basesoc_rx_source_payload_data <= 8'd0;
    main_basesoc_rx_source_valid <= 1'd0;
    builder_rs232phyrx_next_state <= builder_rs232phyrx_state;
    case (builder_rs232phyrx_state)
        1'd1: begin
            main_basesoc_rx_enable <= 1'd1;
            if (main_basesoc_rx_tick) begin
                main_basesoc_rx_count_rs232phyrx_next_value0 <= (main_basesoc_rx_count + 1'd1);
                main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                main_basesoc_rx_data_rs232phyrx_next_value1 <= {main_basesoc_rx_rx, main_basesoc_rx_data[7:1]};
                main_basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((main_basesoc_rx_count == 4'd9)) begin
                    main_basesoc_rx_source_valid <= (main_basesoc_rx_rx == 1'd1);
                    main_basesoc_rx_source_payload_data <= main_basesoc_rx_data;
                    builder_rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            main_basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            main_basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((main_basesoc_rx_rx == 1'd0) & (main_basesoc_rx_rx_d == 1'd1))) begin
                builder_rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign main_basesoc_uart_uart_sink_valid = main_basesoc_rx_source_valid;
assign main_basesoc_rx_source_ready = main_basesoc_uart_uart_sink_ready;
assign main_basesoc_uart_uart_sink_first = main_basesoc_rx_source_first;
assign main_basesoc_uart_uart_sink_last = main_basesoc_rx_source_last;
assign main_basesoc_uart_uart_sink_payload_data = main_basesoc_rx_source_payload_data;
assign main_basesoc_tx_sink_valid = main_basesoc_uart_uart_source_valid;
assign main_basesoc_uart_uart_source_ready = main_basesoc_tx_sink_ready;
assign main_basesoc_tx_sink_first = main_basesoc_uart_uart_source_first;
assign main_basesoc_tx_sink_last = main_basesoc_uart_uart_source_last;
assign main_basesoc_tx_sink_payload_data = main_basesoc_uart_uart_source_payload_data;
assign main_basesoc_uart_tx_fifo_sink_valid = main_basesoc_uart_rxtx_re;
assign main_basesoc_uart_tx_fifo_sink_payload_data = main_basesoc_uart_rxtx_r;
assign main_basesoc_uart_uart_source_valid = main_basesoc_uart_tx_fifo_source_valid;
assign main_basesoc_uart_tx_fifo_source_ready = main_basesoc_uart_uart_source_ready;
assign main_basesoc_uart_uart_source_first = main_basesoc_uart_tx_fifo_source_first;
assign main_basesoc_uart_uart_source_last = main_basesoc_uart_tx_fifo_source_last;
assign main_basesoc_uart_uart_source_payload_data = main_basesoc_uart_tx_fifo_source_payload_data;
assign main_basesoc_uart_txfull_status = (~main_basesoc_uart_tx_fifo_sink_ready);
assign main_basesoc_uart_txempty_status = (~main_basesoc_uart_tx_fifo_source_valid);
assign main_basesoc_uart_tx_trigger = main_basesoc_uart_tx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_valid = main_basesoc_uart_uart_sink_valid;
assign main_basesoc_uart_uart_sink_ready = main_basesoc_uart_rx_fifo_sink_ready;
assign main_basesoc_uart_rx_fifo_sink_first = main_basesoc_uart_uart_sink_first;
assign main_basesoc_uart_rx_fifo_sink_last = main_basesoc_uart_uart_sink_last;
assign main_basesoc_uart_rx_fifo_sink_payload_data = main_basesoc_uart_uart_sink_payload_data;
assign main_basesoc_uart_rxtx_w = main_basesoc_uart_rx_fifo_source_payload_data;
assign main_basesoc_uart_rx_fifo_source_ready = (main_basesoc_uart_rx_clear | (1'd0 & main_basesoc_uart_rxtx_we));
assign main_basesoc_uart_rxempty_status = (~main_basesoc_uart_rx_fifo_source_valid);
assign main_basesoc_uart_rxfull_status = (~main_basesoc_uart_rx_fifo_sink_ready);
assign main_basesoc_uart_rx_trigger = main_basesoc_uart_rx_fifo_source_valid;
assign main_basesoc_uart_tx0 = main_basesoc_uart_tx_status;
assign main_basesoc_uart_tx1 = main_basesoc_uart_tx_pending;
always @(*) begin
    main_basesoc_uart_tx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[0])) begin
        main_basesoc_uart_tx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_rx0 = main_basesoc_uart_rx_status;
assign main_basesoc_uart_rx1 = main_basesoc_uart_rx_pending;
always @(*) begin
    main_basesoc_uart_rx_clear <= 1'd0;
    if ((main_basesoc_uart_pending_re & main_basesoc_uart_pending_r[1])) begin
        main_basesoc_uart_rx_clear <= 1'd1;
    end
end
assign main_basesoc_uart_irq = ((main_basesoc_uart_pending_status[0] & main_basesoc_uart_enable_storage[0]) | (main_basesoc_uart_pending_status[1] & main_basesoc_uart_enable_storage[1]));
assign main_basesoc_uart_tx_status = main_basesoc_uart_tx_trigger;
assign main_basesoc_uart_rx_status = main_basesoc_uart_rx_trigger;
assign main_basesoc_uart_tx_fifo_syncfifo_din = {main_basesoc_uart_tx_fifo_fifo_in_last, main_basesoc_uart_tx_fifo_fifo_in_first, main_basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_tx_fifo_fifo_out_last, main_basesoc_uart_tx_fifo_fifo_out_first, main_basesoc_uart_tx_fifo_fifo_out_payload_data} = main_basesoc_uart_tx_fifo_syncfifo_dout;
assign main_basesoc_uart_tx_fifo_sink_ready = main_basesoc_uart_tx_fifo_syncfifo_writable;
assign main_basesoc_uart_tx_fifo_syncfifo_we = main_basesoc_uart_tx_fifo_sink_valid;
assign main_basesoc_uart_tx_fifo_fifo_in_first = main_basesoc_uart_tx_fifo_sink_first;
assign main_basesoc_uart_tx_fifo_fifo_in_last = main_basesoc_uart_tx_fifo_sink_last;
assign main_basesoc_uart_tx_fifo_fifo_in_payload_data = main_basesoc_uart_tx_fifo_sink_payload_data;
assign main_basesoc_uart_tx_fifo_source_valid = main_basesoc_uart_tx_fifo_readable;
assign main_basesoc_uart_tx_fifo_source_first = main_basesoc_uart_tx_fifo_fifo_out_first;
assign main_basesoc_uart_tx_fifo_source_last = main_basesoc_uart_tx_fifo_fifo_out_last;
assign main_basesoc_uart_tx_fifo_source_payload_data = main_basesoc_uart_tx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_tx_fifo_re = main_basesoc_uart_tx_fifo_source_ready;
assign main_basesoc_uart_tx_fifo_syncfifo_re = (main_basesoc_uart_tx_fifo_syncfifo_readable & ((~main_basesoc_uart_tx_fifo_readable) | main_basesoc_uart_tx_fifo_re));
assign main_basesoc_uart_tx_fifo_level1 = (main_basesoc_uart_tx_fifo_level0 + main_basesoc_uart_tx_fifo_readable);
always @(*) begin
    main_basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_tx_fifo_replace) begin
        main_basesoc_uart_tx_fifo_wrport_adr <= (main_basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_tx_fifo_wrport_adr <= main_basesoc_uart_tx_fifo_produce;
    end
end
assign main_basesoc_uart_tx_fifo_wrport_dat_w = main_basesoc_uart_tx_fifo_syncfifo_din;
assign main_basesoc_uart_tx_fifo_wrport_we = (main_basesoc_uart_tx_fifo_syncfifo_we & (main_basesoc_uart_tx_fifo_syncfifo_writable | main_basesoc_uart_tx_fifo_replace));
assign main_basesoc_uart_tx_fifo_do_read = (main_basesoc_uart_tx_fifo_syncfifo_readable & main_basesoc_uart_tx_fifo_syncfifo_re);
assign main_basesoc_uart_tx_fifo_rdport_adr = main_basesoc_uart_tx_fifo_consume;
assign main_basesoc_uart_tx_fifo_syncfifo_dout = main_basesoc_uart_tx_fifo_rdport_dat_r;
assign main_basesoc_uart_tx_fifo_rdport_re = main_basesoc_uart_tx_fifo_do_read;
assign main_basesoc_uart_tx_fifo_syncfifo_writable = (main_basesoc_uart_tx_fifo_level0 != 5'd16);
assign main_basesoc_uart_tx_fifo_syncfifo_readable = (main_basesoc_uart_tx_fifo_level0 != 1'd0);
assign main_basesoc_uart_rx_fifo_syncfifo_din = {main_basesoc_uart_rx_fifo_fifo_in_last, main_basesoc_uart_rx_fifo_fifo_in_first, main_basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {main_basesoc_uart_rx_fifo_fifo_out_last, main_basesoc_uart_rx_fifo_fifo_out_first, main_basesoc_uart_rx_fifo_fifo_out_payload_data} = main_basesoc_uart_rx_fifo_syncfifo_dout;
assign main_basesoc_uart_rx_fifo_sink_ready = main_basesoc_uart_rx_fifo_syncfifo_writable;
assign main_basesoc_uart_rx_fifo_syncfifo_we = main_basesoc_uart_rx_fifo_sink_valid;
assign main_basesoc_uart_rx_fifo_fifo_in_first = main_basesoc_uart_rx_fifo_sink_first;
assign main_basesoc_uart_rx_fifo_fifo_in_last = main_basesoc_uart_rx_fifo_sink_last;
assign main_basesoc_uart_rx_fifo_fifo_in_payload_data = main_basesoc_uart_rx_fifo_sink_payload_data;
assign main_basesoc_uart_rx_fifo_source_valid = main_basesoc_uart_rx_fifo_readable;
assign main_basesoc_uart_rx_fifo_source_first = main_basesoc_uart_rx_fifo_fifo_out_first;
assign main_basesoc_uart_rx_fifo_source_last = main_basesoc_uart_rx_fifo_fifo_out_last;
assign main_basesoc_uart_rx_fifo_source_payload_data = main_basesoc_uart_rx_fifo_fifo_out_payload_data;
assign main_basesoc_uart_rx_fifo_re = main_basesoc_uart_rx_fifo_source_ready;
assign main_basesoc_uart_rx_fifo_syncfifo_re = (main_basesoc_uart_rx_fifo_syncfifo_readable & ((~main_basesoc_uart_rx_fifo_readable) | main_basesoc_uart_rx_fifo_re));
assign main_basesoc_uart_rx_fifo_level1 = (main_basesoc_uart_rx_fifo_level0 + main_basesoc_uart_rx_fifo_readable);
always @(*) begin
    main_basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (main_basesoc_uart_rx_fifo_replace) begin
        main_basesoc_uart_rx_fifo_wrport_adr <= (main_basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        main_basesoc_uart_rx_fifo_wrport_adr <= main_basesoc_uart_rx_fifo_produce;
    end
end
assign main_basesoc_uart_rx_fifo_wrport_dat_w = main_basesoc_uart_rx_fifo_syncfifo_din;
assign main_basesoc_uart_rx_fifo_wrport_we = (main_basesoc_uart_rx_fifo_syncfifo_we & (main_basesoc_uart_rx_fifo_syncfifo_writable | main_basesoc_uart_rx_fifo_replace));
assign main_basesoc_uart_rx_fifo_do_read = (main_basesoc_uart_rx_fifo_syncfifo_readable & main_basesoc_uart_rx_fifo_syncfifo_re);
assign main_basesoc_uart_rx_fifo_rdport_adr = main_basesoc_uart_rx_fifo_consume;
assign main_basesoc_uart_rx_fifo_syncfifo_dout = main_basesoc_uart_rx_fifo_rdport_dat_r;
assign main_basesoc_uart_rx_fifo_rdport_re = main_basesoc_uart_rx_fifo_do_read;
assign main_basesoc_uart_rx_fifo_syncfifo_writable = (main_basesoc_uart_rx_fifo_level0 != 5'd16);
assign main_basesoc_uart_rx_fifo_syncfifo_readable = (main_basesoc_uart_rx_fifo_level0 != 1'd0);
assign main_basesoc_timer_zero_trigger = (main_basesoc_timer_value == 1'd0);
assign main_basesoc_timer_zero0 = main_basesoc_timer_zero_status;
assign main_basesoc_timer_zero1 = main_basesoc_timer_zero_pending;
always @(*) begin
    main_basesoc_timer_zero_clear <= 1'd0;
    if ((main_basesoc_timer_pending_re & main_basesoc_timer_pending_r)) begin
        main_basesoc_timer_zero_clear <= 1'd1;
    end
end
assign main_basesoc_timer_irq = (main_basesoc_timer_pending_status & main_basesoc_timer_enable_storage);
assign main_basesoc_timer_zero_status = main_basesoc_timer_zero_trigger;
assign por_clk = clk50;
assign main_crg_por_done = (main_crg_por_count == 1'd0);
assign main_crg_reset = ((~main_crg_por_done) | rst);
assign main_crg_clkin = clk50;
assign sys_clk = main_crg_clkout;
assign main_wait = (~main_done);
always @(*) begin
    main_leds <= 6'd0;
    if ((main_mode == 1'd1)) begin
        main_leds <= main_storage;
    end else begin
        main_leds <= main_chaser;
    end
end
assign {led_n5, led_n4, led_n3, led_n2, led_n1, led_n0} = (main_leds ^ 1'd0);
assign main_done = (main_count == 1'd0);
always @(*) begin
    builder_interface0_ack <= 1'd0;
    builder_interface0_dat_r <= 32'd0;
    builder_interface1_adr <= 14'd0;
    builder_interface1_dat_w <= 32'd0;
    builder_interface1_re <= 1'd0;
    builder_interface1_we <= 1'd0;
    builder_next_state <= 1'd0;
    builder_next_state <= builder_state;
    case (builder_state)
        1'd1: begin
            builder_interface0_ack <= 1'd1;
            builder_interface0_dat_r <= builder_interface1_dat_r;
            builder_next_state <= 1'd0;
        end
        default: begin
            builder_interface1_dat_w <= builder_interface0_dat_w;
            if ((builder_interface0_cyc & builder_interface0_stb)) begin
                builder_interface1_adr <= builder_interface0_adr;
                builder_interface1_re <= ((~builder_interface0_we) & (builder_interface0_sel != 1'd0));
                builder_interface1_we <= (builder_interface0_we & (builder_interface0_sel != 1'd0));
                builder_next_state <= 1'd1;
            end
        end
    endcase
end
assign builder_csrbank0_sel = (builder_interface0_bank_bus_adr[13:9] == 1'd1);
assign builder_csrbank0_reset0_r = builder_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank0_reset0_re <= 1'd0;
    builder_csrbank0_reset0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank0_reset0_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_reset0_we <= builder_interface0_bank_bus_re;
    end
end
assign builder_csrbank0_scratch0_r = builder_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csrbank0_scratch0_re <= 1'd0;
    builder_csrbank0_scratch0_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank0_scratch0_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_scratch0_we <= builder_interface0_bank_bus_re;
    end
end
assign builder_csrbank0_bus_errors_r = builder_interface0_bank_bus_dat_w;
always @(*) begin
    builder_csrbank0_bus_errors_re <= 1'd0;
    builder_csrbank0_bus_errors_we <= 1'd0;
    if ((builder_csrbank0_sel & (builder_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank0_bus_errors_re <= builder_interface0_bank_bus_we;
        builder_csrbank0_bus_errors_we <= builder_interface0_bank_bus_re;
    end
end
always @(*) begin
    main_basesoc_soc_rst <= 1'd0;
    if (main_basesoc_reset_re) begin
        main_basesoc_soc_rst <= main_basesoc_reset_storage[0];
    end
end
assign main_basesoc_cpu_rst = main_basesoc_reset_storage[1];
assign builder_csrbank0_reset0_w = main_basesoc_reset_storage;
assign builder_csrbank0_scratch0_w = main_basesoc_scratch_storage;
assign builder_csrbank0_bus_errors_w = main_basesoc_bus_errors_status;
assign main_basesoc_bus_errors_we = builder_csrbank0_bus_errors_we;
assign builder_csrbank1_sel = (builder_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csrbank1_out0_r = builder_interface1_bank_bus_dat_w[5:0];
always @(*) begin
    builder_csrbank1_out0_re <= 1'd0;
    builder_csrbank1_out0_we <= 1'd0;
    if ((builder_csrbank1_sel & (builder_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank1_out0_re <= builder_interface1_bank_bus_we;
        builder_csrbank1_out0_we <= builder_interface1_bank_bus_re;
    end
end
assign builder_csrbank1_out0_w = main_storage;
assign builder_csrbank2_sel = (builder_interface2_bank_bus_adr[13:9] == 1'd0);
assign builder_csrbank2_data_in0_r = builder_interface2_bank_bus_dat_w;
always @(*) begin
    builder_csrbank2_data_in0_re <= 1'd0;
    builder_csrbank2_data_in0_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank2_data_in0_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_data_in0_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_data_out_r = builder_interface2_bank_bus_dat_w;
always @(*) begin
    builder_csrbank2_data_out_re <= 1'd0;
    builder_csrbank2_data_out_we <= 1'd0;
    if ((builder_csrbank2_sel & (builder_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank2_data_out_re <= builder_interface2_bank_bus_we;
        builder_csrbank2_data_out_we <= builder_interface2_bank_bus_re;
    end
end
assign builder_csrbank2_data_in0_w = main_data_in_storage;
assign builder_csrbank2_data_out_w = main_data_out_status;
assign main_data_out_we = builder_csrbank2_data_out_we;
assign builder_csrbank3_sel = (builder_interface3_bank_bus_adr[13:9] == 2'd3);
assign builder_csrbank3_load0_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_load0_re <= 1'd0;
    builder_csrbank3_load0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        builder_csrbank3_load0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_load0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_reload0_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_reload0_re <= 1'd0;
    builder_csrbank3_reload0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank3_reload0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_reload0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_en0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_en0_re <= 1'd0;
    builder_csrbank3_en0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank3_en0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_en0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_update_value0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_update_value0_re <= 1'd0;
    builder_csrbank3_update_value0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank3_update_value0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_update_value0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_value_r = builder_interface3_bank_bus_dat_w;
always @(*) begin
    builder_csrbank3_value_re <= 1'd0;
    builder_csrbank3_value_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank3_value_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_value_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_status_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_status_re <= 1'd0;
    builder_csrbank3_ev_status_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank3_ev_status_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_status_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_pending_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_pending_re <= 1'd0;
    builder_csrbank3_ev_pending_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank3_ev_pending_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_pending_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_ev_enable0_r = builder_interface3_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank3_ev_enable0_re <= 1'd0;
    builder_csrbank3_ev_enable0_we <= 1'd0;
    if ((builder_csrbank3_sel & (builder_interface3_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank3_ev_enable0_re <= builder_interface3_bank_bus_we;
        builder_csrbank3_ev_enable0_we <= builder_interface3_bank_bus_re;
    end
end
assign builder_csrbank3_load0_w = main_basesoc_timer_load_storage;
assign builder_csrbank3_reload0_w = main_basesoc_timer_reload_storage;
assign builder_csrbank3_en0_w = main_basesoc_timer_en_storage;
assign builder_csrbank3_update_value0_w = main_basesoc_timer_update_value_storage;
assign builder_csrbank3_value_w = main_basesoc_timer_value_status;
assign main_basesoc_timer_value_we = builder_csrbank3_value_we;
assign main_basesoc_timer_status_status = main_basesoc_timer_zero0;
assign builder_csrbank3_ev_status_w = main_basesoc_timer_status_status;
assign main_basesoc_timer_status_we = builder_csrbank3_ev_status_we;
assign main_basesoc_timer_pending_status = main_basesoc_timer_zero1;
assign builder_csrbank3_ev_pending_w = main_basesoc_timer_pending_status;
assign main_basesoc_timer_pending_we = builder_csrbank3_ev_pending_we;
assign main_basesoc_timer_zero2 = main_basesoc_timer_enable_storage;
assign builder_csrbank3_ev_enable0_w = main_basesoc_timer_enable_storage;
assign builder_csrbank4_sel = (builder_interface4_bank_bus_adr[13:9] == 3'd4);
assign main_basesoc_uart_rxtx_r = builder_interface4_bank_bus_dat_w[7:0];
always @(*) begin
    main_basesoc_uart_rxtx_re <= 1'd0;
    main_basesoc_uart_rxtx_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        main_basesoc_uart_rxtx_re <= builder_interface4_bank_bus_we;
        main_basesoc_uart_rxtx_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_txfull_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_txfull_re <= 1'd0;
    builder_csrbank4_txfull_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        builder_csrbank4_txfull_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_txfull_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_rxempty_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_rxempty_re <= 1'd0;
    builder_csrbank4_rxempty_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        builder_csrbank4_rxempty_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_rxempty_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_ev_status_r = builder_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank4_ev_status_re <= 1'd0;
    builder_csrbank4_ev_status_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        builder_csrbank4_ev_status_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_ev_status_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_ev_pending_r = builder_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank4_ev_pending_re <= 1'd0;
    builder_csrbank4_ev_pending_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        builder_csrbank4_ev_pending_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_ev_pending_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_ev_enable0_r = builder_interface4_bank_bus_dat_w[1:0];
always @(*) begin
    builder_csrbank4_ev_enable0_re <= 1'd0;
    builder_csrbank4_ev_enable0_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        builder_csrbank4_ev_enable0_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_ev_enable0_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_txempty_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_txempty_re <= 1'd0;
    builder_csrbank4_txempty_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        builder_csrbank4_txempty_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_txempty_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_rxfull_r = builder_interface4_bank_bus_dat_w[0];
always @(*) begin
    builder_csrbank4_rxfull_re <= 1'd0;
    builder_csrbank4_rxfull_we <= 1'd0;
    if ((builder_csrbank4_sel & (builder_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        builder_csrbank4_rxfull_re <= builder_interface4_bank_bus_we;
        builder_csrbank4_rxfull_we <= builder_interface4_bank_bus_re;
    end
end
assign builder_csrbank4_txfull_w = main_basesoc_uart_txfull_status;
assign main_basesoc_uart_txfull_we = builder_csrbank4_txfull_we;
assign builder_csrbank4_rxempty_w = main_basesoc_uart_rxempty_status;
assign main_basesoc_uart_rxempty_we = builder_csrbank4_rxempty_we;
always @(*) begin
    main_basesoc_uart_status_status <= 2'd0;
    main_basesoc_uart_status_status[0] <= main_basesoc_uart_tx0;
    main_basesoc_uart_status_status[1] <= main_basesoc_uart_rx0;
end
assign builder_csrbank4_ev_status_w = main_basesoc_uart_status_status;
assign main_basesoc_uart_status_we = builder_csrbank4_ev_status_we;
always @(*) begin
    main_basesoc_uart_pending_status <= 2'd0;
    main_basesoc_uart_pending_status[0] <= main_basesoc_uart_tx1;
    main_basesoc_uart_pending_status[1] <= main_basesoc_uart_rx1;
end
assign builder_csrbank4_ev_pending_w = main_basesoc_uart_pending_status;
assign main_basesoc_uart_pending_we = builder_csrbank4_ev_pending_we;
assign main_basesoc_uart_tx2 = main_basesoc_uart_enable_storage[0];
assign main_basesoc_uart_rx2 = main_basesoc_uart_enable_storage[1];
assign builder_csrbank4_ev_enable0_w = main_basesoc_uart_enable_storage;
assign builder_csrbank4_txempty_w = main_basesoc_uart_txempty_status;
assign main_basesoc_uart_txempty_we = builder_csrbank4_txempty_we;
assign builder_csrbank4_rxfull_w = main_basesoc_uart_rxfull_status;
assign main_basesoc_uart_rxfull_we = builder_csrbank4_rxfull_we;
assign builder_adr = builder_interface1_adr;
assign builder_re = builder_interface1_re;
assign builder_we = builder_interface1_we;
assign builder_dat_w = builder_interface1_dat_w;
assign builder_interface1_dat_r = builder_dat_r;
assign builder_interface0_bank_bus_adr = builder_adr;
assign builder_interface1_bank_bus_adr = builder_adr;
assign builder_interface2_bank_bus_adr = builder_adr;
assign builder_interface3_bank_bus_adr = builder_adr;
assign builder_interface4_bank_bus_adr = builder_adr;
assign builder_interface0_bank_bus_re = builder_re;
assign builder_interface1_bank_bus_re = builder_re;
assign builder_interface2_bank_bus_re = builder_re;
assign builder_interface3_bank_bus_re = builder_re;
assign builder_interface4_bank_bus_re = builder_re;
assign builder_interface0_bank_bus_we = builder_we;
assign builder_interface1_bank_bus_we = builder_we;
assign builder_interface2_bank_bus_we = builder_we;
assign builder_interface3_bank_bus_we = builder_we;
assign builder_interface4_bank_bus_we = builder_we;
assign builder_interface0_bank_bus_dat_w = builder_dat_w;
assign builder_interface1_bank_bus_dat_w = builder_dat_w;
assign builder_interface2_bank_bus_dat_w = builder_dat_w;
assign builder_interface3_bank_bus_dat_w = builder_dat_w;
assign builder_interface4_bank_bus_dat_w = builder_dat_w;
assign builder_dat_r = ((((builder_interface0_bank_bus_dat_r | builder_interface1_bank_bus_dat_r) | builder_interface2_bank_bus_dat_r) | builder_interface3_bank_bus_dat_r) | builder_interface4_bank_bus_dat_r);
always @(*) begin
    builder_array_muxed0 <= 30'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed0 <= main_basesoc_ibus_adr;
        end
        default: begin
            builder_array_muxed0 <= main_basesoc_dbus_adr;
        end
    endcase
end
always @(*) begin
    builder_array_muxed1 <= 32'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed1 <= main_basesoc_ibus_dat_w;
        end
        default: begin
            builder_array_muxed1 <= main_basesoc_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    builder_array_muxed2 <= 4'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed2 <= main_basesoc_ibus_sel;
        end
        default: begin
            builder_array_muxed2 <= main_basesoc_dbus_sel;
        end
    endcase
end
always @(*) begin
    builder_array_muxed3 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed3 <= main_basesoc_ibus_cyc;
        end
        default: begin
            builder_array_muxed3 <= main_basesoc_dbus_cyc;
        end
    endcase
end
always @(*) begin
    builder_array_muxed4 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed4 <= main_basesoc_ibus_stb;
        end
        default: begin
            builder_array_muxed4 <= main_basesoc_dbus_stb;
        end
    endcase
end
always @(*) begin
    builder_array_muxed5 <= 1'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed5 <= main_basesoc_ibus_we;
        end
        default: begin
            builder_array_muxed5 <= main_basesoc_dbus_we;
        end
    endcase
end
always @(*) begin
    builder_array_muxed6 <= 3'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed6 <= main_basesoc_ibus_cti;
        end
        default: begin
            builder_array_muxed6 <= main_basesoc_dbus_cti;
        end
    endcase
end
always @(*) begin
    builder_array_muxed7 <= 2'd0;
    case (builder_grant)
        1'd0: begin
            builder_array_muxed7 <= main_basesoc_ibus_bte;
        end
        default: begin
            builder_array_muxed7 <= main_basesoc_dbus_bte;
        end
    endcase
end
assign main_basesoc_rx_rx = builder_regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~main_crg_por_done)) begin
        main_crg_por_count <= (main_crg_por_count - 1'd1);
    end
    if (por_rst) begin
        main_crg_por_count <= 16'd65535;
    end
end

always @(posedge sys_clk) begin
    case (builder_grant)
        1'd0: begin
            if ((~builder_request[0])) begin
                if (builder_request[1]) begin
                    builder_grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~builder_request[1])) begin
                if (builder_request[0]) begin
                    builder_grant <= 1'd0;
                end
            end
        end
    endcase
    builder_slave_sel_r <= builder_slave_sel;
    if (builder_wait) begin
        if ((~builder_done)) begin
            builder_count <= (builder_count - 1'd1);
        end
    end else begin
        builder_count <= 20'd1000000;
    end
    if ((main_basesoc_bus_errors != 32'd4294967295)) begin
        if (main_basesoc_bus_error) begin
            main_basesoc_bus_errors <= (main_basesoc_bus_errors + 1'd1);
        end
    end
    main_basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((main_basesoc_basesoc_ram_bus_cyc & main_basesoc_basesoc_ram_bus_stb) & ((~main_basesoc_basesoc_ram_bus_ack) | main_basesoc_basesoc_adr_burst))) begin
        main_basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((main_basesoc_ram_bus_ram_bus_cyc & main_basesoc_ram_bus_ram_bus_stb) & ((~main_basesoc_ram_bus_ram_bus_ack) | main_basesoc_ram_adr_burst))) begin
        main_basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {main_basesoc_tx_tick, main_basesoc_tx_phase} <= 24'd9895604;
    if (main_basesoc_tx_enable) begin
        {main_basesoc_tx_tick, main_basesoc_tx_phase} <= (main_basesoc_tx_phase + 24'd9895604);
    end
    builder_rs232phytx_state <= builder_rs232phytx_next_state;
    if (main_basesoc_tx_count_rs232phytx_next_value_ce0) begin
        main_basesoc_tx_count <= main_basesoc_tx_count_rs232phytx_next_value0;
    end
    if (main_basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= main_basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (main_basesoc_tx_data_rs232phytx_next_value_ce2) begin
        main_basesoc_tx_data <= main_basesoc_tx_data_rs232phytx_next_value2;
    end
    main_basesoc_rx_rx_d <= main_basesoc_rx_rx;
    {main_basesoc_rx_tick, main_basesoc_rx_phase} <= 32'd2147483648;
    if (main_basesoc_rx_enable) begin
        {main_basesoc_rx_tick, main_basesoc_rx_phase} <= (main_basesoc_rx_phase + 24'd9895604);
    end
    builder_rs232phyrx_state <= builder_rs232phyrx_next_state;
    if (main_basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        main_basesoc_rx_count <= main_basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (main_basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        main_basesoc_rx_data <= main_basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (main_basesoc_uart_tx_clear) begin
        main_basesoc_uart_tx_pending <= 1'd0;
    end
    main_basesoc_uart_tx_trigger_d <= main_basesoc_uart_tx_trigger;
    if ((main_basesoc_uart_tx_trigger & (~main_basesoc_uart_tx_trigger_d))) begin
        main_basesoc_uart_tx_pending <= 1'd1;
    end
    if (main_basesoc_uart_rx_clear) begin
        main_basesoc_uart_rx_pending <= 1'd0;
    end
    main_basesoc_uart_rx_trigger_d <= main_basesoc_uart_rx_trigger;
    if ((main_basesoc_uart_rx_trigger & (~main_basesoc_uart_rx_trigger_d))) begin
        main_basesoc_uart_rx_pending <= 1'd1;
    end
    if (main_basesoc_uart_tx_fifo_syncfifo_re) begin
        main_basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_tx_fifo_re) begin
            main_basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        main_basesoc_uart_tx_fifo_produce <= (main_basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_tx_fifo_do_read) begin
        main_basesoc_uart_tx_fifo_consume <= (main_basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_tx_fifo_syncfifo_we & main_basesoc_uart_tx_fifo_syncfifo_writable) & (~main_basesoc_uart_tx_fifo_replace))) begin
        if ((~main_basesoc_uart_tx_fifo_do_read)) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_tx_fifo_do_read) begin
            main_basesoc_uart_tx_fifo_level0 <= (main_basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_uart_rx_fifo_syncfifo_re) begin
        main_basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (main_basesoc_uart_rx_fifo_re) begin
            main_basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        main_basesoc_uart_rx_fifo_produce <= (main_basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (main_basesoc_uart_rx_fifo_do_read) begin
        main_basesoc_uart_rx_fifo_consume <= (main_basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((main_basesoc_uart_rx_fifo_syncfifo_we & main_basesoc_uart_rx_fifo_syncfifo_writable) & (~main_basesoc_uart_rx_fifo_replace))) begin
        if ((~main_basesoc_uart_rx_fifo_do_read)) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (main_basesoc_uart_rx_fifo_do_read) begin
            main_basesoc_uart_rx_fifo_level0 <= (main_basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (main_basesoc_timer_en_storage) begin
        if ((main_basesoc_timer_value == 1'd0)) begin
            main_basesoc_timer_value <= main_basesoc_timer_reload_storage;
        end else begin
            main_basesoc_timer_value <= (main_basesoc_timer_value - 1'd1);
        end
    end else begin
        main_basesoc_timer_value <= main_basesoc_timer_load_storage;
    end
    if (main_basesoc_timer_update_value_re) begin
        main_basesoc_timer_value_status <= main_basesoc_timer_value;
    end
    if (main_basesoc_timer_zero_clear) begin
        main_basesoc_timer_zero_pending <= 1'd0;
    end
    main_basesoc_timer_zero_trigger_d <= main_basesoc_timer_zero_trigger;
    if ((main_basesoc_timer_zero_trigger & (~main_basesoc_timer_zero_trigger_d))) begin
        main_basesoc_timer_zero_pending <= 1'd1;
    end
    if (main_done) begin
        main_chaser <= {main_chaser, (~main_chaser[5])};
    end
    if (main_re) begin
        main_mode <= 1'd1;
    end
    if (main_wait) begin
        if ((~main_done)) begin
            main_count <= (main_count - 1'd1);
        end
    end else begin
        main_count <= 22'd4166666;
    end
    builder_state <= builder_next_state;
    builder_interface0_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank0_sel) begin
        case (builder_interface0_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_reset0_w;
            end
            1'd1: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_scratch0_w;
            end
            2'd2: begin
                builder_interface0_bank_bus_dat_r <= builder_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (builder_csrbank0_reset0_re) begin
        main_basesoc_reset_storage <= builder_csrbank0_reset0_r;
    end
    main_basesoc_reset_re <= builder_csrbank0_reset0_re;
    if (builder_csrbank0_scratch0_re) begin
        main_basesoc_scratch_storage <= builder_csrbank0_scratch0_r;
    end
    main_basesoc_scratch_re <= builder_csrbank0_scratch0_re;
    main_basesoc_bus_errors_re <= builder_csrbank0_bus_errors_re;
    builder_interface1_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank1_sel) begin
        case (builder_interface1_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface1_bank_bus_dat_r <= builder_csrbank1_out0_w;
            end
        endcase
    end
    if (builder_csrbank1_out0_re) begin
        main_storage <= builder_csrbank1_out0_r;
    end
    main_re <= builder_csrbank1_out0_re;
    builder_interface2_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank2_sel) begin
        case (builder_interface2_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_data_in0_w;
            end
            1'd1: begin
                builder_interface2_bank_bus_dat_r <= builder_csrbank2_data_out_w;
            end
        endcase
    end
    if (builder_csrbank2_data_in0_re) begin
        main_data_in_storage <= builder_csrbank2_data_in0_r;
    end
    main_data_in_re <= builder_csrbank2_data_in0_re;
    main_data_out_re <= builder_csrbank2_data_out_re;
    builder_interface3_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank3_sel) begin
        case (builder_interface3_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_load0_w;
            end
            1'd1: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_reload0_w;
            end
            2'd2: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_en0_w;
            end
            2'd3: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_update_value0_w;
            end
            3'd4: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_value_w;
            end
            3'd5: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_status_w;
            end
            3'd6: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_pending_w;
            end
            3'd7: begin
                builder_interface3_bank_bus_dat_r <= builder_csrbank3_ev_enable0_w;
            end
        endcase
    end
    if (builder_csrbank3_load0_re) begin
        main_basesoc_timer_load_storage <= builder_csrbank3_load0_r;
    end
    main_basesoc_timer_load_re <= builder_csrbank3_load0_re;
    if (builder_csrbank3_reload0_re) begin
        main_basesoc_timer_reload_storage <= builder_csrbank3_reload0_r;
    end
    main_basesoc_timer_reload_re <= builder_csrbank3_reload0_re;
    if (builder_csrbank3_en0_re) begin
        main_basesoc_timer_en_storage <= builder_csrbank3_en0_r;
    end
    main_basesoc_timer_en_re <= builder_csrbank3_en0_re;
    if (builder_csrbank3_update_value0_re) begin
        main_basesoc_timer_update_value_storage <= builder_csrbank3_update_value0_r;
    end
    main_basesoc_timer_update_value_re <= builder_csrbank3_update_value0_re;
    main_basesoc_timer_value_re <= builder_csrbank3_value_re;
    main_basesoc_timer_status_re <= builder_csrbank3_ev_status_re;
    if (builder_csrbank3_ev_pending_re) begin
        main_basesoc_timer_pending_r <= builder_csrbank3_ev_pending_r;
    end
    main_basesoc_timer_pending_re <= builder_csrbank3_ev_pending_re;
    if (builder_csrbank3_ev_enable0_re) begin
        main_basesoc_timer_enable_storage <= builder_csrbank3_ev_enable0_r;
    end
    main_basesoc_timer_enable_re <= builder_csrbank3_ev_enable0_re;
    builder_interface4_bank_bus_dat_r <= 1'd0;
    if (builder_csrbank4_sel) begin
        case (builder_interface4_bank_bus_adr[8:0])
            1'd0: begin
                builder_interface4_bank_bus_dat_r <= main_basesoc_uart_rxtx_w;
            end
            1'd1: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_txfull_w;
            end
            2'd2: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_rxempty_w;
            end
            2'd3: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_status_w;
            end
            3'd4: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_pending_w;
            end
            3'd5: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_ev_enable0_w;
            end
            3'd6: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_txempty_w;
            end
            3'd7: begin
                builder_interface4_bank_bus_dat_r <= builder_csrbank4_rxfull_w;
            end
        endcase
    end
    main_basesoc_uart_txfull_re <= builder_csrbank4_txfull_re;
    main_basesoc_uart_rxempty_re <= builder_csrbank4_rxempty_re;
    main_basesoc_uart_status_re <= builder_csrbank4_ev_status_re;
    if (builder_csrbank4_ev_pending_re) begin
        main_basesoc_uart_pending_r <= builder_csrbank4_ev_pending_r;
    end
    main_basesoc_uart_pending_re <= builder_csrbank4_ev_pending_re;
    if (builder_csrbank4_ev_enable0_re) begin
        main_basesoc_uart_enable_storage <= builder_csrbank4_ev_enable0_r;
    end
    main_basesoc_uart_enable_re <= builder_csrbank4_ev_enable0_re;
    main_basesoc_uart_txempty_re <= builder_csrbank4_txempty_re;
    main_basesoc_uart_rxfull_re <= builder_csrbank4_rxfull_re;
    if (sys_rst) begin
        main_basesoc_reset_storage <= 2'd0;
        main_basesoc_reset_re <= 1'd0;
        main_basesoc_scratch_storage <= 32'd305419896;
        main_basesoc_scratch_re <= 1'd0;
        main_basesoc_bus_errors_re <= 1'd0;
        main_basesoc_bus_errors <= 32'd0;
        main_basesoc_basesoc_ram_bus_ack <= 1'd0;
        main_basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        main_basesoc_tx_tick <= 1'd0;
        main_basesoc_rx_tick <= 1'd0;
        main_basesoc_rx_rx_d <= 1'd0;
        main_basesoc_uart_txfull_re <= 1'd0;
        main_basesoc_uart_rxempty_re <= 1'd0;
        main_basesoc_uart_tx_pending <= 1'd0;
        main_basesoc_uart_tx_trigger_d <= 1'd0;
        main_basesoc_uart_rx_pending <= 1'd0;
        main_basesoc_uart_rx_trigger_d <= 1'd0;
        main_basesoc_uart_status_re <= 1'd0;
        main_basesoc_uart_pending_re <= 1'd0;
        main_basesoc_uart_pending_r <= 2'd0;
        main_basesoc_uart_enable_storage <= 2'd0;
        main_basesoc_uart_enable_re <= 1'd0;
        main_basesoc_uart_txempty_re <= 1'd0;
        main_basesoc_uart_rxfull_re <= 1'd0;
        main_basesoc_uart_tx_fifo_readable <= 1'd0;
        main_basesoc_uart_tx_fifo_level0 <= 5'd0;
        main_basesoc_uart_tx_fifo_produce <= 4'd0;
        main_basesoc_uart_tx_fifo_consume <= 4'd0;
        main_basesoc_uart_rx_fifo_readable <= 1'd0;
        main_basesoc_uart_rx_fifo_level0 <= 5'd0;
        main_basesoc_uart_rx_fifo_produce <= 4'd0;
        main_basesoc_uart_rx_fifo_consume <= 4'd0;
        main_basesoc_timer_load_storage <= 32'd0;
        main_basesoc_timer_load_re <= 1'd0;
        main_basesoc_timer_reload_storage <= 32'd0;
        main_basesoc_timer_reload_re <= 1'd0;
        main_basesoc_timer_en_storage <= 1'd0;
        main_basesoc_timer_en_re <= 1'd0;
        main_basesoc_timer_update_value_storage <= 1'd0;
        main_basesoc_timer_update_value_re <= 1'd0;
        main_basesoc_timer_value_status <= 32'd0;
        main_basesoc_timer_value_re <= 1'd0;
        main_basesoc_timer_zero_pending <= 1'd0;
        main_basesoc_timer_zero_trigger_d <= 1'd0;
        main_basesoc_timer_status_re <= 1'd0;
        main_basesoc_timer_pending_re <= 1'd0;
        main_basesoc_timer_pending_r <= 1'd0;
        main_basesoc_timer_enable_storage <= 1'd0;
        main_basesoc_timer_enable_re <= 1'd0;
        main_basesoc_timer_value <= 32'd0;
        main_data_in_storage <= 32'd0;
        main_data_in_re <= 1'd0;
        main_data_out_re <= 1'd0;
        main_storage <= 6'd0;
        main_re <= 1'd0;
        main_chaser <= 6'd0;
        main_mode <= 1'd0;
        main_count <= 22'd4166666;
        builder_grant <= 1'd0;
        builder_slave_sel_r <= 3'd0;
        builder_count <= 20'd1000000;
        builder_rs232phytx_state <= 1'd0;
        builder_rs232phyrx_state <= 1'd0;
        builder_state <= 1'd0;
    end
    builder_regs0 <= serial_rx;
    builder_regs1 <= builder_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6017-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6016];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[main_basesoc_basesoc_adr];
end
assign main_basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 8192-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:8191];
initial begin
	$readmemh("sipeed_tang_mega_138k_pro_sram.init", sram);
end
reg [12:0] sram_adr0;
always @(posedge sys_clk) begin
	if (main_basesoc_ram_we[0])
		sram[main_basesoc_ram_adr][7:0] <= main_basesoc_ram_dat_w[7:0];
	if (main_basesoc_ram_we[1])
		sram[main_basesoc_ram_adr][15:8] <= main_basesoc_ram_dat_w[15:8];
	if (main_basesoc_ram_we[2])
		sram[main_basesoc_ram_adr][23:16] <= main_basesoc_ram_dat_w[23:16];
	if (main_basesoc_ram_we[3])
		sram[main_basesoc_ram_adr][31:24] <= main_basesoc_ram_dat_w[31:24];
	sram_adr0 <= main_basesoc_ram_adr;
end
assign main_basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_wrport_we)
		storage[main_basesoc_uart_tx_fifo_wrport_adr] <= main_basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_basesoc_uart_tx_fifo_rdport_adr];
end
assign main_basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_wrport_we)
		storage_1[main_basesoc_uart_rx_fifo_wrport_adr] <= main_basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (main_basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_basesoc_uart_rx_fifo_rdport_adr];
end
assign main_basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance MyModule of MyModule Module.
//------------------------------------------------------------------------------
MyModule MyModule(
	// Inputs.
	.clk          (sys_clk),
	.cpu_data_in  (main_data_in_storage),
	.rst          (sys_rst),

	// Outputs.
	.cpu_data_out (main_data_out_status)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (main_basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (main_basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (main_basesoc_dbus_err),
	.externalInterruptArray (main_basesoc_interrupt),
	.externalResetVector    (main_basesoc_vexriscv),
	.iBusWishbone_ACK       (main_basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (main_basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (main_basesoc_ibus_err),
	.reset                  ((sys_rst | main_basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (main_basesoc_dbus_adr),
	.dBusWishbone_BTE       (main_basesoc_dbus_bte),
	.dBusWishbone_CTI       (main_basesoc_dbus_cti),
	.dBusWishbone_CYC       (main_basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (main_basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (main_basesoc_dbus_sel),
	.dBusWishbone_STB       (main_basesoc_dbus_stb),
	.dBusWishbone_WE        (main_basesoc_dbus_we),
	.iBusWishbone_ADR       (main_basesoc_ibus_adr),
	.iBusWishbone_BTE       (main_basesoc_ibus_bte),
	.iBusWishbone_CTI       (main_basesoc_ibus_cti),
	.iBusWishbone_CYC       (main_basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (main_basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (main_basesoc_ibus_sel),
	.iBusWishbone_STB       (main_basesoc_ibus_stb),
	.iBusWishbone_WE        (main_basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Instance PLL of PLL Module.
//------------------------------------------------------------------------------
PLL #(
	// Parameters.
	.CLK0_IN_SEL       (1'd0),
	.CLK0_OUT_SEL      (1'd0),
	.CLK1_IN_SEL       (1'd0),
	.CLK1_OUT_SEL      (1'd0),
	.CLK2_IN_SEL       (1'd0),
	.CLK2_OUT_SEL      (1'd0),
	.CLK3_IN_SEL       (1'd0),
	.CLK3_OUT_SEL      (1'd0),
	.CLK4_IN_SEL       (1'd0),
	.CLK4_OUT_SEL      (1'd0),
	.CLK5_IN_SEL       (1'd0),
	.CLK5_OUT_SEL      (1'd0),
	.CLKFB_SEL         ("INTERNAL"),
	.CLKOUT0_DT_DIR    (1'd1),
	.CLKOUT0_DT_STEP   (1'd0),
	.CLKOUT0_EN        ("TRUE"),
	.CLKOUT0_PE_COARSE (1'd0),
	.CLKOUT0_PE_FINE   (1'd0),
	.CLKOUT1_DT_DIR    (1'd1),
	.CLKOUT1_DT_STEP   (1'd0),
	.CLKOUT1_EN        ("FALSE"),
	.CLKOUT1_PE_COARSE (1'd0),
	.CLKOUT1_PE_FINE   (1'd0),
	.CLKOUT2_DT_DIR    (1'd1),
	.CLKOUT2_DT_STEP   (1'd0),
	.CLKOUT2_EN        ("FALSE"),
	.CLKOUT2_PE_COARSE (1'd0),
	.CLKOUT2_PE_FINE   (1'd0),
	.CLKOUT3_DT_DIR    (1'd1),
	.CLKOUT3_DT_STEP   (1'd0),
	.CLKOUT3_EN        ("FALSE"),
	.CLKOUT3_PE_COARSE (1'd0),
	.CLKOUT3_PE_FINE   (1'd0),
	.CLKOUT4_EN        ("FALSE"),
	.CLKOUT4_PE_COARSE (1'd0),
	.CLKOUT4_PE_FINE   (1'd0),
	.CLKOUT5_EN        ("FALSE"),
	.CLKOUT5_PE_COARSE (1'd0),
	.CLKOUT5_PE_FINE   (1'd0),
	.CLKOUT6_EN        ("FALSE"),
	.CLKOUT6_PE_COARSE (1'd0),
	.CLKOUT6_PE_FINE   (1'd0),
	.DE0_EN            ("FALSE"),
	.DE1_EN            ("FALSE"),
	.DE2_EN            ("FALSE"),
	.DE3_EN            ("FALSE"),
	.DE4_EN            ("FALSE"),
	.DE5_EN            ("FALSE"),
	.DE6_EN            ("FALSE"),
	.DYN_DPA_EN        ("FALSE"),
	.DYN_DT0_SEL       ("FALSE"),
	.DYN_DT1_SEL       ("FALSE"),
	.DYN_DT2_SEL       ("FALSE"),
	.DYN_DT3_SEL       ("FALSE"),
	.DYN_FBDIV_SEL     ("FALSE"),
	.DYN_ICP_SEL       ("FALSE"),
	.DYN_IDIV_SEL      ("FALSE"),
	.DYN_LPF_SEL       ("FALSE"),
	.DYN_ODIV0_SEL     ("FALSE"),
	.DYN_ODIV1_SEL     ("FALSE"),
	.DYN_ODIV2_SEL     ("FALSE"),
	.DYN_ODIV3_SEL     ("FALSE"),
	.DYN_ODIV4_SEL     ("FALSE"),
	.DYN_ODIV5_SEL     ("FALSE"),
	.DYN_ODIV6_SEL     ("FALSE"),
	.DYN_PE0_SEL       ("FALSE"),
	.DYN_PE1_SEL       ("FALSE"),
	.DYN_PE2_SEL       ("FALSE"),
	.DYN_PE3_SEL       ("FALSE"),
	.DYN_PE4_SEL       ("FALSE"),
	.DYN_PE5_SEL       ("FALSE"),
	.DYN_PE6_SEL       ("FALSE"),
	.FBDIV_SEL         (1'd1),
	.FCLKIN            ("50.0"),
	.IDIV_SEL          (1'd1),
	.MDIV_FRAC_SEL     (1'd0),
	.MDIV_SEL          (5'd16),
	.ODIV0_FRAC_SEL    (1'd0),
	.ODIV0_SEL         (5'd16),
	.ODIV1_SEL         (4'd8),
	.ODIV2_SEL         (4'd8),
	.ODIV3_SEL         (4'd8),
	.ODIV4_SEL         (4'd8),
	.ODIV5_SEL         (4'd8),
	.ODIV6_SEL         (4'd8),
	.RESET_I_EN        ("FALSE"),
	.RESET_O_EN        ("FALSE"),
	.SSC_EN            ("FALSE")
) PLL (
	// Inputs.
	.CLKFB         (1'd0),
	.CLKIN         (main_crg_clkin),
	.DT0           (4'd0),
	.DT1           (4'd0),
	.DT2           (4'd0),
	.DT3           (4'd0),
	.ENCLK0        (1'd1),
	.ENCLK1        (1'd1),
	.ENCLK2        (1'd1),
	.ENCLK3        (1'd1),
	.ENCLK4        (1'd1),
	.ENCLK5        (1'd1),
	.ENCLK6        (1'd1),
	.FBDSEL        (6'd0),
	.ICPSEL        (6'd0),
	.IDSEL         (6'd0),
	.LPFCAP        (2'd0),
	.LPFRES        (3'd0),
	.MDSEL         (7'd0),
	.MDSEL_FRAC    (3'd0),
	.ODSEL0        (7'd0),
	.ODSEL0_FRAC   (3'd0),
	.ODSEL1        (7'd0),
	.ODSEL2        (7'd0),
	.ODSEL3        (7'd0),
	.ODSEL4        (7'd0),
	.ODSEL5        (7'd0),
	.ODSEL6        (7'd0),
	.PLLPWD        (1'd0),
	.PSDIR         (1'd0),
	.PSPULSE       (1'd0),
	.PSSEL         (3'd0),
	.RESET         (main_crg_reset),
	.RESET_I       (1'd0),
	.RESET_O       (1'd0),
	.SSCMDSEL      (7'd0),
	.SSCMDSEL_FRAC (3'd0),
	.SSCON         (1'd0),
	.SSCPOL        (1'd0),

	// Outputs.
	.CLKFBOUT      (builder_gw5apll6),
	.CLKOUT0       (main_crg_clkout),
	.CLKOUT1       (builder_gw5apll0),
	.CLKOUT2       (builder_gw5apll1),
	.CLKOUT3       (builder_gw5apll2),
	.CLKOUT4       (builder_gw5apll3),
	.CLKOUT5       (builder_gw5apll4),
	.CLKOUT6       (builder_gw5apll5),
	.LOCK          (main_crg_locked)
);

//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET ((~main_crg_locked)),

	// Outputs.
	.Q      (builder_rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (builder_rst1),
	.PRESET ((~main_crg_locked)),

	// Outputs.
	.Q      (sys_rst)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-02-13 15:37:16.
//------------------------------------------------------------------------------
