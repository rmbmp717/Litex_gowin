// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sipeed_tang_nano_20k.v
// Device     : GW2AR-LV18QN88C8/I7
// LiteX sha1 : --------
// Date       : 2025-02-12 19:24:27
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module sipeed_tang_nano_20k (
    inout  wire   [31:0] IO_sdram_dq,
    output reg    [10:0] O_sdram_addr,
    output reg     [1:0] O_sdram_ba,
    output reg           O_sdram_cas_n,
    output reg           O_sdram_cke,
    output wire          O_sdram_clk,
    output reg           O_sdram_cs_n,
    output reg     [3:0] O_sdram_dqm,
    output reg           O_sdram_ras_n,
    output reg           O_sdram_wen_n,
    input  wire          btn0,
    input  wire          btn1,
    input  wire          clk27,
    output wire          led_n0,
    output wire          led_n1,
    output wire          led_n2,
    output wire          led_n3,
    output wire          led_n4,
    output wire          led_n5,
    input  wire          serial_rx,
    output reg           serial_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
BaseSoC
└─── crg (_CRG)
│    └─── pll (GW2APLL)
│    │    └─── [rPLL]
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── sdrphy (GENSDRPHY)
└─── sdram (LiteDRAMCore)
│    └─── dfii (DFIInjector)
│    │    └─── pi0 (PhaseInjector)
│    └─── controller (LiteDRAMController)
│    │    └─── refresher (Refresher)
│    │    │    └─── timer (RefreshTimer)
│    │    │    └─── postponer (RefreshPostponer)
│    │    │    └─── sequencer (RefreshSequencer)
│    │    │    │    └─── refreshexecuter_0* (RefreshExecuter)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_0* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_1* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_2* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── bankmachine_3* (BankMachine)
│    │    │    └─── syncfifo_0* (SyncFIFO)
│    │    │    │    └─── fifo (SyncFIFO)
│    │    │    └─── buffer_0* (Buffer)
│    │    │    │    └─── pipe_valid (PipeValid)
│    │    │    │    └─── pipeline (Pipeline)
│    │    │    └─── twtpcon (tXXDController)
│    │    │    └─── trccon (tXXDController)
│    │    │    └─── trascon (tXXDController)
│    │    │    └─── fsm (FSM)
│    │    └─── multiplexer (Multiplexer)
│    │    │    └─── choose_cmd (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── choose_req (_CommandChooser)
│    │    │    │    └─── roundrobin_0* (RoundRobin)
│    │    │    └─── _steerer_0* (_Steerer)
│    │    │    └─── trrdcon (tXXDController)
│    │    │    └─── tfawcon (tFAWController)
│    │    │    └─── tccdcon (tXXDController)
│    │    │    └─── twtrcon (tXXDController)
│    │    │    └─── fsm (FSM)
│    └─── crossbar (LiteDRAMCrossbar)
│    │    └─── roundrobin_0* (RoundRobin)
│    │    └─── roundrobin_1* (RoundRobin)
│    │    └─── roundrobin_2* (RoundRobin)
│    │    └─── roundrobin_3* (RoundRobin)
└─── l2_cache (Cache)
│    └─── fsm (FSM)
└─── wishbone_bridge (LiteDRAMWishbone2Native)
│    └─── litedramnativeportconverter_0* (LiteDRAMNativePortConverter)
│    │    └─── converter (LiteDRAMNativePortDownConverter)
│    │    │    └─── fsm (FSM)
│    │    │    └─── strideconverter_0* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _downconverter_0* (_DownConverter)
│    │    │    └─── pipeline_0* (Pipeline)
│    │    │    └─── strideconverter_1* (StrideConverter)
│    │    │    │    └─── converter_0* (Converter)
│    │    │    │    │    └─── _upconverter_0* (_UpConverter)
│    │    │    └─── pipeline_1* (Pipeline)
│    └─── fsm (FSM)
└─── leds (LedChaser)
│    └─── waittimer_0* (WaitTimer)
└─── buttons (GPIOIn)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    └─── csrbank_3* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstorage_4* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── csrbank_4* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_5* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
└─── [DFFP]
└─── [ODDR]
└─── [DFFP]
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg     [1:0] array_muxed0 = 2'd0;
reg    [10:0] array_muxed1 = 11'd0;
reg           array_muxed2 = 1'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg           array_muxed6 = 1'd0;
reg     [2:0] bankmachine0_next_state = 3'd0;
reg     [2:0] bankmachine0_state = 3'd0;
reg     [2:0] bankmachine1_next_state = 3'd0;
reg     [2:0] bankmachine1_state = 3'd0;
reg     [2:0] bankmachine2_next_state = 3'd0;
reg     [2:0] bankmachine2_state = 3'd0;
reg     [2:0] bankmachine3_next_state = 3'd0;
reg     [2:0] bankmachine3_state = 3'd0;
reg     [1:0] basesoc_adr_offset_r = 2'd0;
wire   [14:0] basesoc_basesoc_adr;
reg           basesoc_basesoc_adr_burst = 1'd0;
wire   [31:0] basesoc_basesoc_dat_r;
reg           basesoc_basesoc_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_basesoc_ram_bus_adr;
wire    [1:0] basesoc_basesoc_ram_bus_bte;
wire    [2:0] basesoc_basesoc_ram_bus_cti;
wire          basesoc_basesoc_ram_bus_cyc;
wire   [31:0] basesoc_basesoc_ram_bus_dat_r;
wire   [31:0] basesoc_basesoc_ram_bus_dat_w;
reg           basesoc_basesoc_ram_bus_err = 1'd0;
wire    [3:0] basesoc_basesoc_ram_bus_sel;
wire          basesoc_basesoc_ram_bus_stb;
wire          basesoc_basesoc_ram_bus_we;
wire          basesoc_bus_error;
reg    [31:0] basesoc_bus_errors = 32'd0;
reg           basesoc_bus_errors_re = 1'd0;
wire   [31:0] basesoc_bus_errors_status;
wire          basesoc_bus_errors_we;
wire          basesoc_cpu_rst;
wire    [2:0] basesoc_data_port_adr;
wire  [127:0] basesoc_data_port_dat_r;
reg   [127:0] basesoc_data_port_dat_w = 128'd0;
reg    [15:0] basesoc_data_port_we = 16'd0;
wire          basesoc_dbus_ack;
wire   [29:0] basesoc_dbus_adr;
wire    [1:0] basesoc_dbus_bte;
wire    [2:0] basesoc_dbus_cti;
wire          basesoc_dbus_cyc;
wire   [31:0] basesoc_dbus_dat_r;
wire   [31:0] basesoc_dbus_dat_w;
wire          basesoc_dbus_err;
wire    [3:0] basesoc_dbus_sel;
wire          basesoc_dbus_stb;
wire          basesoc_dbus_we;
wire          basesoc_ibus_ack;
wire   [29:0] basesoc_ibus_adr;
wire    [1:0] basesoc_ibus_bte;
wire    [2:0] basesoc_ibus_cti;
wire          basesoc_ibus_cyc;
wire   [31:0] basesoc_ibus_dat_r;
wire   [31:0] basesoc_ibus_dat_w;
wire          basesoc_ibus_err;
wire    [3:0] basesoc_ibus_sel;
wire          basesoc_ibus_stb;
wire          basesoc_ibus_we;
reg           basesoc_interface_ack = 1'd0;
wire   [27:0] basesoc_interface_adr;
reg           basesoc_interface_cyc = 1'd0;
reg   [127:0] basesoc_interface_dat_r = 128'd0;
wire  [127:0] basesoc_interface_dat_w;
wire   [15:0] basesoc_interface_sel;
reg           basesoc_interface_stb = 1'd0;
reg           basesoc_interface_we = 1'd0;
reg    [31:0] basesoc_interrupt = 32'd0;
reg    [20:0] basesoc_port_cmd_payload_addr = 21'd0;
reg           basesoc_port_cmd_payload_we = 1'd0;
wire          basesoc_port_cmd_ready;
reg           basesoc_port_cmd_valid = 1'd0;
reg           basesoc_port_rdata_first = 1'd0;
reg           basesoc_port_rdata_last = 1'd0;
wire   [31:0] basesoc_port_rdata_payload_data;
wire          basesoc_port_rdata_ready;
wire          basesoc_port_rdata_valid;
wire          basesoc_port_wdata_first;
wire          basesoc_port_wdata_last;
wire   [31:0] basesoc_port_wdata_payload_data;
wire    [3:0] basesoc_port_wdata_payload_we;
wire          basesoc_port_wdata_ready;
wire          basesoc_port_wdata_valid;
wire   [10:0] basesoc_ram_adr;
reg           basesoc_ram_adr_burst = 1'd0;
reg           basesoc_ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] basesoc_ram_bus_ram_bus_adr;
wire    [1:0] basesoc_ram_bus_ram_bus_bte;
wire    [2:0] basesoc_ram_bus_ram_bus_cti;
wire          basesoc_ram_bus_ram_bus_cyc;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_r;
wire   [31:0] basesoc_ram_bus_ram_bus_dat_w;
reg           basesoc_ram_bus_ram_bus_err = 1'd0;
wire    [3:0] basesoc_ram_bus_ram_bus_sel;
wire          basesoc_ram_bus_ram_bus_stb;
wire          basesoc_ram_bus_ram_bus_we;
wire   [31:0] basesoc_ram_dat_r;
wire   [31:0] basesoc_ram_dat_w;
reg     [3:0] basesoc_ram_we = 4'd0;
wire          basesoc_reset;
reg           basesoc_reset_re = 1'd0;
reg     [1:0] basesoc_reset_storage = 2'd0;
reg     [3:0] basesoc_rx_count = 4'd0;
reg     [3:0] basesoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg           basesoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_rx_data = 8'd0;
reg     [7:0] basesoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg           basesoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           basesoc_rx_enable = 1'd0;
reg    [31:0] basesoc_rx_phase = 32'd0;
wire          basesoc_rx_rx;
reg           basesoc_rx_rx_d = 1'd0;
reg           basesoc_rx_source_first = 1'd0;
reg           basesoc_rx_source_last = 1'd0;
reg     [7:0] basesoc_rx_source_payload_data = 8'd0;
wire          basesoc_rx_source_ready;
reg           basesoc_rx_source_valid = 1'd0;
reg           basesoc_rx_tick = 1'd0;
reg           basesoc_scratch_re = 1'd0;
reg    [31:0] basesoc_scratch_storage = 32'd305419896;
reg           basesoc_sdram_address_re = 1'd0;
reg    [10:0] basesoc_sdram_address_storage = 11'd0;
reg           basesoc_sdram_baddress_re = 1'd0;
reg     [1:0] basesoc_sdram_baddress_storage = 2'd0;
reg           basesoc_sdram_bankmachine0_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine0_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine0_cmd_payload_ba;
reg           basesoc_sdram_bankmachine0_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine0_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_consume = 3'd0;
wire          basesoc_sdram_bankmachine0_do_read;
wire          basesoc_sdram_bankmachine0_fifo_in_first;
wire          basesoc_sdram_bankmachine0_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine0_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine0_fifo_out_first;
wire          basesoc_sdram_bankmachine0_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine0_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine0_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine0_level = 4'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine0_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine0_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine0_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine0_rdport_dat_r;
reg           basesoc_sdram_bankmachine0_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine0_refresh_req;
reg           basesoc_sdram_bankmachine0_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine0_req_addr;
wire          basesoc_sdram_bankmachine0_req_lock;
reg           basesoc_sdram_bankmachine0_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine0_req_ready;
wire          basesoc_sdram_bankmachine0_req_valid;
reg           basesoc_sdram_bankmachine0_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_req_we;
reg    [10:0] basesoc_sdram_bankmachine0_row = 11'd0;
reg           basesoc_sdram_bankmachine0_row_close = 1'd0;
reg           basesoc_sdram_bankmachine0_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine0_row_hit;
reg           basesoc_sdram_bankmachine0_row_open = 1'd0;
reg           basesoc_sdram_bankmachine0_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine0_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine0_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_first;
wire          basesoc_sdram_bankmachine0_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine0_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine0_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine0_sink_sink_ready;
wire          basesoc_sdram_bankmachine0_sink_sink_valid;
wire          basesoc_sdram_bankmachine0_sink_valid;
wire          basesoc_sdram_bankmachine0_source_first;
wire          basesoc_sdram_bankmachine0_source_last;
wire   [18:0] basesoc_sdram_bankmachine0_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_first;
wire          basesoc_sdram_bankmachine0_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine0_source_source_payload_addr;
wire          basesoc_sdram_bankmachine0_source_source_payload_we;
wire          basesoc_sdram_bankmachine0_source_source_ready;
wire          basesoc_sdram_bankmachine0_source_source_valid;
wire          basesoc_sdram_bankmachine0_source_valid;
wire   [21:0] basesoc_sdram_bankmachine0_syncfifo0_din;
wire   [21:0] basesoc_sdram_bankmachine0_syncfifo0_dout;
wire          basesoc_sdram_bankmachine0_syncfifo0_re;
wire          basesoc_sdram_bankmachine0_syncfifo0_readable;
wire          basesoc_sdram_bankmachine0_syncfifo0_we;
wire          basesoc_sdram_bankmachine0_syncfifo0_writable;
reg           basesoc_sdram_bankmachine0_trascon_count = 1'd0;
reg           basesoc_sdram_bankmachine0_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine0_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine0_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine0_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine0_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine0_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine0_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine0_wrport_dat_w;
wire          basesoc_sdram_bankmachine0_wrport_we;
reg           basesoc_sdram_bankmachine1_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine1_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine1_cmd_payload_ba;
reg           basesoc_sdram_bankmachine1_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine1_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_consume = 3'd0;
wire          basesoc_sdram_bankmachine1_do_read;
wire          basesoc_sdram_bankmachine1_fifo_in_first;
wire          basesoc_sdram_bankmachine1_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine1_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine1_fifo_out_first;
wire          basesoc_sdram_bankmachine1_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine1_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine1_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine1_level = 4'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine1_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine1_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine1_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine1_rdport_dat_r;
reg           basesoc_sdram_bankmachine1_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine1_refresh_req;
reg           basesoc_sdram_bankmachine1_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine1_req_addr;
wire          basesoc_sdram_bankmachine1_req_lock;
reg           basesoc_sdram_bankmachine1_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine1_req_ready;
wire          basesoc_sdram_bankmachine1_req_valid;
reg           basesoc_sdram_bankmachine1_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_req_we;
reg    [10:0] basesoc_sdram_bankmachine1_row = 11'd0;
reg           basesoc_sdram_bankmachine1_row_close = 1'd0;
reg           basesoc_sdram_bankmachine1_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine1_row_hit;
reg           basesoc_sdram_bankmachine1_row_open = 1'd0;
reg           basesoc_sdram_bankmachine1_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine1_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine1_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_first;
wire          basesoc_sdram_bankmachine1_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine1_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine1_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine1_sink_sink_ready;
wire          basesoc_sdram_bankmachine1_sink_sink_valid;
wire          basesoc_sdram_bankmachine1_sink_valid;
wire          basesoc_sdram_bankmachine1_source_first;
wire          basesoc_sdram_bankmachine1_source_last;
wire   [18:0] basesoc_sdram_bankmachine1_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_first;
wire          basesoc_sdram_bankmachine1_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine1_source_source_payload_addr;
wire          basesoc_sdram_bankmachine1_source_source_payload_we;
wire          basesoc_sdram_bankmachine1_source_source_ready;
wire          basesoc_sdram_bankmachine1_source_source_valid;
wire          basesoc_sdram_bankmachine1_source_valid;
wire   [21:0] basesoc_sdram_bankmachine1_syncfifo1_din;
wire   [21:0] basesoc_sdram_bankmachine1_syncfifo1_dout;
wire          basesoc_sdram_bankmachine1_syncfifo1_re;
wire          basesoc_sdram_bankmachine1_syncfifo1_readable;
wire          basesoc_sdram_bankmachine1_syncfifo1_we;
wire          basesoc_sdram_bankmachine1_syncfifo1_writable;
reg           basesoc_sdram_bankmachine1_trascon_count = 1'd0;
reg           basesoc_sdram_bankmachine1_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine1_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine1_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine1_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine1_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine1_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine1_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine1_wrport_dat_w;
wire          basesoc_sdram_bankmachine1_wrport_we;
reg           basesoc_sdram_bankmachine2_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine2_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine2_cmd_payload_ba;
reg           basesoc_sdram_bankmachine2_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine2_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_consume = 3'd0;
wire          basesoc_sdram_bankmachine2_do_read;
wire          basesoc_sdram_bankmachine2_fifo_in_first;
wire          basesoc_sdram_bankmachine2_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine2_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine2_fifo_out_first;
wire          basesoc_sdram_bankmachine2_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine2_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine2_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine2_level = 4'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine2_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine2_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine2_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine2_rdport_dat_r;
reg           basesoc_sdram_bankmachine2_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine2_refresh_req;
reg           basesoc_sdram_bankmachine2_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine2_req_addr;
wire          basesoc_sdram_bankmachine2_req_lock;
reg           basesoc_sdram_bankmachine2_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine2_req_ready;
wire          basesoc_sdram_bankmachine2_req_valid;
reg           basesoc_sdram_bankmachine2_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_req_we;
reg    [10:0] basesoc_sdram_bankmachine2_row = 11'd0;
reg           basesoc_sdram_bankmachine2_row_close = 1'd0;
reg           basesoc_sdram_bankmachine2_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine2_row_hit;
reg           basesoc_sdram_bankmachine2_row_open = 1'd0;
reg           basesoc_sdram_bankmachine2_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine2_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine2_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_first;
wire          basesoc_sdram_bankmachine2_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine2_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine2_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine2_sink_sink_ready;
wire          basesoc_sdram_bankmachine2_sink_sink_valid;
wire          basesoc_sdram_bankmachine2_sink_valid;
wire          basesoc_sdram_bankmachine2_source_first;
wire          basesoc_sdram_bankmachine2_source_last;
wire   [18:0] basesoc_sdram_bankmachine2_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_first;
wire          basesoc_sdram_bankmachine2_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine2_source_source_payload_addr;
wire          basesoc_sdram_bankmachine2_source_source_payload_we;
wire          basesoc_sdram_bankmachine2_source_source_ready;
wire          basesoc_sdram_bankmachine2_source_source_valid;
wire          basesoc_sdram_bankmachine2_source_valid;
wire   [21:0] basesoc_sdram_bankmachine2_syncfifo2_din;
wire   [21:0] basesoc_sdram_bankmachine2_syncfifo2_dout;
wire          basesoc_sdram_bankmachine2_syncfifo2_re;
wire          basesoc_sdram_bankmachine2_syncfifo2_readable;
wire          basesoc_sdram_bankmachine2_syncfifo2_we;
wire          basesoc_sdram_bankmachine2_syncfifo2_writable;
reg           basesoc_sdram_bankmachine2_trascon_count = 1'd0;
reg           basesoc_sdram_bankmachine2_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine2_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine2_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine2_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine2_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine2_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine2_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine2_wrport_dat_w;
wire          basesoc_sdram_bankmachine2_wrport_we;
reg           basesoc_sdram_bankmachine3_auto_precharge = 1'd0;
reg    [10:0] basesoc_sdram_bankmachine3_cmd_payload_a = 11'd0;
wire    [1:0] basesoc_sdram_bankmachine3_cmd_payload_ba;
reg           basesoc_sdram_bankmachine3_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_payload_we = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_ready = 1'd0;
reg           basesoc_sdram_bankmachine3_cmd_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_consume = 3'd0;
wire          basesoc_sdram_bankmachine3_do_read;
wire          basesoc_sdram_bankmachine3_fifo_in_first;
wire          basesoc_sdram_bankmachine3_fifo_in_last;
wire   [18:0] basesoc_sdram_bankmachine3_fifo_in_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_in_payload_we;
wire          basesoc_sdram_bankmachine3_fifo_out_first;
wire          basesoc_sdram_bankmachine3_fifo_out_last;
wire   [18:0] basesoc_sdram_bankmachine3_fifo_out_payload_addr;
wire          basesoc_sdram_bankmachine3_fifo_out_payload_we;
reg     [3:0] basesoc_sdram_bankmachine3_level = 4'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_first;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_last;
wire   [18:0] basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
wire          basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_first = 1'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_last = 1'd0;
reg    [18:0] basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr = 19'd0;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          basesoc_sdram_bankmachine3_pipe_valid_source_ready;
reg           basesoc_sdram_bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [2:0] basesoc_sdram_bankmachine3_produce = 3'd0;
wire    [2:0] basesoc_sdram_bankmachine3_rdport_adr;
wire   [21:0] basesoc_sdram_bankmachine3_rdport_dat_r;
reg           basesoc_sdram_bankmachine3_refresh_gnt = 1'd0;
wire          basesoc_sdram_bankmachine3_refresh_req;
reg           basesoc_sdram_bankmachine3_replace = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine3_req_addr;
wire          basesoc_sdram_bankmachine3_req_lock;
reg           basesoc_sdram_bankmachine3_req_rdata_valid = 1'd0;
wire          basesoc_sdram_bankmachine3_req_ready;
wire          basesoc_sdram_bankmachine3_req_valid;
reg           basesoc_sdram_bankmachine3_req_wdata_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_req_we;
reg    [10:0] basesoc_sdram_bankmachine3_row = 11'd0;
reg           basesoc_sdram_bankmachine3_row_close = 1'd0;
reg           basesoc_sdram_bankmachine3_row_col_n_addr_sel = 1'd0;
wire          basesoc_sdram_bankmachine3_row_hit;
reg           basesoc_sdram_bankmachine3_row_open = 1'd0;
reg           basesoc_sdram_bankmachine3_row_opened = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_first = 1'd0;
reg           basesoc_sdram_bankmachine3_sink_last = 1'd0;
wire   [18:0] basesoc_sdram_bankmachine3_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_first;
wire          basesoc_sdram_bankmachine3_sink_sink_last;
wire   [18:0] basesoc_sdram_bankmachine3_sink_sink_payload_addr;
wire          basesoc_sdram_bankmachine3_sink_sink_payload_we;
wire          basesoc_sdram_bankmachine3_sink_sink_ready;
wire          basesoc_sdram_bankmachine3_sink_sink_valid;
wire          basesoc_sdram_bankmachine3_sink_valid;
wire          basesoc_sdram_bankmachine3_source_first;
wire          basesoc_sdram_bankmachine3_source_last;
wire   [18:0] basesoc_sdram_bankmachine3_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_first;
wire          basesoc_sdram_bankmachine3_source_source_last;
wire   [18:0] basesoc_sdram_bankmachine3_source_source_payload_addr;
wire          basesoc_sdram_bankmachine3_source_source_payload_we;
wire          basesoc_sdram_bankmachine3_source_source_ready;
wire          basesoc_sdram_bankmachine3_source_source_valid;
wire          basesoc_sdram_bankmachine3_source_valid;
wire   [21:0] basesoc_sdram_bankmachine3_syncfifo3_din;
wire   [21:0] basesoc_sdram_bankmachine3_syncfifo3_dout;
wire          basesoc_sdram_bankmachine3_syncfifo3_re;
wire          basesoc_sdram_bankmachine3_syncfifo3_readable;
wire          basesoc_sdram_bankmachine3_syncfifo3_we;
wire          basesoc_sdram_bankmachine3_syncfifo3_writable;
reg           basesoc_sdram_bankmachine3_trascon_count = 1'd0;
reg           basesoc_sdram_bankmachine3_trascon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trascon_valid;
reg     [1:0] basesoc_sdram_bankmachine3_trccon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_trccon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_trccon_valid;
reg     [1:0] basesoc_sdram_bankmachine3_twtpcon_count = 2'd0;
reg           basesoc_sdram_bankmachine3_twtpcon_ready = 1'd0;
wire          basesoc_sdram_bankmachine3_twtpcon_valid;
reg     [2:0] basesoc_sdram_bankmachine3_wrport_adr = 3'd0;
wire   [21:0] basesoc_sdram_bankmachine3_wrport_dat_r;
wire   [21:0] basesoc_sdram_bankmachine3_wrport_dat_w;
wire          basesoc_sdram_bankmachine3_wrport_we;
wire          basesoc_sdram_cas_allowed;
wire          basesoc_sdram_choose_cmd_ce;
wire   [10:0] basesoc_sdram_choose_cmd_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_cmd_cmd_payload_ba;
reg           basesoc_sdram_choose_cmd_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_read;
wire          basesoc_sdram_choose_cmd_cmd_payload_is_write;
reg           basesoc_sdram_choose_cmd_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_cmd_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_cmd_cmd_valid;
reg     [1:0] basesoc_sdram_choose_cmd_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_cmd_request;
reg     [3:0] basesoc_sdram_choose_cmd_valids = 4'd0;
reg           basesoc_sdram_choose_cmd_want_activates = 1'd0;
reg           basesoc_sdram_choose_cmd_want_cmds = 1'd0;
reg           basesoc_sdram_choose_cmd_want_reads = 1'd0;
reg           basesoc_sdram_choose_cmd_want_writes = 1'd0;
wire          basesoc_sdram_choose_req_ce;
wire   [10:0] basesoc_sdram_choose_req_cmd_payload_a;
wire    [1:0] basesoc_sdram_choose_req_cmd_payload_ba;
reg           basesoc_sdram_choose_req_cmd_payload_cas = 1'd0;
wire          basesoc_sdram_choose_req_cmd_payload_is_cmd;
wire          basesoc_sdram_choose_req_cmd_payload_is_read;
wire          basesoc_sdram_choose_req_cmd_payload_is_write;
reg           basesoc_sdram_choose_req_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_choose_req_cmd_payload_we = 1'd0;
reg           basesoc_sdram_choose_req_cmd_ready = 1'd0;
wire          basesoc_sdram_choose_req_cmd_valid;
reg     [1:0] basesoc_sdram_choose_req_grant = 2'd0;
wire    [3:0] basesoc_sdram_choose_req_request;
reg     [3:0] basesoc_sdram_choose_req_valids = 4'd0;
reg           basesoc_sdram_choose_req_want_activates = 1'd0;
wire          basesoc_sdram_choose_req_want_cmds;
reg           basesoc_sdram_choose_req_want_reads = 1'd0;
reg           basesoc_sdram_choose_req_want_writes = 1'd0;
wire          basesoc_sdram_cke;
reg           basesoc_sdram_cmd_last = 1'd0;
reg    [10:0] basesoc_sdram_cmd_payload_a = 11'd0;
reg     [1:0] basesoc_sdram_cmd_payload_ba = 2'd0;
reg           basesoc_sdram_cmd_payload_cas = 1'd0;
reg           basesoc_sdram_cmd_payload_is_read = 1'd0;
reg           basesoc_sdram_cmd_payload_is_write = 1'd0;
reg           basesoc_sdram_cmd_payload_ras = 1'd0;
reg           basesoc_sdram_cmd_payload_we = 1'd0;
reg           basesoc_sdram_cmd_ready = 1'd0;
reg           basesoc_sdram_cmd_valid = 1'd0;
wire          basesoc_sdram_command_issue_r;
reg           basesoc_sdram_command_issue_re = 1'd0;
reg           basesoc_sdram_command_issue_w = 1'd0;
reg           basesoc_sdram_command_issue_we = 1'd0;
reg           basesoc_sdram_command_re = 1'd0;
reg     [7:0] basesoc_sdram_command_storage = 8'd0;
reg           basesoc_sdram_csr_dfi_p0_act_n = 1'd1;
wire   [10:0] basesoc_sdram_csr_dfi_p0_address;
wire    [1:0] basesoc_sdram_csr_dfi_p0_bank;
reg           basesoc_sdram_csr_dfi_p0_cas_n = 1'd1;
wire          basesoc_sdram_csr_dfi_p0_cke;
reg           basesoc_sdram_csr_dfi_p0_cs_n = 1'd1;
wire          basesoc_sdram_csr_dfi_p0_odt;
reg           basesoc_sdram_csr_dfi_p0_ras_n = 1'd1;
reg    [31:0] basesoc_sdram_csr_dfi_p0_rddata = 32'd0;
wire          basesoc_sdram_csr_dfi_p0_rddata_en;
reg           basesoc_sdram_csr_dfi_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_csr_dfi_p0_reset_n;
reg           basesoc_sdram_csr_dfi_p0_we_n = 1'd1;
wire   [31:0] basesoc_sdram_csr_dfi_p0_wrdata;
wire          basesoc_sdram_csr_dfi_p0_wrdata_en;
wire    [3:0] basesoc_sdram_csr_dfi_p0_wrdata_mask;
wire          basesoc_sdram_csrfield_cas;
wire          basesoc_sdram_csrfield_cs;
wire          basesoc_sdram_csrfield_cs_bottom;
wire          basesoc_sdram_csrfield_cs_top;
wire          basesoc_sdram_csrfield_ras;
wire          basesoc_sdram_csrfield_rden;
wire          basesoc_sdram_csrfield_we;
wire          basesoc_sdram_csrfield_wren;
reg           basesoc_sdram_dfi_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_dfi_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_dfi_p0_cas_n = 1'd1;
wire          basesoc_sdram_dfi_p0_cke;
reg           basesoc_sdram_dfi_p0_cs_n = 1'd1;
wire          basesoc_sdram_dfi_p0_odt;
reg           basesoc_sdram_dfi_p0_ras_n = 1'd1;
wire   [31:0] basesoc_sdram_dfi_p0_rddata;
reg           basesoc_sdram_dfi_p0_rddata_en = 1'd0;
wire          basesoc_sdram_dfi_p0_rddata_valid;
wire          basesoc_sdram_dfi_p0_reset_n;
reg           basesoc_sdram_dfi_p0_we_n = 1'd1;
wire   [31:0] basesoc_sdram_dfi_p0_wrdata;
reg           basesoc_sdram_dfi_p0_wrdata_en = 1'd0;
wire    [3:0] basesoc_sdram_dfi_p0_wrdata_mask;
reg           basesoc_sdram_en0 = 1'd0;
reg           basesoc_sdram_en1 = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_ext_dfi_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_ext_dfi_p0_bank = 2'd0;
reg           basesoc_sdram_ext_dfi_p0_cas_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_cke = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_cs_n = 1'd1;
reg           basesoc_sdram_ext_dfi_p0_odt = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_ras_n = 1'd1;
reg    [31:0] basesoc_sdram_ext_dfi_p0_rddata = 32'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_en = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_rddata_valid = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_reset_n = 1'd0;
reg           basesoc_sdram_ext_dfi_p0_we_n = 1'd1;
reg    [31:0] basesoc_sdram_ext_dfi_p0_wrdata = 32'd0;
reg           basesoc_sdram_ext_dfi_p0_wrdata_en = 1'd0;
reg     [3:0] basesoc_sdram_ext_dfi_p0_wrdata_mask = 4'd0;
reg           basesoc_sdram_ext_dfi_sel = 1'd0;
wire          basesoc_sdram_go_to_refresh;
wire   [18:0] basesoc_sdram_interface_bank0_addr;
wire          basesoc_sdram_interface_bank0_lock;
wire          basesoc_sdram_interface_bank0_rdata_valid;
wire          basesoc_sdram_interface_bank0_ready;
wire          basesoc_sdram_interface_bank0_valid;
wire          basesoc_sdram_interface_bank0_wdata_ready;
wire          basesoc_sdram_interface_bank0_we;
wire   [18:0] basesoc_sdram_interface_bank1_addr;
wire          basesoc_sdram_interface_bank1_lock;
wire          basesoc_sdram_interface_bank1_rdata_valid;
wire          basesoc_sdram_interface_bank1_ready;
wire          basesoc_sdram_interface_bank1_valid;
wire          basesoc_sdram_interface_bank1_wdata_ready;
wire          basesoc_sdram_interface_bank1_we;
wire   [18:0] basesoc_sdram_interface_bank2_addr;
wire          basesoc_sdram_interface_bank2_lock;
wire          basesoc_sdram_interface_bank2_rdata_valid;
wire          basesoc_sdram_interface_bank2_ready;
wire          basesoc_sdram_interface_bank2_valid;
wire          basesoc_sdram_interface_bank2_wdata_ready;
wire          basesoc_sdram_interface_bank2_we;
wire   [18:0] basesoc_sdram_interface_bank3_addr;
wire          basesoc_sdram_interface_bank3_lock;
wire          basesoc_sdram_interface_bank3_rdata_valid;
wire          basesoc_sdram_interface_bank3_ready;
wire          basesoc_sdram_interface_bank3_valid;
wire          basesoc_sdram_interface_bank3_wdata_ready;
wire          basesoc_sdram_interface_bank3_we;
wire   [31:0] basesoc_sdram_interface_rdata;
reg    [31:0] basesoc_sdram_interface_wdata = 32'd0;
reg     [3:0] basesoc_sdram_interface_wdata_we = 4'd0;
reg           basesoc_sdram_master_p0_act_n = 1'd1;
reg    [10:0] basesoc_sdram_master_p0_address = 11'd0;
reg     [1:0] basesoc_sdram_master_p0_bank = 2'd0;
reg           basesoc_sdram_master_p0_cas_n = 1'd1;
reg           basesoc_sdram_master_p0_cke = 1'd0;
reg           basesoc_sdram_master_p0_cs_n = 1'd1;
reg           basesoc_sdram_master_p0_odt = 1'd0;
reg           basesoc_sdram_master_p0_ras_n = 1'd1;
wire   [31:0] basesoc_sdram_master_p0_rddata;
reg           basesoc_sdram_master_p0_rddata_en = 1'd0;
wire          basesoc_sdram_master_p0_rddata_valid;
reg           basesoc_sdram_master_p0_reset_n = 1'd0;
reg           basesoc_sdram_master_p0_we_n = 1'd1;
reg    [31:0] basesoc_sdram_master_p0_wrdata = 32'd0;
reg           basesoc_sdram_master_p0_wrdata_en = 1'd0;
reg     [3:0] basesoc_sdram_master_p0_wrdata_mask = 4'd0;
wire          basesoc_sdram_max_time0;
wire          basesoc_sdram_max_time1;
reg    [10:0] basesoc_sdram_nop_a = 11'd0;
reg     [1:0] basesoc_sdram_nop_ba = 2'd0;
wire          basesoc_sdram_odt;
reg           basesoc_sdram_postponer_count = 1'd0;
wire          basesoc_sdram_postponer_req_i;
reg           basesoc_sdram_postponer_req_o = 1'd0;
wire          basesoc_sdram_ras_allowed;
reg           basesoc_sdram_rddata_re = 1'd0;
reg    [31:0] basesoc_sdram_rddata_status = 32'd0;
wire          basesoc_sdram_rddata_we;
reg           basesoc_sdram_re = 1'd0;
wire          basesoc_sdram_read_available;
wire          basesoc_sdram_reset_n;
wire          basesoc_sdram_sel;
reg           basesoc_sdram_sequencer_count = 1'd0;
reg     [2:0] basesoc_sdram_sequencer_counter = 3'd0;
wire          basesoc_sdram_sequencer_done0;
reg           basesoc_sdram_sequencer_done1 = 1'd0;
reg           basesoc_sdram_sequencer_start0 = 1'd0;
wire          basesoc_sdram_sequencer_start1;
wire          basesoc_sdram_slave_p0_act_n;
wire   [10:0] basesoc_sdram_slave_p0_address;
wire    [1:0] basesoc_sdram_slave_p0_bank;
wire          basesoc_sdram_slave_p0_cas_n;
wire          basesoc_sdram_slave_p0_cke;
wire          basesoc_sdram_slave_p0_cs_n;
wire          basesoc_sdram_slave_p0_odt;
wire          basesoc_sdram_slave_p0_ras_n;
reg    [31:0] basesoc_sdram_slave_p0_rddata = 32'd0;
wire          basesoc_sdram_slave_p0_rddata_en;
reg           basesoc_sdram_slave_p0_rddata_valid = 1'd0;
wire          basesoc_sdram_slave_p0_reset_n;
wire          basesoc_sdram_slave_p0_we_n;
wire   [31:0] basesoc_sdram_slave_p0_wrdata;
wire          basesoc_sdram_slave_p0_wrdata_en;
wire    [3:0] basesoc_sdram_slave_p0_wrdata_mask;
reg           basesoc_sdram_steerer0 = 1'd1;
reg           basesoc_sdram_steerer1 = 1'd1;
reg     [1:0] basesoc_sdram_steerer_sel = 2'd0;
reg     [3:0] basesoc_sdram_storage = 4'd1;
reg           basesoc_sdram_tccdcon_count = 1'd0;
reg           basesoc_sdram_tccdcon_ready = 1'd0;
wire          basesoc_sdram_tccdcon_valid;
reg           basesoc_sdram_tfawcon_ready = 1'd1;
wire          basesoc_sdram_tfawcon_valid;
reg     [4:0] basesoc_sdram_time0 = 5'd0;
reg     [3:0] basesoc_sdram_time1 = 4'd0;
wire    [9:0] basesoc_sdram_timer_count0;
reg     [9:0] basesoc_sdram_timer_count1 = 10'd749;
wire          basesoc_sdram_timer_done0;
wire          basesoc_sdram_timer_done1;
wire          basesoc_sdram_timer_wait;
reg           basesoc_sdram_trrdcon_count = 1'd0;
reg           basesoc_sdram_trrdcon_ready = 1'd0;
wire          basesoc_sdram_trrdcon_valid;
reg     [2:0] basesoc_sdram_twtrcon_count = 3'd0;
reg           basesoc_sdram_twtrcon_ready = 1'd0;
wire          basesoc_sdram_twtrcon_valid;
wire          basesoc_sdram_wants_refresh;
reg           basesoc_sdram_wrdata_re = 1'd0;
reg    [31:0] basesoc_sdram_wrdata_storage = 32'd0;
wire          basesoc_sdram_write_available;
reg           basesoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg           basesoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg           basesoc_soc_rst = 1'd0;
reg           basesoc_tag_di_dirty = 1'd0;
wire   [26:0] basesoc_tag_di_tag;
wire          basesoc_tag_do_dirty;
wire   [26:0] basesoc_tag_do_tag;
wire    [2:0] basesoc_tag_port_adr;
wire   [27:0] basesoc_tag_port_dat_r;
wire   [27:0] basesoc_tag_port_dat_w;
reg           basesoc_tag_port_we = 1'd0;
reg           basesoc_timer_en_re = 1'd0;
reg           basesoc_timer_en_storage = 1'd0;
reg           basesoc_timer_enable_re = 1'd0;
reg           basesoc_timer_enable_storage = 1'd0;
wire          basesoc_timer_irq;
reg           basesoc_timer_load_re = 1'd0;
reg    [31:0] basesoc_timer_load_storage = 32'd0;
reg           basesoc_timer_pending_r = 1'd0;
reg           basesoc_timer_pending_re = 1'd0;
wire          basesoc_timer_pending_status;
wire          basesoc_timer_pending_we;
reg           basesoc_timer_reload_re = 1'd0;
reg    [31:0] basesoc_timer_reload_storage = 32'd0;
reg           basesoc_timer_status_re = 1'd0;
wire          basesoc_timer_status_status;
wire          basesoc_timer_status_we;
reg           basesoc_timer_update_value_re = 1'd0;
reg           basesoc_timer_update_value_storage = 1'd0;
reg    [31:0] basesoc_timer_value = 32'd0;
reg           basesoc_timer_value_re = 1'd0;
reg    [31:0] basesoc_timer_value_status = 32'd0;
wire          basesoc_timer_value_we;
wire          basesoc_timer_zero0;
wire          basesoc_timer_zero1;
wire          basesoc_timer_zero2;
reg           basesoc_timer_zero_clear = 1'd0;
reg           basesoc_timer_zero_pending = 1'd0;
wire          basesoc_timer_zero_status;
wire          basesoc_timer_zero_trigger;
reg           basesoc_timer_zero_trigger_d = 1'd0;
reg     [3:0] basesoc_tx_count = 4'd0;
reg     [3:0] basesoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg           basesoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] basesoc_tx_data = 8'd0;
reg     [7:0] basesoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg           basesoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           basesoc_tx_enable = 1'd0;
reg    [31:0] basesoc_tx_phase = 32'd0;
wire          basesoc_tx_sink_first;
wire          basesoc_tx_sink_last;
wire    [7:0] basesoc_tx_sink_payload_data;
reg           basesoc_tx_sink_ready = 1'd0;
wire          basesoc_tx_sink_valid;
reg           basesoc_tx_tick = 1'd0;
reg           basesoc_uart_enable_re = 1'd0;
reg     [1:0] basesoc_uart_enable_storage = 2'd0;
wire          basesoc_uart_irq;
reg     [1:0] basesoc_uart_pending_r = 2'd0;
reg           basesoc_uart_pending_re = 1'd0;
reg     [1:0] basesoc_uart_pending_status = 2'd0;
wire          basesoc_uart_pending_we;
wire          basesoc_uart_rx0;
wire          basesoc_uart_rx1;
wire          basesoc_uart_rx2;
reg           basesoc_uart_rx_clear = 1'd0;
reg     [3:0] basesoc_uart_rx_fifo_consume = 4'd0;
wire          basesoc_uart_rx_fifo_do_read;
wire          basesoc_uart_rx_fifo_fifo_in_first;
wire          basesoc_uart_rx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_in_payload_data;
wire          basesoc_uart_rx_fifo_fifo_out_first;
wire          basesoc_uart_rx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_rx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_rx_fifo_level1;
reg     [3:0] basesoc_uart_rx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_rx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_rx_fifo_rdport_dat_r;
wire          basesoc_uart_rx_fifo_rdport_re;
wire          basesoc_uart_rx_fifo_re;
reg           basesoc_uart_rx_fifo_readable = 1'd0;
reg           basesoc_uart_rx_fifo_replace = 1'd0;
wire          basesoc_uart_rx_fifo_sink_first;
wire          basesoc_uart_rx_fifo_sink_last;
wire    [7:0] basesoc_uart_rx_fifo_sink_payload_data;
wire          basesoc_uart_rx_fifo_sink_ready;
wire          basesoc_uart_rx_fifo_sink_valid;
wire          basesoc_uart_rx_fifo_source_first;
wire          basesoc_uart_rx_fifo_source_last;
wire    [7:0] basesoc_uart_rx_fifo_source_payload_data;
wire          basesoc_uart_rx_fifo_source_ready;
wire          basesoc_uart_rx_fifo_source_valid;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_rx_fifo_syncfifo_dout;
wire          basesoc_uart_rx_fifo_syncfifo_re;
wire          basesoc_uart_rx_fifo_syncfifo_readable;
wire          basesoc_uart_rx_fifo_syncfifo_we;
wire          basesoc_uart_rx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_rx_fifo_wrport_dat_w;
wire          basesoc_uart_rx_fifo_wrport_we;
reg           basesoc_uart_rx_pending = 1'd0;
wire          basesoc_uart_rx_status;
wire          basesoc_uart_rx_trigger;
reg           basesoc_uart_rx_trigger_d = 1'd0;
reg           basesoc_uart_rxempty_re = 1'd0;
wire          basesoc_uart_rxempty_status;
wire          basesoc_uart_rxempty_we;
reg           basesoc_uart_rxfull_re = 1'd0;
wire          basesoc_uart_rxfull_status;
wire          basesoc_uart_rxfull_we;
wire    [7:0] basesoc_uart_rxtx_r;
reg           basesoc_uart_rxtx_re = 1'd0;
wire    [7:0] basesoc_uart_rxtx_w;
reg           basesoc_uart_rxtx_we = 1'd0;
reg           basesoc_uart_status_re = 1'd0;
reg     [1:0] basesoc_uart_status_status = 2'd0;
wire          basesoc_uart_status_we;
wire          basesoc_uart_tx0;
wire          basesoc_uart_tx1;
wire          basesoc_uart_tx2;
reg           basesoc_uart_tx_clear = 1'd0;
reg     [3:0] basesoc_uart_tx_fifo_consume = 4'd0;
wire          basesoc_uart_tx_fifo_do_read;
wire          basesoc_uart_tx_fifo_fifo_in_first;
wire          basesoc_uart_tx_fifo_fifo_in_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_in_payload_data;
wire          basesoc_uart_tx_fifo_fifo_out_first;
wire          basesoc_uart_tx_fifo_fifo_out_last;
wire    [7:0] basesoc_uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] basesoc_uart_tx_fifo_level0 = 5'd0;
wire    [4:0] basesoc_uart_tx_fifo_level1;
reg     [3:0] basesoc_uart_tx_fifo_produce = 4'd0;
wire    [3:0] basesoc_uart_tx_fifo_rdport_adr;
wire    [9:0] basesoc_uart_tx_fifo_rdport_dat_r;
wire          basesoc_uart_tx_fifo_rdport_re;
wire          basesoc_uart_tx_fifo_re;
reg           basesoc_uart_tx_fifo_readable = 1'd0;
reg           basesoc_uart_tx_fifo_replace = 1'd0;
reg           basesoc_uart_tx_fifo_sink_first = 1'd0;
reg           basesoc_uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] basesoc_uart_tx_fifo_sink_payload_data;
wire          basesoc_uart_tx_fifo_sink_ready;
wire          basesoc_uart_tx_fifo_sink_valid;
wire          basesoc_uart_tx_fifo_source_first;
wire          basesoc_uart_tx_fifo_source_last;
wire    [7:0] basesoc_uart_tx_fifo_source_payload_data;
wire          basesoc_uart_tx_fifo_source_ready;
wire          basesoc_uart_tx_fifo_source_valid;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_din;
wire    [9:0] basesoc_uart_tx_fifo_syncfifo_dout;
wire          basesoc_uart_tx_fifo_syncfifo_re;
wire          basesoc_uart_tx_fifo_syncfifo_readable;
wire          basesoc_uart_tx_fifo_syncfifo_we;
wire          basesoc_uart_tx_fifo_syncfifo_writable;
reg     [3:0] basesoc_uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_r;
wire    [9:0] basesoc_uart_tx_fifo_wrport_dat_w;
wire          basesoc_uart_tx_fifo_wrport_we;
reg           basesoc_uart_tx_pending = 1'd0;
wire          basesoc_uart_tx_status;
wire          basesoc_uart_tx_trigger;
reg           basesoc_uart_tx_trigger_d = 1'd0;
reg           basesoc_uart_txempty_re = 1'd0;
wire          basesoc_uart_txempty_status;
wire          basesoc_uart_txempty_we;
reg           basesoc_uart_txfull_re = 1'd0;
wire          basesoc_uart_txfull_status;
wire          basesoc_uart_txfull_we;
wire          basesoc_uart_uart_sink_first;
wire          basesoc_uart_uart_sink_last;
wire    [7:0] basesoc_uart_uart_sink_payload_data;
wire          basesoc_uart_uart_sink_ready;
wire          basesoc_uart_uart_sink_valid;
wire          basesoc_uart_uart_source_first;
wire          basesoc_uart_uart_source_last;
wire    [7:0] basesoc_uart_uart_source_payload_data;
wire          basesoc_uart_uart_source_ready;
wire          basesoc_uart_uart_source_valid;
reg    [31:0] basesoc_vexriscv = 32'd0;
reg           basesoc_wb_sdram_ack = 1'd0;
wire   [29:0] basesoc_wb_sdram_adr;
wire    [1:0] basesoc_wb_sdram_bte;
wire    [2:0] basesoc_wb_sdram_cti;
wire          basesoc_wb_sdram_cyc;
reg    [31:0] basesoc_wb_sdram_dat_r = 32'd0;
wire   [31:0] basesoc_wb_sdram_dat_w;
reg           basesoc_wb_sdram_err = 1'd0;
wire    [3:0] basesoc_wb_sdram_sel;
wire          basesoc_wb_sdram_stb;
wire          basesoc_wb_sdram_we;
reg           basesoc_wishbone_bridge_aborted = 1'd0;
reg           basesoc_wishbone_bridge_aborted_fsm_next_value = 1'd0;
reg           basesoc_wishbone_bridge_aborted_fsm_next_value_ce = 1'd0;
reg    [18:0] basesoc_wishbone_bridge_cmd_addr = 19'd0;
reg    [18:0] basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 = 19'd0;
reg           basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 = 1'd0;
reg     [1:0] basesoc_wishbone_bridge_cmd_count = 2'd0;
reg     [1:0] basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 = 2'd0;
reg           basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 = 1'd0;
wire          basesoc_wishbone_bridge_cmd_last;
wire   [18:0] basesoc_wishbone_bridge_cmd_payload_addr;
wire          basesoc_wishbone_bridge_cmd_payload_we;
reg           basesoc_wishbone_bridge_cmd_ready = 1'd0;
reg           basesoc_wishbone_bridge_cmd_valid = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 = 1'd0;
reg           basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 = 1'd0;
wire          basesoc_wishbone_bridge_flush;
reg           basesoc_wishbone_bridge_is_ongoing = 1'd0;
reg     [1:0] basesoc_wishbone_bridge_rdata_converter_converter_demux = 2'd0;
wire          basesoc_wishbone_bridge_rdata_converter_converter_load_part;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_first;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_last;
wire   [31:0] basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_ready;
wire          basesoc_wishbone_bridge_rdata_converter_converter_sink_valid;
reg           basesoc_wishbone_bridge_rdata_converter_converter_source_first = 1'd0;
reg           basesoc_wishbone_bridge_rdata_converter_converter_source_last = 1'd0;
reg   [127:0] basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data = 128'd0;
reg     [2:0] basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count = 3'd0;
wire          basesoc_wishbone_bridge_rdata_converter_converter_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_converter_source_valid;
reg           basesoc_wishbone_bridge_rdata_converter_converter_strobe_all = 1'd0;
wire          basesoc_wishbone_bridge_rdata_converter_sink_first;
wire          basesoc_wishbone_bridge_rdata_converter_sink_last;
wire   [31:0] basesoc_wishbone_bridge_rdata_converter_sink_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_sink_ready;
wire          basesoc_wishbone_bridge_rdata_converter_sink_valid;
wire          basesoc_wishbone_bridge_rdata_converter_source_first;
wire          basesoc_wishbone_bridge_rdata_converter_source_last;
reg   [127:0] basesoc_wishbone_bridge_rdata_converter_source_payload_data = 128'd0;
wire          basesoc_wishbone_bridge_rdata_converter_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_first;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_last;
wire  [127:0] basesoc_wishbone_bridge_rdata_converter_source_source_payload_data;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_ready;
wire          basesoc_wishbone_bridge_rdata_converter_source_source_valid;
wire          basesoc_wishbone_bridge_rdata_converter_source_valid;
wire          basesoc_wishbone_bridge_rdata_first;
wire          basesoc_wishbone_bridge_rdata_last;
wire  [127:0] basesoc_wishbone_bridge_rdata_payload_data;
wire          basesoc_wishbone_bridge_rdata_ready;
wire          basesoc_wishbone_bridge_rdata_valid;
wire          basesoc_wishbone_bridge_wdata_converter_converter_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_last;
reg     [1:0] basesoc_wishbone_bridge_wdata_converter_converter_mux = 2'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_last;
reg   [143:0] basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data = 144'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_ready;
wire          basesoc_wishbone_bridge_wdata_converter_converter_sink_valid;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_last;
reg    [35:0] basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data = 36'd0;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_converter_source_valid;
wire          basesoc_wishbone_bridge_wdata_converter_sink_first;
wire          basesoc_wishbone_bridge_wdata_converter_sink_last;
wire  [127:0] basesoc_wishbone_bridge_wdata_converter_sink_payload_data;
wire   [15:0] basesoc_wishbone_bridge_wdata_converter_sink_payload_we;
wire          basesoc_wishbone_bridge_wdata_converter_sink_ready;
wire          basesoc_wishbone_bridge_wdata_converter_sink_valid;
wire          basesoc_wishbone_bridge_wdata_converter_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_source_last;
wire   [31:0] basesoc_wishbone_bridge_wdata_converter_source_payload_data;
wire    [3:0] basesoc_wishbone_bridge_wdata_converter_source_payload_we;
wire          basesoc_wishbone_bridge_wdata_converter_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_first;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_last;
wire   [35:0] basesoc_wishbone_bridge_wdata_converter_source_source_payload_data;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_ready;
wire          basesoc_wishbone_bridge_wdata_converter_source_source_valid;
wire          basesoc_wishbone_bridge_wdata_converter_source_valid;
reg           basesoc_wishbone_bridge_wdata_first = 1'd0;
reg           basesoc_wishbone_bridge_wdata_last = 1'd0;
wire  [127:0] basesoc_wishbone_bridge_wdata_payload_data;
wire   [15:0] basesoc_wishbone_bridge_wdata_payload_we;
wire          basesoc_wishbone_bridge_wdata_ready;
reg           basesoc_wishbone_bridge_wdata_valid = 1'd0;
reg           basesoc_word_clr = 1'd0;
reg           basesoc_word_inc = 1'd0;
reg           basesoc_write_from_slave = 1'd0;
reg           buttons_re = 1'd0;
wire    [1:0] buttons_status;
wire          buttons_we;
reg    [19:0] count = 20'd1000000;
wire          crg_clkin;
wire          crg_clkout;
wire          crg_locked;
reg    [15:0] crg_por_count = 16'd65535;
wire          crg_por_done;
wire          crg_reset;
reg           crg_rst = 1'd0;
wire    [5:0] csr_bankarray_adr;
wire    [1:0] csr_bankarray_csrbank0_in_r;
reg           csr_bankarray_csrbank0_in_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_in_w;
reg           csr_bankarray_csrbank0_in_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire   [31:0] csr_bankarray_csrbank1_bus_errors_r;
reg           csr_bankarray_csrbank1_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_bus_errors_w;
reg           csr_bankarray_csrbank1_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_reset0_r;
reg           csr_bankarray_csrbank1_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank1_reset0_w;
reg           csr_bankarray_csrbank1_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_scratch0_r;
reg           csr_bankarray_csrbank1_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_scratch0_w;
reg           csr_bankarray_csrbank1_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire    [5:0] csr_bankarray_csrbank2_out0_r;
reg           csr_bankarray_csrbank2_out0_re = 1'd0;
wire    [5:0] csr_bankarray_csrbank2_out0_w;
reg           csr_bankarray_csrbank2_out0_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire    [3:0] csr_bankarray_csrbank3_dfii_control0_r;
reg           csr_bankarray_csrbank3_dfii_control0_re = 1'd0;
wire    [3:0] csr_bankarray_csrbank3_dfii_control0_w;
reg           csr_bankarray_csrbank3_dfii_control0_we = 1'd0;
wire   [10:0] csr_bankarray_csrbank3_dfii_pi0_address0_r;
reg           csr_bankarray_csrbank3_dfii_pi0_address0_re = 1'd0;
wire   [10:0] csr_bankarray_csrbank3_dfii_pi0_address0_w;
reg           csr_bankarray_csrbank3_dfii_pi0_address0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_dfii_pi0_baddress0_r;
reg           csr_bankarray_csrbank3_dfii_pi0_baddress0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank3_dfii_pi0_baddress0_w;
reg           csr_bankarray_csrbank3_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] csr_bankarray_csrbank3_dfii_pi0_command0_r;
reg           csr_bankarray_csrbank3_dfii_pi0_command0_re = 1'd0;
wire    [7:0] csr_bankarray_csrbank3_dfii_pi0_command0_w;
reg           csr_bankarray_csrbank3_dfii_pi0_command0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_dfii_pi0_rddata_r;
reg           csr_bankarray_csrbank3_dfii_pi0_rddata_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_dfii_pi0_rddata_w;
reg           csr_bankarray_csrbank3_dfii_pi0_rddata_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_dfii_pi0_wrdata0_r;
reg           csr_bankarray_csrbank3_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank3_dfii_pi0_wrdata0_w;
reg           csr_bankarray_csrbank3_dfii_pi0_wrdata0_we = 1'd0;
wire          csr_bankarray_csrbank3_sel;
wire          csr_bankarray_csrbank4_en0_r;
reg           csr_bankarray_csrbank4_en0_re = 1'd0;
wire          csr_bankarray_csrbank4_en0_w;
reg           csr_bankarray_csrbank4_en0_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_enable0_r;
reg           csr_bankarray_csrbank4_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_enable0_w;
reg           csr_bankarray_csrbank4_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_pending_r;
reg           csr_bankarray_csrbank4_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_pending_w;
reg           csr_bankarray_csrbank4_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank4_ev_status_r;
reg           csr_bankarray_csrbank4_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank4_ev_status_w;
reg           csr_bankarray_csrbank4_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_load0_r;
reg           csr_bankarray_csrbank4_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_load0_w;
reg           csr_bankarray_csrbank4_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_reload0_r;
reg           csr_bankarray_csrbank4_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_reload0_w;
reg           csr_bankarray_csrbank4_reload0_we = 1'd0;
wire          csr_bankarray_csrbank4_sel;
wire          csr_bankarray_csrbank4_update_value0_r;
reg           csr_bankarray_csrbank4_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank4_update_value0_w;
reg           csr_bankarray_csrbank4_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_value_r;
reg           csr_bankarray_csrbank4_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank4_value_w;
reg           csr_bankarray_csrbank4_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_enable0_r;
reg           csr_bankarray_csrbank5_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_enable0_w;
reg           csr_bankarray_csrbank5_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_pending_r;
reg           csr_bankarray_csrbank5_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_pending_w;
reg           csr_bankarray_csrbank5_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_status_r;
reg           csr_bankarray_csrbank5_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank5_ev_status_w;
reg           csr_bankarray_csrbank5_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank5_rxempty_r;
reg           csr_bankarray_csrbank5_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank5_rxempty_w;
reg           csr_bankarray_csrbank5_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank5_rxfull_r;
reg           csr_bankarray_csrbank5_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank5_rxfull_w;
reg           csr_bankarray_csrbank5_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank5_sel;
wire          csr_bankarray_csrbank5_txempty_r;
reg           csr_bankarray_csrbank5_txempty_re = 1'd0;
wire          csr_bankarray_csrbank5_txempty_w;
reg           csr_bankarray_csrbank5_txempty_we = 1'd0;
wire          csr_bankarray_csrbank5_txfull_r;
reg           csr_bankarray_csrbank5_txfull_re = 1'd0;
wire          csr_bankarray_csrbank5_txfull_w;
reg           csr_bankarray_csrbank5_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire   [13:0] csr_bankarray_interface3_bank_bus_adr;
reg    [31:0] csr_bankarray_interface3_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface3_bank_bus_dat_w;
wire          csr_bankarray_interface3_bank_bus_re;
wire          csr_bankarray_interface3_bank_bus_we;
wire   [13:0] csr_bankarray_interface4_bank_bus_adr;
reg    [31:0] csr_bankarray_interface4_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface4_bank_bus_dat_w;
wire          csr_bankarray_interface4_bank_bus_re;
wire          csr_bankarray_interface4_bank_bus_we;
wire   [13:0] csr_bankarray_interface5_bank_bus_adr;
reg    [31:0] csr_bankarray_interface5_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface5_bank_bus_dat_w;
wire          csr_bankarray_interface5_bank_bus_re;
wire          csr_bankarray_interface5_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          dfi_p0_act_n;
wire   [10:0] dfi_p0_address;
wire    [1:0] dfi_p0_bank;
wire          dfi_p0_cas_n;
wire          dfi_p0_cke;
wire          dfi_p0_cs_n;
wire          dfi_p0_odt;
wire          dfi_p0_ras_n;
reg    [31:0] dfi_p0_rddata = 32'd0;
wire          dfi_p0_rddata_en;
reg           dfi_p0_rddata_valid = 1'd0;
wire          dfi_p0_reset_n;
wire          dfi_p0_we_n;
wire   [31:0] dfi_p0_wrdata;
wire          dfi_p0_wrdata_en;
wire    [3:0] dfi_p0_wrdata_mask;
wire          done;
reg           error = 1'd0;
reg     [1:0] fsm_next_state = 2'd0;
reg     [1:0] fsm_state = 2'd0;
reg     [1:0] fullmemorywe_next_state = 2'd0;
reg     [1:0] fullmemorywe_state = 2'd0;
wire          gowinddroutputimpl;
reg           grant = 1'd0;
wire          gw2apll0;
wire          gw2apll1;
wire          gw2apll2;
wire          inferedsdrtristate0__i;
reg           inferedsdrtristate0__o = 1'd0;
reg           inferedsdrtristate0_oe = 1'd0;
wire          inferedsdrtristate10__i;
reg           inferedsdrtristate10__o = 1'd0;
reg           inferedsdrtristate10_oe = 1'd0;
wire          inferedsdrtristate11__i;
reg           inferedsdrtristate11__o = 1'd0;
reg           inferedsdrtristate11_oe = 1'd0;
wire          inferedsdrtristate12__i;
reg           inferedsdrtristate12__o = 1'd0;
reg           inferedsdrtristate12_oe = 1'd0;
wire          inferedsdrtristate13__i;
reg           inferedsdrtristate13__o = 1'd0;
reg           inferedsdrtristate13_oe = 1'd0;
wire          inferedsdrtristate14__i;
reg           inferedsdrtristate14__o = 1'd0;
reg           inferedsdrtristate14_oe = 1'd0;
wire          inferedsdrtristate15__i;
reg           inferedsdrtristate15__o = 1'd0;
reg           inferedsdrtristate15_oe = 1'd0;
wire          inferedsdrtristate16__i;
reg           inferedsdrtristate16__o = 1'd0;
reg           inferedsdrtristate16_oe = 1'd0;
wire          inferedsdrtristate17__i;
reg           inferedsdrtristate17__o = 1'd0;
reg           inferedsdrtristate17_oe = 1'd0;
wire          inferedsdrtristate18__i;
reg           inferedsdrtristate18__o = 1'd0;
reg           inferedsdrtristate18_oe = 1'd0;
wire          inferedsdrtristate19__i;
reg           inferedsdrtristate19__o = 1'd0;
reg           inferedsdrtristate19_oe = 1'd0;
wire          inferedsdrtristate1__i;
reg           inferedsdrtristate1__o = 1'd0;
reg           inferedsdrtristate1_oe = 1'd0;
wire          inferedsdrtristate20__i;
reg           inferedsdrtristate20__o = 1'd0;
reg           inferedsdrtristate20_oe = 1'd0;
wire          inferedsdrtristate21__i;
reg           inferedsdrtristate21__o = 1'd0;
reg           inferedsdrtristate21_oe = 1'd0;
wire          inferedsdrtristate22__i;
reg           inferedsdrtristate22__o = 1'd0;
reg           inferedsdrtristate22_oe = 1'd0;
wire          inferedsdrtristate23__i;
reg           inferedsdrtristate23__o = 1'd0;
reg           inferedsdrtristate23_oe = 1'd0;
wire          inferedsdrtristate24__i;
reg           inferedsdrtristate24__o = 1'd0;
reg           inferedsdrtristate24_oe = 1'd0;
wire          inferedsdrtristate25__i;
reg           inferedsdrtristate25__o = 1'd0;
reg           inferedsdrtristate25_oe = 1'd0;
wire          inferedsdrtristate26__i;
reg           inferedsdrtristate26__o = 1'd0;
reg           inferedsdrtristate26_oe = 1'd0;
wire          inferedsdrtristate27__i;
reg           inferedsdrtristate27__o = 1'd0;
reg           inferedsdrtristate27_oe = 1'd0;
wire          inferedsdrtristate28__i;
reg           inferedsdrtristate28__o = 1'd0;
reg           inferedsdrtristate28_oe = 1'd0;
wire          inferedsdrtristate29__i;
reg           inferedsdrtristate29__o = 1'd0;
reg           inferedsdrtristate29_oe = 1'd0;
wire          inferedsdrtristate2__i;
reg           inferedsdrtristate2__o = 1'd0;
reg           inferedsdrtristate2_oe = 1'd0;
wire          inferedsdrtristate30__i;
reg           inferedsdrtristate30__o = 1'd0;
reg           inferedsdrtristate30_oe = 1'd0;
wire          inferedsdrtristate31__i;
reg           inferedsdrtristate31__o = 1'd0;
reg           inferedsdrtristate31_oe = 1'd0;
wire          inferedsdrtristate3__i;
reg           inferedsdrtristate3__o = 1'd0;
reg           inferedsdrtristate3_oe = 1'd0;
wire          inferedsdrtristate4__i;
reg           inferedsdrtristate4__o = 1'd0;
reg           inferedsdrtristate4_oe = 1'd0;
wire          inferedsdrtristate5__i;
reg           inferedsdrtristate5__o = 1'd0;
reg           inferedsdrtristate5_oe = 1'd0;
wire          inferedsdrtristate6__i;
reg           inferedsdrtristate6__o = 1'd0;
reg           inferedsdrtristate6_oe = 1'd0;
wire          inferedsdrtristate7__i;
reg           inferedsdrtristate7__o = 1'd0;
reg           inferedsdrtristate7_oe = 1'd0;
wire          inferedsdrtristate8__i;
reg           inferedsdrtristate8__o = 1'd0;
reg           inferedsdrtristate8_oe = 1'd0;
wire          inferedsdrtristate9__i;
reg           inferedsdrtristate9__o = 1'd0;
reg           inferedsdrtristate9_oe = 1'd0;
reg           interface0_ack = 1'd0;
wire   [29:0] interface0_adr;
wire    [1:0] interface0_bte;
wire    [2:0] interface0_cti;
wire          interface0_cyc;
reg    [31:0] interface0_dat_r = 32'd0;
wire   [31:0] interface0_dat_w;
reg           interface0_err = 1'd0;
wire    [3:0] interface0_sel;
wire          interface0_stb;
wire          interface0_we;
reg    [13:0] interface1_adr = 14'd0;
reg    [13:0] interface1_adr_next_value1 = 14'd0;
reg           interface1_adr_next_value_ce1 = 1'd0;
wire   [31:0] interface1_dat_r;
reg    [31:0] interface1_dat_w = 32'd0;
reg    [31:0] interface1_dat_w_next_value0 = 32'd0;
reg           interface1_dat_w_next_value_ce0 = 1'd0;
reg           interface1_re = 1'd0;
reg           interface1_re_next_value2 = 1'd0;
reg           interface1_re_next_value_ce2 = 1'd0;
reg           interface1_we = 1'd0;
reg           interface1_we_next_value3 = 1'd0;
reg           interface1_we_next_value_ce3 = 1'd0;
reg     [5:0] leds_chaser = 6'd0;
reg    [21:0] leds_count = 22'd4000000;
wire          leds_done;
reg     [5:0] leds_leds = 6'd0;
reg           leds_mode = 1'd0;
reg           leds_re = 1'd0;
reg     [5:0] leds_storage = 6'd0;
wire          leds_wait;
reg           litedramnativeportconverter_next_state = 1'd0;
reg           litedramnativeportconverter_state = 1'd0;
reg           locked0 = 1'd0;
reg           locked1 = 1'd0;
reg           locked2 = 1'd0;
reg           locked3 = 1'd0;
reg     [2:0] multiplexer_next_state = 3'd0;
reg     [2:0] multiplexer_state = 3'd0;
reg           multiregimpl0_regs0 = 1'd0;
reg           multiregimpl0_regs1 = 1'd0;
reg     [1:0] multiregimpl1_regs0 = 2'd0;
reg     [1:0] multiregimpl1_regs1 = 2'd0;
reg           new_master_rdata_valid0 = 1'd0;
reg           new_master_rdata_valid1 = 1'd0;
reg           new_master_rdata_valid2 = 1'd0;
reg           new_master_rdata_valid3 = 1'd0;
reg           new_master_wdata_ready = 1'd0;
wire          por_clk;
reg           por_rst = 1'd0;
reg     [2:0] rddata_en = 3'd0;
reg     [1:0] refresher_next_state = 2'd0;
reg     [1:0] refresher_state = 2'd0;
wire    [1:0] request;
reg    [29:0] rhs_array_muxed0 = 30'd0;
reg    [31:0] rhs_array_muxed1 = 32'd0;
reg     [1:0] rhs_array_muxed10 = 2'd0;
reg           rhs_array_muxed11 = 1'd0;
reg           rhs_array_muxed12 = 1'd0;
reg           rhs_array_muxed13 = 1'd0;
reg           rhs_array_muxed14 = 1'd0;
reg    [10:0] rhs_array_muxed15 = 11'd0;
reg     [1:0] rhs_array_muxed16 = 2'd0;
reg           rhs_array_muxed17 = 1'd0;
reg           rhs_array_muxed18 = 1'd0;
reg           rhs_array_muxed19 = 1'd0;
reg     [3:0] rhs_array_muxed2 = 4'd0;
reg    [18:0] rhs_array_muxed20 = 19'd0;
reg           rhs_array_muxed21 = 1'd0;
reg           rhs_array_muxed22 = 1'd0;
reg    [18:0] rhs_array_muxed23 = 19'd0;
reg           rhs_array_muxed24 = 1'd0;
reg           rhs_array_muxed25 = 1'd0;
reg    [18:0] rhs_array_muxed26 = 19'd0;
reg           rhs_array_muxed27 = 1'd0;
reg           rhs_array_muxed28 = 1'd0;
reg    [18:0] rhs_array_muxed29 = 19'd0;
reg           rhs_array_muxed3 = 1'd0;
reg           rhs_array_muxed30 = 1'd0;
reg           rhs_array_muxed31 = 1'd0;
reg           rhs_array_muxed4 = 1'd0;
reg           rhs_array_muxed5 = 1'd0;
reg     [2:0] rhs_array_muxed6 = 3'd0;
reg     [1:0] rhs_array_muxed7 = 2'd0;
reg           rhs_array_muxed8 = 1'd0;
reg    [10:0] rhs_array_muxed9 = 11'd0;
wire          roundrobin0_ce;
wire          roundrobin0_grant;
wire          roundrobin0_request;
wire          roundrobin1_ce;
wire          roundrobin1_grant;
wire          roundrobin1_request;
wire          roundrobin2_ce;
wire          roundrobin2_grant;
wire          roundrobin2_request;
wire          roundrobin3_ce;
wire          roundrobin3_grant;
wire          roundrobin3_request;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
wire          rst1;
wire          sdrio_clk;
wire          sdrio_clk_1;
wire          sdrio_clk_10;
wire          sdrio_clk_100;
wire          sdrio_clk_101;
wire          sdrio_clk_102;
wire          sdrio_clk_103;
wire          sdrio_clk_104;
wire          sdrio_clk_105;
wire          sdrio_clk_106;
wire          sdrio_clk_107;
wire          sdrio_clk_108;
wire          sdrio_clk_109;
wire          sdrio_clk_11;
wire          sdrio_clk_110;
wire          sdrio_clk_111;
wire          sdrio_clk_112;
wire          sdrio_clk_113;
wire          sdrio_clk_114;
wire          sdrio_clk_115;
wire          sdrio_clk_116;
wire          sdrio_clk_117;
wire          sdrio_clk_12;
wire          sdrio_clk_13;
wire          sdrio_clk_14;
wire          sdrio_clk_15;
wire          sdrio_clk_16;
wire          sdrio_clk_17;
wire          sdrio_clk_18;
wire          sdrio_clk_19;
wire          sdrio_clk_2;
wire          sdrio_clk_20;
wire          sdrio_clk_21;
wire          sdrio_clk_22;
wire          sdrio_clk_23;
wire          sdrio_clk_24;
wire          sdrio_clk_25;
wire          sdrio_clk_26;
wire          sdrio_clk_27;
wire          sdrio_clk_28;
wire          sdrio_clk_29;
wire          sdrio_clk_3;
wire          sdrio_clk_30;
wire          sdrio_clk_31;
wire          sdrio_clk_32;
wire          sdrio_clk_33;
wire          sdrio_clk_34;
wire          sdrio_clk_35;
wire          sdrio_clk_36;
wire          sdrio_clk_37;
wire          sdrio_clk_38;
wire          sdrio_clk_39;
wire          sdrio_clk_4;
wire          sdrio_clk_40;
wire          sdrio_clk_41;
wire          sdrio_clk_42;
wire          sdrio_clk_43;
wire          sdrio_clk_44;
wire          sdrio_clk_45;
wire          sdrio_clk_46;
wire          sdrio_clk_47;
wire          sdrio_clk_48;
wire          sdrio_clk_49;
wire          sdrio_clk_5;
wire          sdrio_clk_50;
wire          sdrio_clk_51;
wire          sdrio_clk_52;
wire          sdrio_clk_53;
wire          sdrio_clk_54;
wire          sdrio_clk_55;
wire          sdrio_clk_56;
wire          sdrio_clk_57;
wire          sdrio_clk_58;
wire          sdrio_clk_59;
wire          sdrio_clk_6;
wire          sdrio_clk_60;
wire          sdrio_clk_61;
wire          sdrio_clk_62;
wire          sdrio_clk_63;
wire          sdrio_clk_64;
wire          sdrio_clk_65;
wire          sdrio_clk_66;
wire          sdrio_clk_67;
wire          sdrio_clk_68;
wire          sdrio_clk_69;
wire          sdrio_clk_7;
wire          sdrio_clk_70;
wire          sdrio_clk_71;
wire          sdrio_clk_72;
wire          sdrio_clk_73;
wire          sdrio_clk_74;
wire          sdrio_clk_75;
wire          sdrio_clk_76;
wire          sdrio_clk_77;
wire          sdrio_clk_78;
wire          sdrio_clk_79;
wire          sdrio_clk_8;
wire          sdrio_clk_80;
wire          sdrio_clk_81;
wire          sdrio_clk_82;
wire          sdrio_clk_83;
wire          sdrio_clk_84;
wire          sdrio_clk_85;
wire          sdrio_clk_86;
wire          sdrio_clk_87;
wire          sdrio_clk_88;
wire          sdrio_clk_89;
wire          sdrio_clk_9;
wire          sdrio_clk_90;
wire          sdrio_clk_91;
wire          sdrio_clk_92;
wire          sdrio_clk_93;
wire          sdrio_clk_94;
wire          sdrio_clk_95;
wire          sdrio_clk_96;
wire          sdrio_clk_97;
wire          sdrio_clk_98;
wire          sdrio_clk_99;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [3:0] slave_sel = 4'd0;
reg     [3:0] slave_sel_r = 4'd0;
wire          sys_clk;
wire          sys_rst;
reg           t_array_muxed0 = 1'd0;
reg           t_array_muxed1 = 1'd0;
reg           t_array_muxed2 = 1'd0;
reg           t_array_muxed3 = 1'd0;
reg           t_array_muxed4 = 1'd0;
reg           t_array_muxed5 = 1'd0;
wire          wait_1;
reg     [1:0] wishbone2csr_next_state = 2'd0;
reg     [1:0] wishbone2csr_state = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign basesoc_reset = (basesoc_soc_rst | basesoc_cpu_rst);
always @(*) begin
    crg_rst <= 1'd0;
    if (basesoc_soc_rst) begin
        crg_rst <= 1'd1;
    end
end
assign basesoc_bus_error = error;
always @(*) begin
    basesoc_interrupt <= 32'd0;
    basesoc_interrupt[1] <= basesoc_timer_irq;
    basesoc_interrupt[0] <= basesoc_uart_irq;
end
assign por_clk = clk27;
assign crg_por_done = (crg_por_count == 1'd0);
assign crg_reset = (~crg_por_done);
assign crg_clkin = clk27;
assign sys_clk = crg_clkout;
assign shared_adr = rhs_array_muxed0;
assign shared_dat_w = rhs_array_muxed1;
assign shared_sel = rhs_array_muxed2;
assign shared_cyc = rhs_array_muxed3;
assign shared_stb = rhs_array_muxed4;
assign shared_we = rhs_array_muxed5;
assign shared_cti = rhs_array_muxed6;
assign shared_bte = rhs_array_muxed7;
assign basesoc_ibus_dat_r = shared_dat_r;
assign basesoc_dbus_dat_r = shared_dat_r;
assign basesoc_ibus_ack = (shared_ack & (grant == 1'd0));
assign basesoc_dbus_ack = (shared_ack & (grant == 1'd1));
assign basesoc_ibus_err = (shared_err & (grant == 1'd0));
assign basesoc_dbus_err = (shared_err & (grant == 1'd1));
assign request = {basesoc_dbus_cyc, basesoc_ibus_cyc};
always @(*) begin
    slave_sel <= 4'd0;
    slave_sel[0] <= (shared_adr[29:15] == 1'd0);
    slave_sel[1] <= (shared_adr[29:11] == 16'd32768);
    slave_sel[2] <= (shared_adr[29:21] == 8'd128);
    slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign basesoc_basesoc_ram_bus_adr = shared_adr;
assign basesoc_basesoc_ram_bus_dat_w = shared_dat_w;
assign basesoc_basesoc_ram_bus_sel = shared_sel;
assign basesoc_basesoc_ram_bus_stb = shared_stb;
assign basesoc_basesoc_ram_bus_we = shared_we;
assign basesoc_basesoc_ram_bus_cti = shared_cti;
assign basesoc_basesoc_ram_bus_bte = shared_bte;
assign basesoc_ram_bus_ram_bus_adr = shared_adr;
assign basesoc_ram_bus_ram_bus_dat_w = shared_dat_w;
assign basesoc_ram_bus_ram_bus_sel = shared_sel;
assign basesoc_ram_bus_ram_bus_stb = shared_stb;
assign basesoc_ram_bus_ram_bus_we = shared_we;
assign basesoc_ram_bus_ram_bus_cti = shared_cti;
assign basesoc_ram_bus_ram_bus_bte = shared_bte;
assign basesoc_wb_sdram_adr = shared_adr;
assign basesoc_wb_sdram_dat_w = shared_dat_w;
assign basesoc_wb_sdram_sel = shared_sel;
assign basesoc_wb_sdram_stb = shared_stb;
assign basesoc_wb_sdram_we = shared_we;
assign basesoc_wb_sdram_cti = shared_cti;
assign basesoc_wb_sdram_bte = shared_bte;
assign interface0_adr = shared_adr;
assign interface0_dat_w = shared_dat_w;
assign interface0_sel = shared_sel;
assign interface0_stb = shared_stb;
assign interface0_we = shared_we;
assign interface0_cti = shared_cti;
assign interface0_bte = shared_bte;
assign basesoc_basesoc_ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign basesoc_ram_bus_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign basesoc_wb_sdram_cyc = (shared_cyc & slave_sel[2]);
assign interface0_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((basesoc_basesoc_ram_bus_err | basesoc_ram_bus_ram_bus_err) | basesoc_wb_sdram_err) | interface0_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_ack <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= (((basesoc_basesoc_ram_bus_ack | basesoc_ram_bus_ram_bus_ack) | basesoc_wb_sdram_ack) | interface0_ack);
    shared_dat_r <= (((({32{slave_sel_r[0]}} & basesoc_basesoc_ram_bus_dat_r) | ({32{slave_sel_r[1]}} & basesoc_ram_bus_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & basesoc_wb_sdram_dat_r)) | ({32{slave_sel_r[3]}} & interface0_dat_r));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign basesoc_bus_errors_status = basesoc_bus_errors;
assign basesoc_basesoc_adr = basesoc_basesoc_ram_bus_adr[14:0];
assign basesoc_basesoc_ram_bus_dat_r = basesoc_basesoc_dat_r;
always @(*) begin
    basesoc_ram_we <= 4'd0;
    basesoc_ram_we[0] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[0]);
    basesoc_ram_we[1] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[1]);
    basesoc_ram_we[2] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[2]);
    basesoc_ram_we[3] <= (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & basesoc_ram_bus_ram_bus_we) & basesoc_ram_bus_ram_bus_sel[3]);
end
assign basesoc_ram_adr = basesoc_ram_bus_ram_bus_adr[10:0];
assign basesoc_ram_bus_ram_bus_dat_r = basesoc_ram_dat_r;
assign basesoc_ram_dat_w = basesoc_ram_bus_ram_bus_dat_w;
always @(*) begin
    basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
    basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
    basesoc_tx_count_rs232phytx_next_value0 <= 4'd0;
    basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    basesoc_tx_data_rs232phytx_next_value2 <= 8'd0;
    basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    basesoc_tx_enable <= 1'd0;
    basesoc_tx_sink_ready <= 1'd0;
    rs232phytx_next_state <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            basesoc_tx_enable <= 1'd1;
            if (basesoc_tx_tick) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= basesoc_tx_data;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_count_rs232phytx_next_value0 <= (basesoc_tx_count + 1'd1);
                basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= {1'd1, basesoc_tx_data[7:1]};
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((basesoc_tx_count == 4'd9)) begin
                    basesoc_tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_tx_count_rs232phytx_next_value0 <= 1'd0;
            basesoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
            basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
            if (basesoc_tx_sink_valid) begin
                basesoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
                basesoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
                basesoc_tx_data_rs232phytx_next_value2 <= basesoc_tx_sink_payload_data;
                basesoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    basesoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
    basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    basesoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
    basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    basesoc_rx_enable <= 1'd0;
    basesoc_rx_source_payload_data <= 8'd0;
    basesoc_rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            basesoc_rx_enable <= 1'd1;
            if (basesoc_rx_tick) begin
                basesoc_rx_count_rs232phyrx_next_value0 <= (basesoc_rx_count + 1'd1);
                basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                basesoc_rx_data_rs232phyrx_next_value1 <= {basesoc_rx_rx, basesoc_rx_data[7:1]};
                basesoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((basesoc_rx_count == 4'd9)) begin
                    basesoc_rx_source_valid <= (basesoc_rx_rx == 1'd1);
                    basesoc_rx_source_payload_data <= basesoc_rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
            basesoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((basesoc_rx_rx == 1'd0) & (basesoc_rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_uart_uart_sink_valid = basesoc_rx_source_valid;
assign basesoc_rx_source_ready = basesoc_uart_uart_sink_ready;
assign basesoc_uart_uart_sink_first = basesoc_rx_source_first;
assign basesoc_uart_uart_sink_last = basesoc_rx_source_last;
assign basesoc_uart_uart_sink_payload_data = basesoc_rx_source_payload_data;
assign basesoc_tx_sink_valid = basesoc_uart_uart_source_valid;
assign basesoc_uart_uart_source_ready = basesoc_tx_sink_ready;
assign basesoc_tx_sink_first = basesoc_uart_uart_source_first;
assign basesoc_tx_sink_last = basesoc_uart_uart_source_last;
assign basesoc_tx_sink_payload_data = basesoc_uart_uart_source_payload_data;
assign basesoc_uart_tx_fifo_sink_valid = basesoc_uart_rxtx_re;
assign basesoc_uart_tx_fifo_sink_payload_data = basesoc_uart_rxtx_r;
assign basesoc_uart_uart_source_valid = basesoc_uart_tx_fifo_source_valid;
assign basesoc_uart_tx_fifo_source_ready = basesoc_uart_uart_source_ready;
assign basesoc_uart_uart_source_first = basesoc_uart_tx_fifo_source_first;
assign basesoc_uart_uart_source_last = basesoc_uart_tx_fifo_source_last;
assign basesoc_uart_uart_source_payload_data = basesoc_uart_tx_fifo_source_payload_data;
assign basesoc_uart_txfull_status = (~basesoc_uart_tx_fifo_sink_ready);
assign basesoc_uart_txempty_status = (~basesoc_uart_tx_fifo_source_valid);
assign basesoc_uart_tx_trigger = basesoc_uart_tx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_valid = basesoc_uart_uart_sink_valid;
assign basesoc_uart_uart_sink_ready = basesoc_uart_rx_fifo_sink_ready;
assign basesoc_uart_rx_fifo_sink_first = basesoc_uart_uart_sink_first;
assign basesoc_uart_rx_fifo_sink_last = basesoc_uart_uart_sink_last;
assign basesoc_uart_rx_fifo_sink_payload_data = basesoc_uart_uart_sink_payload_data;
assign basesoc_uart_rxtx_w = basesoc_uart_rx_fifo_source_payload_data;
assign basesoc_uart_rx_fifo_source_ready = (basesoc_uart_rx_clear | (1'd0 & basesoc_uart_rxtx_we));
assign basesoc_uart_rxempty_status = (~basesoc_uart_rx_fifo_source_valid);
assign basesoc_uart_rxfull_status = (~basesoc_uart_rx_fifo_sink_ready);
assign basesoc_uart_rx_trigger = basesoc_uart_rx_fifo_source_valid;
assign basesoc_uart_tx0 = basesoc_uart_tx_status;
assign basesoc_uart_tx1 = basesoc_uart_tx_pending;
always @(*) begin
    basesoc_uart_tx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[0])) begin
        basesoc_uart_tx_clear <= 1'd1;
    end
end
assign basesoc_uart_rx0 = basesoc_uart_rx_status;
assign basesoc_uart_rx1 = basesoc_uart_rx_pending;
always @(*) begin
    basesoc_uart_rx_clear <= 1'd0;
    if ((basesoc_uart_pending_re & basesoc_uart_pending_r[1])) begin
        basesoc_uart_rx_clear <= 1'd1;
    end
end
assign basesoc_uart_irq = ((basesoc_uart_pending_status[0] & basesoc_uart_enable_storage[0]) | (basesoc_uart_pending_status[1] & basesoc_uart_enable_storage[1]));
assign basesoc_uart_tx_status = basesoc_uart_tx_trigger;
assign basesoc_uart_rx_status = basesoc_uart_rx_trigger;
assign basesoc_uart_tx_fifo_syncfifo_din = {basesoc_uart_tx_fifo_fifo_in_last, basesoc_uart_tx_fifo_fifo_in_first, basesoc_uart_tx_fifo_fifo_in_payload_data};
assign {basesoc_uart_tx_fifo_fifo_out_last, basesoc_uart_tx_fifo_fifo_out_first, basesoc_uart_tx_fifo_fifo_out_payload_data} = basesoc_uart_tx_fifo_syncfifo_dout;
assign basesoc_uart_tx_fifo_sink_ready = basesoc_uart_tx_fifo_syncfifo_writable;
assign basesoc_uart_tx_fifo_syncfifo_we = basesoc_uart_tx_fifo_sink_valid;
assign basesoc_uart_tx_fifo_fifo_in_first = basesoc_uart_tx_fifo_sink_first;
assign basesoc_uart_tx_fifo_fifo_in_last = basesoc_uart_tx_fifo_sink_last;
assign basesoc_uart_tx_fifo_fifo_in_payload_data = basesoc_uart_tx_fifo_sink_payload_data;
assign basesoc_uart_tx_fifo_source_valid = basesoc_uart_tx_fifo_readable;
assign basesoc_uart_tx_fifo_source_first = basesoc_uart_tx_fifo_fifo_out_first;
assign basesoc_uart_tx_fifo_source_last = basesoc_uart_tx_fifo_fifo_out_last;
assign basesoc_uart_tx_fifo_source_payload_data = basesoc_uart_tx_fifo_fifo_out_payload_data;
assign basesoc_uart_tx_fifo_re = basesoc_uart_tx_fifo_source_ready;
assign basesoc_uart_tx_fifo_syncfifo_re = (basesoc_uart_tx_fifo_syncfifo_readable & ((~basesoc_uart_tx_fifo_readable) | basesoc_uart_tx_fifo_re));
assign basesoc_uart_tx_fifo_level1 = (basesoc_uart_tx_fifo_level0 + basesoc_uart_tx_fifo_readable);
always @(*) begin
    basesoc_uart_tx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_tx_fifo_replace) begin
        basesoc_uart_tx_fifo_wrport_adr <= (basesoc_uart_tx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_tx_fifo_wrport_adr <= basesoc_uart_tx_fifo_produce;
    end
end
assign basesoc_uart_tx_fifo_wrport_dat_w = basesoc_uart_tx_fifo_syncfifo_din;
assign basesoc_uart_tx_fifo_wrport_we = (basesoc_uart_tx_fifo_syncfifo_we & (basesoc_uart_tx_fifo_syncfifo_writable | basesoc_uart_tx_fifo_replace));
assign basesoc_uart_tx_fifo_do_read = (basesoc_uart_tx_fifo_syncfifo_readable & basesoc_uart_tx_fifo_syncfifo_re);
assign basesoc_uart_tx_fifo_rdport_adr = basesoc_uart_tx_fifo_consume;
assign basesoc_uart_tx_fifo_syncfifo_dout = basesoc_uart_tx_fifo_rdport_dat_r;
assign basesoc_uart_tx_fifo_rdport_re = basesoc_uart_tx_fifo_do_read;
assign basesoc_uart_tx_fifo_syncfifo_writable = (basesoc_uart_tx_fifo_level0 != 5'd16);
assign basesoc_uart_tx_fifo_syncfifo_readable = (basesoc_uart_tx_fifo_level0 != 1'd0);
assign basesoc_uart_rx_fifo_syncfifo_din = {basesoc_uart_rx_fifo_fifo_in_last, basesoc_uart_rx_fifo_fifo_in_first, basesoc_uart_rx_fifo_fifo_in_payload_data};
assign {basesoc_uart_rx_fifo_fifo_out_last, basesoc_uart_rx_fifo_fifo_out_first, basesoc_uart_rx_fifo_fifo_out_payload_data} = basesoc_uart_rx_fifo_syncfifo_dout;
assign basesoc_uart_rx_fifo_sink_ready = basesoc_uart_rx_fifo_syncfifo_writable;
assign basesoc_uart_rx_fifo_syncfifo_we = basesoc_uart_rx_fifo_sink_valid;
assign basesoc_uart_rx_fifo_fifo_in_first = basesoc_uart_rx_fifo_sink_first;
assign basesoc_uart_rx_fifo_fifo_in_last = basesoc_uart_rx_fifo_sink_last;
assign basesoc_uart_rx_fifo_fifo_in_payload_data = basesoc_uart_rx_fifo_sink_payload_data;
assign basesoc_uart_rx_fifo_source_valid = basesoc_uart_rx_fifo_readable;
assign basesoc_uart_rx_fifo_source_first = basesoc_uart_rx_fifo_fifo_out_first;
assign basesoc_uart_rx_fifo_source_last = basesoc_uart_rx_fifo_fifo_out_last;
assign basesoc_uart_rx_fifo_source_payload_data = basesoc_uart_rx_fifo_fifo_out_payload_data;
assign basesoc_uart_rx_fifo_re = basesoc_uart_rx_fifo_source_ready;
assign basesoc_uart_rx_fifo_syncfifo_re = (basesoc_uart_rx_fifo_syncfifo_readable & ((~basesoc_uart_rx_fifo_readable) | basesoc_uart_rx_fifo_re));
assign basesoc_uart_rx_fifo_level1 = (basesoc_uart_rx_fifo_level0 + basesoc_uart_rx_fifo_readable);
always @(*) begin
    basesoc_uart_rx_fifo_wrport_adr <= 4'd0;
    if (basesoc_uart_rx_fifo_replace) begin
        basesoc_uart_rx_fifo_wrport_adr <= (basesoc_uart_rx_fifo_produce - 1'd1);
    end else begin
        basesoc_uart_rx_fifo_wrport_adr <= basesoc_uart_rx_fifo_produce;
    end
end
assign basesoc_uart_rx_fifo_wrport_dat_w = basesoc_uart_rx_fifo_syncfifo_din;
assign basesoc_uart_rx_fifo_wrport_we = (basesoc_uart_rx_fifo_syncfifo_we & (basesoc_uart_rx_fifo_syncfifo_writable | basesoc_uart_rx_fifo_replace));
assign basesoc_uart_rx_fifo_do_read = (basesoc_uart_rx_fifo_syncfifo_readable & basesoc_uart_rx_fifo_syncfifo_re);
assign basesoc_uart_rx_fifo_rdport_adr = basesoc_uart_rx_fifo_consume;
assign basesoc_uart_rx_fifo_syncfifo_dout = basesoc_uart_rx_fifo_rdport_dat_r;
assign basesoc_uart_rx_fifo_rdport_re = basesoc_uart_rx_fifo_do_read;
assign basesoc_uart_rx_fifo_syncfifo_writable = (basesoc_uart_rx_fifo_level0 != 5'd16);
assign basesoc_uart_rx_fifo_syncfifo_readable = (basesoc_uart_rx_fifo_level0 != 1'd0);
assign basesoc_timer_zero_trigger = (basesoc_timer_value == 1'd0);
assign basesoc_timer_zero0 = basesoc_timer_zero_status;
assign basesoc_timer_zero1 = basesoc_timer_zero_pending;
always @(*) begin
    basesoc_timer_zero_clear <= 1'd0;
    if ((basesoc_timer_pending_re & basesoc_timer_pending_r)) begin
        basesoc_timer_zero_clear <= 1'd1;
    end
end
assign basesoc_timer_irq = (basesoc_timer_pending_status & basesoc_timer_enable_storage);
assign basesoc_timer_zero_status = basesoc_timer_zero_trigger;
assign dfi_p0_address = basesoc_sdram_master_p0_address;
assign dfi_p0_bank = basesoc_sdram_master_p0_bank;
assign dfi_p0_cas_n = basesoc_sdram_master_p0_cas_n;
assign dfi_p0_cs_n = basesoc_sdram_master_p0_cs_n;
assign dfi_p0_ras_n = basesoc_sdram_master_p0_ras_n;
assign dfi_p0_we_n = basesoc_sdram_master_p0_we_n;
assign dfi_p0_cke = basesoc_sdram_master_p0_cke;
assign dfi_p0_odt = basesoc_sdram_master_p0_odt;
assign dfi_p0_reset_n = basesoc_sdram_master_p0_reset_n;
assign dfi_p0_act_n = basesoc_sdram_master_p0_act_n;
assign dfi_p0_wrdata = basesoc_sdram_master_p0_wrdata;
assign dfi_p0_wrdata_en = basesoc_sdram_master_p0_wrdata_en;
assign dfi_p0_wrdata_mask = basesoc_sdram_master_p0_wrdata_mask;
assign dfi_p0_rddata_en = basesoc_sdram_master_p0_rddata_en;
assign basesoc_sdram_master_p0_rddata = dfi_p0_rddata;
assign basesoc_sdram_master_p0_rddata_valid = dfi_p0_rddata_valid;
assign basesoc_sdram_slave_p0_address = basesoc_sdram_dfi_p0_address;
assign basesoc_sdram_slave_p0_bank = basesoc_sdram_dfi_p0_bank;
assign basesoc_sdram_slave_p0_cas_n = basesoc_sdram_dfi_p0_cas_n;
assign basesoc_sdram_slave_p0_cs_n = basesoc_sdram_dfi_p0_cs_n;
assign basesoc_sdram_slave_p0_ras_n = basesoc_sdram_dfi_p0_ras_n;
assign basesoc_sdram_slave_p0_we_n = basesoc_sdram_dfi_p0_we_n;
assign basesoc_sdram_slave_p0_cke = basesoc_sdram_dfi_p0_cke;
assign basesoc_sdram_slave_p0_odt = basesoc_sdram_dfi_p0_odt;
assign basesoc_sdram_slave_p0_reset_n = basesoc_sdram_dfi_p0_reset_n;
assign basesoc_sdram_slave_p0_act_n = basesoc_sdram_dfi_p0_act_n;
assign basesoc_sdram_slave_p0_wrdata = basesoc_sdram_dfi_p0_wrdata;
assign basesoc_sdram_slave_p0_wrdata_en = basesoc_sdram_dfi_p0_wrdata_en;
assign basesoc_sdram_slave_p0_wrdata_mask = basesoc_sdram_dfi_p0_wrdata_mask;
assign basesoc_sdram_slave_p0_rddata_en = basesoc_sdram_dfi_p0_rddata_en;
assign basesoc_sdram_dfi_p0_rddata = basesoc_sdram_slave_p0_rddata;
assign basesoc_sdram_dfi_p0_rddata_valid = basesoc_sdram_slave_p0_rddata_valid;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_rddata <= 32'd0;
    basesoc_sdram_csr_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_ext_dfi_p0_rddata <= 32'd0;
    basesoc_sdram_ext_dfi_p0_rddata_valid <= 1'd0;
    basesoc_sdram_master_p0_act_n <= 1'd1;
    basesoc_sdram_master_p0_address <= 11'd0;
    basesoc_sdram_master_p0_bank <= 2'd0;
    basesoc_sdram_master_p0_cas_n <= 1'd1;
    basesoc_sdram_master_p0_cke <= 1'd0;
    basesoc_sdram_master_p0_cs_n <= 1'd1;
    basesoc_sdram_master_p0_odt <= 1'd0;
    basesoc_sdram_master_p0_ras_n <= 1'd1;
    basesoc_sdram_master_p0_rddata_en <= 1'd0;
    basesoc_sdram_master_p0_reset_n <= 1'd0;
    basesoc_sdram_master_p0_we_n <= 1'd1;
    basesoc_sdram_master_p0_wrdata <= 32'd0;
    basesoc_sdram_master_p0_wrdata_en <= 1'd0;
    basesoc_sdram_master_p0_wrdata_mask <= 4'd0;
    basesoc_sdram_slave_p0_rddata <= 32'd0;
    basesoc_sdram_slave_p0_rddata_valid <= 1'd0;
    if (basesoc_sdram_sel) begin
        if (basesoc_sdram_ext_dfi_sel) begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_ext_dfi_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_ext_dfi_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_ext_dfi_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_ext_dfi_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_ext_dfi_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_ext_dfi_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_ext_dfi_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_ext_dfi_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_ext_dfi_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_ext_dfi_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_ext_dfi_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_ext_dfi_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_ext_dfi_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_ext_dfi_p0_rddata_en;
            basesoc_sdram_ext_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_ext_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
        end else begin
            basesoc_sdram_master_p0_address <= basesoc_sdram_slave_p0_address;
            basesoc_sdram_master_p0_bank <= basesoc_sdram_slave_p0_bank;
            basesoc_sdram_master_p0_cas_n <= basesoc_sdram_slave_p0_cas_n;
            basesoc_sdram_master_p0_cs_n <= basesoc_sdram_slave_p0_cs_n;
            basesoc_sdram_master_p0_ras_n <= basesoc_sdram_slave_p0_ras_n;
            basesoc_sdram_master_p0_we_n <= basesoc_sdram_slave_p0_we_n;
            basesoc_sdram_master_p0_cke <= basesoc_sdram_slave_p0_cke;
            basesoc_sdram_master_p0_odt <= basesoc_sdram_slave_p0_odt;
            basesoc_sdram_master_p0_reset_n <= basesoc_sdram_slave_p0_reset_n;
            basesoc_sdram_master_p0_act_n <= basesoc_sdram_slave_p0_act_n;
            basesoc_sdram_master_p0_wrdata <= basesoc_sdram_slave_p0_wrdata;
            basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_slave_p0_wrdata_en;
            basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_slave_p0_wrdata_mask;
            basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_slave_p0_rddata_en;
            basesoc_sdram_slave_p0_rddata <= basesoc_sdram_master_p0_rddata;
            basesoc_sdram_slave_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
            if (1'd0) begin
                basesoc_sdram_master_p0_cs_n <= {2{basesoc_sdram_slave_p0_cs_n}};
            end
        end
    end else begin
        basesoc_sdram_master_p0_address <= basesoc_sdram_csr_dfi_p0_address;
        basesoc_sdram_master_p0_bank <= basesoc_sdram_csr_dfi_p0_bank;
        basesoc_sdram_master_p0_cas_n <= basesoc_sdram_csr_dfi_p0_cas_n;
        basesoc_sdram_master_p0_cs_n <= basesoc_sdram_csr_dfi_p0_cs_n;
        basesoc_sdram_master_p0_ras_n <= basesoc_sdram_csr_dfi_p0_ras_n;
        basesoc_sdram_master_p0_we_n <= basesoc_sdram_csr_dfi_p0_we_n;
        basesoc_sdram_master_p0_cke <= basesoc_sdram_csr_dfi_p0_cke;
        basesoc_sdram_master_p0_odt <= basesoc_sdram_csr_dfi_p0_odt;
        basesoc_sdram_master_p0_reset_n <= basesoc_sdram_csr_dfi_p0_reset_n;
        basesoc_sdram_master_p0_act_n <= basesoc_sdram_csr_dfi_p0_act_n;
        basesoc_sdram_master_p0_wrdata <= basesoc_sdram_csr_dfi_p0_wrdata;
        basesoc_sdram_master_p0_wrdata_en <= basesoc_sdram_csr_dfi_p0_wrdata_en;
        basesoc_sdram_master_p0_wrdata_mask <= basesoc_sdram_csr_dfi_p0_wrdata_mask;
        basesoc_sdram_master_p0_rddata_en <= basesoc_sdram_csr_dfi_p0_rddata_en;
        basesoc_sdram_csr_dfi_p0_rddata <= basesoc_sdram_master_p0_rddata;
        basesoc_sdram_csr_dfi_p0_rddata_valid <= basesoc_sdram_master_p0_rddata_valid;
    end
end
assign basesoc_sdram_csr_dfi_p0_cke = basesoc_sdram_cke;
assign basesoc_sdram_csr_dfi_p0_odt = basesoc_sdram_odt;
assign basesoc_sdram_csr_dfi_p0_reset_n = basesoc_sdram_reset_n;
always @(*) begin
    basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
    if (basesoc_sdram_command_issue_re) begin
        if (basesoc_sdram_csrfield_cs_top) begin
            basesoc_sdram_csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (basesoc_sdram_csrfield_cs_bottom) begin
                basesoc_sdram_csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                basesoc_sdram_csr_dfi_p0_cs_n <= {1{(~basesoc_sdram_csrfield_cs)}};
            end
        end
        basesoc_sdram_csr_dfi_p0_we_n <= (~basesoc_sdram_csrfield_we);
        basesoc_sdram_csr_dfi_p0_cas_n <= (~basesoc_sdram_csrfield_cas);
        basesoc_sdram_csr_dfi_p0_ras_n <= (~basesoc_sdram_csrfield_ras);
    end else begin
        basesoc_sdram_csr_dfi_p0_cs_n <= {1{1'd1}};
        basesoc_sdram_csr_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign basesoc_sdram_csr_dfi_p0_address = basesoc_sdram_address_storage;
assign basesoc_sdram_csr_dfi_p0_bank = basesoc_sdram_baddress_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_en = (basesoc_sdram_command_issue_re & basesoc_sdram_csrfield_wren);
assign basesoc_sdram_csr_dfi_p0_rddata_en = (basesoc_sdram_command_issue_re & basesoc_sdram_csrfield_rden);
assign basesoc_sdram_csr_dfi_p0_wrdata = basesoc_sdram_wrdata_storage;
assign basesoc_sdram_csr_dfi_p0_wrdata_mask = 1'd0;
assign basesoc_sdram_bankmachine0_req_valid = basesoc_sdram_interface_bank0_valid;
assign basesoc_sdram_interface_bank0_ready = basesoc_sdram_bankmachine0_req_ready;
assign basesoc_sdram_bankmachine0_req_we = basesoc_sdram_interface_bank0_we;
assign basesoc_sdram_bankmachine0_req_addr = basesoc_sdram_interface_bank0_addr;
assign basesoc_sdram_interface_bank0_lock = basesoc_sdram_bankmachine0_req_lock;
assign basesoc_sdram_interface_bank0_wdata_ready = basesoc_sdram_bankmachine0_req_wdata_ready;
assign basesoc_sdram_interface_bank0_rdata_valid = basesoc_sdram_bankmachine0_req_rdata_valid;
assign basesoc_sdram_bankmachine1_req_valid = basesoc_sdram_interface_bank1_valid;
assign basesoc_sdram_interface_bank1_ready = basesoc_sdram_bankmachine1_req_ready;
assign basesoc_sdram_bankmachine1_req_we = basesoc_sdram_interface_bank1_we;
assign basesoc_sdram_bankmachine1_req_addr = basesoc_sdram_interface_bank1_addr;
assign basesoc_sdram_interface_bank1_lock = basesoc_sdram_bankmachine1_req_lock;
assign basesoc_sdram_interface_bank1_wdata_ready = basesoc_sdram_bankmachine1_req_wdata_ready;
assign basesoc_sdram_interface_bank1_rdata_valid = basesoc_sdram_bankmachine1_req_rdata_valid;
assign basesoc_sdram_bankmachine2_req_valid = basesoc_sdram_interface_bank2_valid;
assign basesoc_sdram_interface_bank2_ready = basesoc_sdram_bankmachine2_req_ready;
assign basesoc_sdram_bankmachine2_req_we = basesoc_sdram_interface_bank2_we;
assign basesoc_sdram_bankmachine2_req_addr = basesoc_sdram_interface_bank2_addr;
assign basesoc_sdram_interface_bank2_lock = basesoc_sdram_bankmachine2_req_lock;
assign basesoc_sdram_interface_bank2_wdata_ready = basesoc_sdram_bankmachine2_req_wdata_ready;
assign basesoc_sdram_interface_bank2_rdata_valid = basesoc_sdram_bankmachine2_req_rdata_valid;
assign basesoc_sdram_bankmachine3_req_valid = basesoc_sdram_interface_bank3_valid;
assign basesoc_sdram_interface_bank3_ready = basesoc_sdram_bankmachine3_req_ready;
assign basesoc_sdram_bankmachine3_req_we = basesoc_sdram_interface_bank3_we;
assign basesoc_sdram_bankmachine3_req_addr = basesoc_sdram_interface_bank3_addr;
assign basesoc_sdram_interface_bank3_lock = basesoc_sdram_bankmachine3_req_lock;
assign basesoc_sdram_interface_bank3_wdata_ready = basesoc_sdram_bankmachine3_req_wdata_ready;
assign basesoc_sdram_interface_bank3_rdata_valid = basesoc_sdram_bankmachine3_req_rdata_valid;
assign basesoc_sdram_timer_wait = (~basesoc_sdram_timer_done0);
assign basesoc_sdram_postponer_req_i = basesoc_sdram_timer_done0;
assign basesoc_sdram_wants_refresh = basesoc_sdram_postponer_req_o;
assign basesoc_sdram_timer_done1 = (basesoc_sdram_timer_count1 == 1'd0);
assign basesoc_sdram_timer_done0 = basesoc_sdram_timer_done1;
assign basesoc_sdram_timer_count0 = basesoc_sdram_timer_count1;
assign basesoc_sdram_sequencer_start1 = (basesoc_sdram_sequencer_start0 | (basesoc_sdram_sequencer_count != 1'd0));
assign basesoc_sdram_sequencer_done0 = (basesoc_sdram_sequencer_done1 & (basesoc_sdram_sequencer_count == 1'd0));
always @(*) begin
    basesoc_sdram_cmd_last <= 1'd0;
    basesoc_sdram_cmd_valid <= 1'd0;
    basesoc_sdram_sequencer_start0 <= 1'd0;
    refresher_next_state <= 2'd0;
    refresher_next_state <= refresher_state;
    case (refresher_state)
        1'd1: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_cmd_ready) begin
                basesoc_sdram_sequencer_start0 <= 1'd1;
                refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_cmd_valid <= 1'd1;
            if (basesoc_sdram_sequencer_done0) begin
                basesoc_sdram_cmd_valid <= 1'd0;
                basesoc_sdram_cmd_last <= 1'd1;
                refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (basesoc_sdram_wants_refresh) begin
                    refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine0_sink_valid = basesoc_sdram_bankmachine0_req_valid;
assign basesoc_sdram_bankmachine0_req_ready = basesoc_sdram_bankmachine0_sink_ready;
assign basesoc_sdram_bankmachine0_sink_payload_we = basesoc_sdram_bankmachine0_req_we;
assign basesoc_sdram_bankmachine0_sink_payload_addr = basesoc_sdram_bankmachine0_req_addr;
assign basesoc_sdram_bankmachine0_sink_sink_valid = basesoc_sdram_bankmachine0_source_valid;
assign basesoc_sdram_bankmachine0_source_ready = basesoc_sdram_bankmachine0_sink_sink_ready;
assign basesoc_sdram_bankmachine0_sink_sink_first = basesoc_sdram_bankmachine0_source_first;
assign basesoc_sdram_bankmachine0_sink_sink_last = basesoc_sdram_bankmachine0_source_last;
assign basesoc_sdram_bankmachine0_sink_sink_payload_we = basesoc_sdram_bankmachine0_source_payload_we;
assign basesoc_sdram_bankmachine0_sink_sink_payload_addr = basesoc_sdram_bankmachine0_source_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_ready = (basesoc_sdram_bankmachine0_req_wdata_ready | basesoc_sdram_bankmachine0_req_rdata_valid);
assign basesoc_sdram_bankmachine0_req_lock = (basesoc_sdram_bankmachine0_source_valid | basesoc_sdram_bankmachine0_source_source_valid);
assign basesoc_sdram_bankmachine0_row_hit = (basesoc_sdram_bankmachine0_row == basesoc_sdram_bankmachine0_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine0_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= basesoc_sdram_bankmachine0_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine0_cmd_payload_a <= ((basesoc_sdram_bankmachine0_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine0_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine0_twtpcon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_cmd_payload_is_write);
assign basesoc_sdram_bankmachine0_trccon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
assign basesoc_sdram_bankmachine0_trascon_valid = ((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_ready) & basesoc_sdram_bankmachine0_row_open);
always @(*) begin
    basesoc_sdram_bankmachine0_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine0_source_valid & basesoc_sdram_bankmachine0_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine0_source_payload_addr[18:8] != basesoc_sdram_bankmachine0_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine0_auto_precharge <= (basesoc_sdram_bankmachine0_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine0_syncfifo0_din = {basesoc_sdram_bankmachine0_fifo_in_last, basesoc_sdram_bankmachine0_fifo_in_first, basesoc_sdram_bankmachine0_fifo_in_payload_addr, basesoc_sdram_bankmachine0_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine0_fifo_out_last, basesoc_sdram_bankmachine0_fifo_out_first, basesoc_sdram_bankmachine0_fifo_out_payload_addr, basesoc_sdram_bankmachine0_fifo_out_payload_we} = basesoc_sdram_bankmachine0_syncfifo0_dout;
assign basesoc_sdram_bankmachine0_sink_ready = basesoc_sdram_bankmachine0_syncfifo0_writable;
assign basesoc_sdram_bankmachine0_syncfifo0_we = basesoc_sdram_bankmachine0_sink_valid;
assign basesoc_sdram_bankmachine0_fifo_in_first = basesoc_sdram_bankmachine0_sink_first;
assign basesoc_sdram_bankmachine0_fifo_in_last = basesoc_sdram_bankmachine0_sink_last;
assign basesoc_sdram_bankmachine0_fifo_in_payload_we = basesoc_sdram_bankmachine0_sink_payload_we;
assign basesoc_sdram_bankmachine0_fifo_in_payload_addr = basesoc_sdram_bankmachine0_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_valid = basesoc_sdram_bankmachine0_syncfifo0_readable;
assign basesoc_sdram_bankmachine0_source_first = basesoc_sdram_bankmachine0_fifo_out_first;
assign basesoc_sdram_bankmachine0_source_last = basesoc_sdram_bankmachine0_fifo_out_last;
assign basesoc_sdram_bankmachine0_source_payload_we = basesoc_sdram_bankmachine0_fifo_out_payload_we;
assign basesoc_sdram_bankmachine0_source_payload_addr = basesoc_sdram_bankmachine0_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine0_syncfifo0_re = basesoc_sdram_bankmachine0_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine0_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine0_replace) begin
        basesoc_sdram_bankmachine0_wrport_adr <= (basesoc_sdram_bankmachine0_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine0_wrport_adr <= basesoc_sdram_bankmachine0_produce;
    end
end
assign basesoc_sdram_bankmachine0_wrport_dat_w = basesoc_sdram_bankmachine0_syncfifo0_din;
assign basesoc_sdram_bankmachine0_wrport_we = (basesoc_sdram_bankmachine0_syncfifo0_we & (basesoc_sdram_bankmachine0_syncfifo0_writable | basesoc_sdram_bankmachine0_replace));
assign basesoc_sdram_bankmachine0_do_read = (basesoc_sdram_bankmachine0_syncfifo0_readable & basesoc_sdram_bankmachine0_syncfifo0_re);
assign basesoc_sdram_bankmachine0_rdport_adr = basesoc_sdram_bankmachine0_consume;
assign basesoc_sdram_bankmachine0_syncfifo0_dout = basesoc_sdram_bankmachine0_rdport_dat_r;
assign basesoc_sdram_bankmachine0_syncfifo0_writable = (basesoc_sdram_bankmachine0_level != 4'd8);
assign basesoc_sdram_bankmachine0_syncfifo0_readable = (basesoc_sdram_bankmachine0_level != 1'd0);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine0_pipe_valid_sink_valid = basesoc_sdram_bankmachine0_sink_sink_valid;
assign basesoc_sdram_bankmachine0_sink_sink_ready = basesoc_sdram_bankmachine0_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_first = basesoc_sdram_bankmachine0_sink_sink_first;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_last = basesoc_sdram_bankmachine0_sink_sink_last;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine0_sink_sink_payload_we;
assign basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine0_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine0_source_source_valid = basesoc_sdram_bankmachine0_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine0_pipe_valid_source_ready = basesoc_sdram_bankmachine0_source_source_ready;
assign basesoc_sdram_bankmachine0_source_source_first = basesoc_sdram_bankmachine0_pipe_valid_source_first;
assign basesoc_sdram_bankmachine0_source_source_last = basesoc_sdram_bankmachine0_pipe_valid_source_last;
assign basesoc_sdram_bankmachine0_source_source_payload_we = basesoc_sdram_bankmachine0_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine0_source_source_payload_addr = basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine0_next_state <= 3'd0;
    basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine0_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine0_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine0_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine0_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine0_row_close <= 1'd0;
    basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine0_row_open <= 1'd0;
    bankmachine0_next_state <= bankmachine0_state;
    case (bankmachine0_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine0_twtpcon_ready & basesoc_sdram_bankmachine0_trascon_ready)) begin
                bankmachine0_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine0_trccon_ready) begin
                basesoc_sdram_bankmachine0_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine0_row_open <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine0_cmd_ready) begin
                    bankmachine0_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine0_twtpcon_ready) begin
                basesoc_sdram_bankmachine0_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine0_row_close <= 1'd1;
            basesoc_sdram_bankmachine0_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine0_refresh_req)) begin
                bankmachine0_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine0_refresh_req) begin
                bankmachine0_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine0_source_source_valid) begin
                    if (basesoc_sdram_bankmachine0_row_opened) begin
                        if (basesoc_sdram_bankmachine0_row_hit) begin
                            basesoc_sdram_bankmachine0_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine0_source_source_payload_we) begin
                                basesoc_sdram_bankmachine0_req_wdata_ready <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine0_req_rdata_valid <= basesoc_sdram_bankmachine0_cmd_ready;
                                basesoc_sdram_bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine0_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine0_cmd_ready & basesoc_sdram_bankmachine0_auto_precharge)) begin
                                bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine1_sink_valid = basesoc_sdram_bankmachine1_req_valid;
assign basesoc_sdram_bankmachine1_req_ready = basesoc_sdram_bankmachine1_sink_ready;
assign basesoc_sdram_bankmachine1_sink_payload_we = basesoc_sdram_bankmachine1_req_we;
assign basesoc_sdram_bankmachine1_sink_payload_addr = basesoc_sdram_bankmachine1_req_addr;
assign basesoc_sdram_bankmachine1_sink_sink_valid = basesoc_sdram_bankmachine1_source_valid;
assign basesoc_sdram_bankmachine1_source_ready = basesoc_sdram_bankmachine1_sink_sink_ready;
assign basesoc_sdram_bankmachine1_sink_sink_first = basesoc_sdram_bankmachine1_source_first;
assign basesoc_sdram_bankmachine1_sink_sink_last = basesoc_sdram_bankmachine1_source_last;
assign basesoc_sdram_bankmachine1_sink_sink_payload_we = basesoc_sdram_bankmachine1_source_payload_we;
assign basesoc_sdram_bankmachine1_sink_sink_payload_addr = basesoc_sdram_bankmachine1_source_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_ready = (basesoc_sdram_bankmachine1_req_wdata_ready | basesoc_sdram_bankmachine1_req_rdata_valid);
assign basesoc_sdram_bankmachine1_req_lock = (basesoc_sdram_bankmachine1_source_valid | basesoc_sdram_bankmachine1_source_source_valid);
assign basesoc_sdram_bankmachine1_row_hit = (basesoc_sdram_bankmachine1_row == basesoc_sdram_bankmachine1_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine1_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= basesoc_sdram_bankmachine1_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine1_cmd_payload_a <= ((basesoc_sdram_bankmachine1_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine1_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine1_twtpcon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_cmd_payload_is_write);
assign basesoc_sdram_bankmachine1_trccon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
assign basesoc_sdram_bankmachine1_trascon_valid = ((basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_ready) & basesoc_sdram_bankmachine1_row_open);
always @(*) begin
    basesoc_sdram_bankmachine1_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine1_source_valid & basesoc_sdram_bankmachine1_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine1_source_payload_addr[18:8] != basesoc_sdram_bankmachine1_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine1_auto_precharge <= (basesoc_sdram_bankmachine1_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine1_syncfifo1_din = {basesoc_sdram_bankmachine1_fifo_in_last, basesoc_sdram_bankmachine1_fifo_in_first, basesoc_sdram_bankmachine1_fifo_in_payload_addr, basesoc_sdram_bankmachine1_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine1_fifo_out_last, basesoc_sdram_bankmachine1_fifo_out_first, basesoc_sdram_bankmachine1_fifo_out_payload_addr, basesoc_sdram_bankmachine1_fifo_out_payload_we} = basesoc_sdram_bankmachine1_syncfifo1_dout;
assign basesoc_sdram_bankmachine1_sink_ready = basesoc_sdram_bankmachine1_syncfifo1_writable;
assign basesoc_sdram_bankmachine1_syncfifo1_we = basesoc_sdram_bankmachine1_sink_valid;
assign basesoc_sdram_bankmachine1_fifo_in_first = basesoc_sdram_bankmachine1_sink_first;
assign basesoc_sdram_bankmachine1_fifo_in_last = basesoc_sdram_bankmachine1_sink_last;
assign basesoc_sdram_bankmachine1_fifo_in_payload_we = basesoc_sdram_bankmachine1_sink_payload_we;
assign basesoc_sdram_bankmachine1_fifo_in_payload_addr = basesoc_sdram_bankmachine1_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_valid = basesoc_sdram_bankmachine1_syncfifo1_readable;
assign basesoc_sdram_bankmachine1_source_first = basesoc_sdram_bankmachine1_fifo_out_first;
assign basesoc_sdram_bankmachine1_source_last = basesoc_sdram_bankmachine1_fifo_out_last;
assign basesoc_sdram_bankmachine1_source_payload_we = basesoc_sdram_bankmachine1_fifo_out_payload_we;
assign basesoc_sdram_bankmachine1_source_payload_addr = basesoc_sdram_bankmachine1_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine1_syncfifo1_re = basesoc_sdram_bankmachine1_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine1_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine1_replace) begin
        basesoc_sdram_bankmachine1_wrport_adr <= (basesoc_sdram_bankmachine1_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine1_wrport_adr <= basesoc_sdram_bankmachine1_produce;
    end
end
assign basesoc_sdram_bankmachine1_wrport_dat_w = basesoc_sdram_bankmachine1_syncfifo1_din;
assign basesoc_sdram_bankmachine1_wrport_we = (basesoc_sdram_bankmachine1_syncfifo1_we & (basesoc_sdram_bankmachine1_syncfifo1_writable | basesoc_sdram_bankmachine1_replace));
assign basesoc_sdram_bankmachine1_do_read = (basesoc_sdram_bankmachine1_syncfifo1_readable & basesoc_sdram_bankmachine1_syncfifo1_re);
assign basesoc_sdram_bankmachine1_rdport_adr = basesoc_sdram_bankmachine1_consume;
assign basesoc_sdram_bankmachine1_syncfifo1_dout = basesoc_sdram_bankmachine1_rdport_dat_r;
assign basesoc_sdram_bankmachine1_syncfifo1_writable = (basesoc_sdram_bankmachine1_level != 4'd8);
assign basesoc_sdram_bankmachine1_syncfifo1_readable = (basesoc_sdram_bankmachine1_level != 1'd0);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine1_pipe_valid_sink_valid = basesoc_sdram_bankmachine1_sink_sink_valid;
assign basesoc_sdram_bankmachine1_sink_sink_ready = basesoc_sdram_bankmachine1_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_first = basesoc_sdram_bankmachine1_sink_sink_first;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_last = basesoc_sdram_bankmachine1_sink_sink_last;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine1_sink_sink_payload_we;
assign basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine1_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine1_source_source_valid = basesoc_sdram_bankmachine1_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine1_pipe_valid_source_ready = basesoc_sdram_bankmachine1_source_source_ready;
assign basesoc_sdram_bankmachine1_source_source_first = basesoc_sdram_bankmachine1_pipe_valid_source_first;
assign basesoc_sdram_bankmachine1_source_source_last = basesoc_sdram_bankmachine1_pipe_valid_source_last;
assign basesoc_sdram_bankmachine1_source_source_payload_we = basesoc_sdram_bankmachine1_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine1_source_source_payload_addr = basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine1_next_state <= 3'd0;
    basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine1_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine1_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine1_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine1_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine1_row_close <= 1'd0;
    basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine1_row_open <= 1'd0;
    bankmachine1_next_state <= bankmachine1_state;
    case (bankmachine1_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine1_twtpcon_ready & basesoc_sdram_bankmachine1_trascon_ready)) begin
                bankmachine1_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine1_trccon_ready) begin
                basesoc_sdram_bankmachine1_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine1_row_open <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine1_cmd_ready) begin
                    bankmachine1_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine1_twtpcon_ready) begin
                basesoc_sdram_bankmachine1_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine1_row_close <= 1'd1;
            basesoc_sdram_bankmachine1_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine1_refresh_req)) begin
                bankmachine1_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine1_refresh_req) begin
                bankmachine1_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine1_source_source_valid) begin
                    if (basesoc_sdram_bankmachine1_row_opened) begin
                        if (basesoc_sdram_bankmachine1_row_hit) begin
                            basesoc_sdram_bankmachine1_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine1_source_source_payload_we) begin
                                basesoc_sdram_bankmachine1_req_wdata_ready <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine1_req_rdata_valid <= basesoc_sdram_bankmachine1_cmd_ready;
                                basesoc_sdram_bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine1_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine1_cmd_ready & basesoc_sdram_bankmachine1_auto_precharge)) begin
                                bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine2_sink_valid = basesoc_sdram_bankmachine2_req_valid;
assign basesoc_sdram_bankmachine2_req_ready = basesoc_sdram_bankmachine2_sink_ready;
assign basesoc_sdram_bankmachine2_sink_payload_we = basesoc_sdram_bankmachine2_req_we;
assign basesoc_sdram_bankmachine2_sink_payload_addr = basesoc_sdram_bankmachine2_req_addr;
assign basesoc_sdram_bankmachine2_sink_sink_valid = basesoc_sdram_bankmachine2_source_valid;
assign basesoc_sdram_bankmachine2_source_ready = basesoc_sdram_bankmachine2_sink_sink_ready;
assign basesoc_sdram_bankmachine2_sink_sink_first = basesoc_sdram_bankmachine2_source_first;
assign basesoc_sdram_bankmachine2_sink_sink_last = basesoc_sdram_bankmachine2_source_last;
assign basesoc_sdram_bankmachine2_sink_sink_payload_we = basesoc_sdram_bankmachine2_source_payload_we;
assign basesoc_sdram_bankmachine2_sink_sink_payload_addr = basesoc_sdram_bankmachine2_source_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_ready = (basesoc_sdram_bankmachine2_req_wdata_ready | basesoc_sdram_bankmachine2_req_rdata_valid);
assign basesoc_sdram_bankmachine2_req_lock = (basesoc_sdram_bankmachine2_source_valid | basesoc_sdram_bankmachine2_source_source_valid);
assign basesoc_sdram_bankmachine2_row_hit = (basesoc_sdram_bankmachine2_row == basesoc_sdram_bankmachine2_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine2_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= basesoc_sdram_bankmachine2_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine2_cmd_payload_a <= ((basesoc_sdram_bankmachine2_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine2_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine2_twtpcon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_cmd_payload_is_write);
assign basesoc_sdram_bankmachine2_trccon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
assign basesoc_sdram_bankmachine2_trascon_valid = ((basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_ready) & basesoc_sdram_bankmachine2_row_open);
always @(*) begin
    basesoc_sdram_bankmachine2_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine2_source_valid & basesoc_sdram_bankmachine2_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine2_source_payload_addr[18:8] != basesoc_sdram_bankmachine2_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine2_auto_precharge <= (basesoc_sdram_bankmachine2_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine2_syncfifo2_din = {basesoc_sdram_bankmachine2_fifo_in_last, basesoc_sdram_bankmachine2_fifo_in_first, basesoc_sdram_bankmachine2_fifo_in_payload_addr, basesoc_sdram_bankmachine2_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine2_fifo_out_last, basesoc_sdram_bankmachine2_fifo_out_first, basesoc_sdram_bankmachine2_fifo_out_payload_addr, basesoc_sdram_bankmachine2_fifo_out_payload_we} = basesoc_sdram_bankmachine2_syncfifo2_dout;
assign basesoc_sdram_bankmachine2_sink_ready = basesoc_sdram_bankmachine2_syncfifo2_writable;
assign basesoc_sdram_bankmachine2_syncfifo2_we = basesoc_sdram_bankmachine2_sink_valid;
assign basesoc_sdram_bankmachine2_fifo_in_first = basesoc_sdram_bankmachine2_sink_first;
assign basesoc_sdram_bankmachine2_fifo_in_last = basesoc_sdram_bankmachine2_sink_last;
assign basesoc_sdram_bankmachine2_fifo_in_payload_we = basesoc_sdram_bankmachine2_sink_payload_we;
assign basesoc_sdram_bankmachine2_fifo_in_payload_addr = basesoc_sdram_bankmachine2_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_valid = basesoc_sdram_bankmachine2_syncfifo2_readable;
assign basesoc_sdram_bankmachine2_source_first = basesoc_sdram_bankmachine2_fifo_out_first;
assign basesoc_sdram_bankmachine2_source_last = basesoc_sdram_bankmachine2_fifo_out_last;
assign basesoc_sdram_bankmachine2_source_payload_we = basesoc_sdram_bankmachine2_fifo_out_payload_we;
assign basesoc_sdram_bankmachine2_source_payload_addr = basesoc_sdram_bankmachine2_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine2_syncfifo2_re = basesoc_sdram_bankmachine2_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine2_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine2_replace) begin
        basesoc_sdram_bankmachine2_wrport_adr <= (basesoc_sdram_bankmachine2_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine2_wrport_adr <= basesoc_sdram_bankmachine2_produce;
    end
end
assign basesoc_sdram_bankmachine2_wrport_dat_w = basesoc_sdram_bankmachine2_syncfifo2_din;
assign basesoc_sdram_bankmachine2_wrport_we = (basesoc_sdram_bankmachine2_syncfifo2_we & (basesoc_sdram_bankmachine2_syncfifo2_writable | basesoc_sdram_bankmachine2_replace));
assign basesoc_sdram_bankmachine2_do_read = (basesoc_sdram_bankmachine2_syncfifo2_readable & basesoc_sdram_bankmachine2_syncfifo2_re);
assign basesoc_sdram_bankmachine2_rdport_adr = basesoc_sdram_bankmachine2_consume;
assign basesoc_sdram_bankmachine2_syncfifo2_dout = basesoc_sdram_bankmachine2_rdport_dat_r;
assign basesoc_sdram_bankmachine2_syncfifo2_writable = (basesoc_sdram_bankmachine2_level != 4'd8);
assign basesoc_sdram_bankmachine2_syncfifo2_readable = (basesoc_sdram_bankmachine2_level != 1'd0);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine2_pipe_valid_sink_valid = basesoc_sdram_bankmachine2_sink_sink_valid;
assign basesoc_sdram_bankmachine2_sink_sink_ready = basesoc_sdram_bankmachine2_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_first = basesoc_sdram_bankmachine2_sink_sink_first;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_last = basesoc_sdram_bankmachine2_sink_sink_last;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine2_sink_sink_payload_we;
assign basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine2_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine2_source_source_valid = basesoc_sdram_bankmachine2_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine2_pipe_valid_source_ready = basesoc_sdram_bankmachine2_source_source_ready;
assign basesoc_sdram_bankmachine2_source_source_first = basesoc_sdram_bankmachine2_pipe_valid_source_first;
assign basesoc_sdram_bankmachine2_source_source_last = basesoc_sdram_bankmachine2_pipe_valid_source_last;
assign basesoc_sdram_bankmachine2_source_source_payload_we = basesoc_sdram_bankmachine2_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine2_source_source_payload_addr = basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine2_next_state <= 3'd0;
    basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine2_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine2_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine2_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine2_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine2_row_close <= 1'd0;
    basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine2_row_open <= 1'd0;
    bankmachine2_next_state <= bankmachine2_state;
    case (bankmachine2_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine2_twtpcon_ready & basesoc_sdram_bankmachine2_trascon_ready)) begin
                bankmachine2_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine2_trccon_ready) begin
                basesoc_sdram_bankmachine2_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine2_row_open <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine2_cmd_ready) begin
                    bankmachine2_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine2_twtpcon_ready) begin
                basesoc_sdram_bankmachine2_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine2_row_close <= 1'd1;
            basesoc_sdram_bankmachine2_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine2_refresh_req)) begin
                bankmachine2_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine2_refresh_req) begin
                bankmachine2_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine2_source_source_valid) begin
                    if (basesoc_sdram_bankmachine2_row_opened) begin
                        if (basesoc_sdram_bankmachine2_row_hit) begin
                            basesoc_sdram_bankmachine2_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine2_source_source_payload_we) begin
                                basesoc_sdram_bankmachine2_req_wdata_ready <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine2_req_rdata_valid <= basesoc_sdram_bankmachine2_cmd_ready;
                                basesoc_sdram_bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine2_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine2_cmd_ready & basesoc_sdram_bankmachine2_auto_precharge)) begin
                                bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_bankmachine3_sink_valid = basesoc_sdram_bankmachine3_req_valid;
assign basesoc_sdram_bankmachine3_req_ready = basesoc_sdram_bankmachine3_sink_ready;
assign basesoc_sdram_bankmachine3_sink_payload_we = basesoc_sdram_bankmachine3_req_we;
assign basesoc_sdram_bankmachine3_sink_payload_addr = basesoc_sdram_bankmachine3_req_addr;
assign basesoc_sdram_bankmachine3_sink_sink_valid = basesoc_sdram_bankmachine3_source_valid;
assign basesoc_sdram_bankmachine3_source_ready = basesoc_sdram_bankmachine3_sink_sink_ready;
assign basesoc_sdram_bankmachine3_sink_sink_first = basesoc_sdram_bankmachine3_source_first;
assign basesoc_sdram_bankmachine3_sink_sink_last = basesoc_sdram_bankmachine3_source_last;
assign basesoc_sdram_bankmachine3_sink_sink_payload_we = basesoc_sdram_bankmachine3_source_payload_we;
assign basesoc_sdram_bankmachine3_sink_sink_payload_addr = basesoc_sdram_bankmachine3_source_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_ready = (basesoc_sdram_bankmachine3_req_wdata_ready | basesoc_sdram_bankmachine3_req_rdata_valid);
assign basesoc_sdram_bankmachine3_req_lock = (basesoc_sdram_bankmachine3_source_valid | basesoc_sdram_bankmachine3_source_source_valid);
assign basesoc_sdram_bankmachine3_row_hit = (basesoc_sdram_bankmachine3_row == basesoc_sdram_bankmachine3_source_source_payload_addr[18:8]);
assign basesoc_sdram_bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_payload_a <= 11'd0;
    if (basesoc_sdram_bankmachine3_row_col_n_addr_sel) begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= basesoc_sdram_bankmachine3_source_source_payload_addr[18:8];
    end else begin
        basesoc_sdram_bankmachine3_cmd_payload_a <= ((basesoc_sdram_bankmachine3_auto_precharge <<< 4'd10) | {basesoc_sdram_bankmachine3_source_source_payload_addr[7:0], {0{1'd0}}});
    end
end
assign basesoc_sdram_bankmachine3_twtpcon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_cmd_payload_is_write);
assign basesoc_sdram_bankmachine3_trccon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
assign basesoc_sdram_bankmachine3_trascon_valid = ((basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_ready) & basesoc_sdram_bankmachine3_row_open);
always @(*) begin
    basesoc_sdram_bankmachine3_auto_precharge <= 1'd0;
    if ((basesoc_sdram_bankmachine3_source_valid & basesoc_sdram_bankmachine3_source_source_valid)) begin
        if ((basesoc_sdram_bankmachine3_source_payload_addr[18:8] != basesoc_sdram_bankmachine3_source_source_payload_addr[18:8])) begin
            basesoc_sdram_bankmachine3_auto_precharge <= (basesoc_sdram_bankmachine3_row_close == 1'd0);
        end
    end
end
assign basesoc_sdram_bankmachine3_syncfifo3_din = {basesoc_sdram_bankmachine3_fifo_in_last, basesoc_sdram_bankmachine3_fifo_in_first, basesoc_sdram_bankmachine3_fifo_in_payload_addr, basesoc_sdram_bankmachine3_fifo_in_payload_we};
assign {basesoc_sdram_bankmachine3_fifo_out_last, basesoc_sdram_bankmachine3_fifo_out_first, basesoc_sdram_bankmachine3_fifo_out_payload_addr, basesoc_sdram_bankmachine3_fifo_out_payload_we} = basesoc_sdram_bankmachine3_syncfifo3_dout;
assign basesoc_sdram_bankmachine3_sink_ready = basesoc_sdram_bankmachine3_syncfifo3_writable;
assign basesoc_sdram_bankmachine3_syncfifo3_we = basesoc_sdram_bankmachine3_sink_valid;
assign basesoc_sdram_bankmachine3_fifo_in_first = basesoc_sdram_bankmachine3_sink_first;
assign basesoc_sdram_bankmachine3_fifo_in_last = basesoc_sdram_bankmachine3_sink_last;
assign basesoc_sdram_bankmachine3_fifo_in_payload_we = basesoc_sdram_bankmachine3_sink_payload_we;
assign basesoc_sdram_bankmachine3_fifo_in_payload_addr = basesoc_sdram_bankmachine3_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_valid = basesoc_sdram_bankmachine3_syncfifo3_readable;
assign basesoc_sdram_bankmachine3_source_first = basesoc_sdram_bankmachine3_fifo_out_first;
assign basesoc_sdram_bankmachine3_source_last = basesoc_sdram_bankmachine3_fifo_out_last;
assign basesoc_sdram_bankmachine3_source_payload_we = basesoc_sdram_bankmachine3_fifo_out_payload_we;
assign basesoc_sdram_bankmachine3_source_payload_addr = basesoc_sdram_bankmachine3_fifo_out_payload_addr;
assign basesoc_sdram_bankmachine3_syncfifo3_re = basesoc_sdram_bankmachine3_source_ready;
always @(*) begin
    basesoc_sdram_bankmachine3_wrport_adr <= 3'd0;
    if (basesoc_sdram_bankmachine3_replace) begin
        basesoc_sdram_bankmachine3_wrport_adr <= (basesoc_sdram_bankmachine3_produce - 1'd1);
    end else begin
        basesoc_sdram_bankmachine3_wrport_adr <= basesoc_sdram_bankmachine3_produce;
    end
end
assign basesoc_sdram_bankmachine3_wrport_dat_w = basesoc_sdram_bankmachine3_syncfifo3_din;
assign basesoc_sdram_bankmachine3_wrport_we = (basesoc_sdram_bankmachine3_syncfifo3_we & (basesoc_sdram_bankmachine3_syncfifo3_writable | basesoc_sdram_bankmachine3_replace));
assign basesoc_sdram_bankmachine3_do_read = (basesoc_sdram_bankmachine3_syncfifo3_readable & basesoc_sdram_bankmachine3_syncfifo3_re);
assign basesoc_sdram_bankmachine3_rdport_adr = basesoc_sdram_bankmachine3_consume;
assign basesoc_sdram_bankmachine3_syncfifo3_dout = basesoc_sdram_bankmachine3_rdport_dat_r;
assign basesoc_sdram_bankmachine3_syncfifo3_writable = (basesoc_sdram_bankmachine3_level != 4'd8);
assign basesoc_sdram_bankmachine3_syncfifo3_readable = (basesoc_sdram_bankmachine3_level != 1'd0);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_ready = ((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready);
assign basesoc_sdram_bankmachine3_pipe_valid_sink_valid = basesoc_sdram_bankmachine3_sink_sink_valid;
assign basesoc_sdram_bankmachine3_sink_sink_ready = basesoc_sdram_bankmachine3_pipe_valid_sink_ready;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_first = basesoc_sdram_bankmachine3_sink_sink_first;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_last = basesoc_sdram_bankmachine3_sink_sink_last;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we = basesoc_sdram_bankmachine3_sink_sink_payload_we;
assign basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr = basesoc_sdram_bankmachine3_sink_sink_payload_addr;
assign basesoc_sdram_bankmachine3_source_source_valid = basesoc_sdram_bankmachine3_pipe_valid_source_valid;
assign basesoc_sdram_bankmachine3_pipe_valid_source_ready = basesoc_sdram_bankmachine3_source_source_ready;
assign basesoc_sdram_bankmachine3_source_source_first = basesoc_sdram_bankmachine3_pipe_valid_source_first;
assign basesoc_sdram_bankmachine3_source_source_last = basesoc_sdram_bankmachine3_pipe_valid_source_last;
assign basesoc_sdram_bankmachine3_source_source_payload_we = basesoc_sdram_bankmachine3_pipe_valid_source_payload_we;
assign basesoc_sdram_bankmachine3_source_source_payload_addr = basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    bankmachine3_next_state <= 3'd0;
    basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd0;
    basesoc_sdram_bankmachine3_cmd_valid <= 1'd0;
    basesoc_sdram_bankmachine3_refresh_gnt <= 1'd0;
    basesoc_sdram_bankmachine3_req_rdata_valid <= 1'd0;
    basesoc_sdram_bankmachine3_req_wdata_ready <= 1'd0;
    basesoc_sdram_bankmachine3_row_close <= 1'd0;
    basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd0;
    basesoc_sdram_bankmachine3_row_open <= 1'd0;
    bankmachine3_next_state <= bankmachine3_state;
    case (bankmachine3_state)
        1'd1: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 2'd3;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            if ((basesoc_sdram_bankmachine3_twtpcon_ready & basesoc_sdram_bankmachine3_trascon_ready)) begin
                bankmachine3_next_state <= 2'd3;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
            if (basesoc_sdram_bankmachine3_trccon_ready) begin
                basesoc_sdram_bankmachine3_row_col_n_addr_sel <= 1'd1;
                basesoc_sdram_bankmachine3_row_open <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
                if (basesoc_sdram_bankmachine3_cmd_ready) begin
                    bankmachine3_next_state <= 1'd0;
                end
                basesoc_sdram_bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
            if (basesoc_sdram_bankmachine3_twtpcon_ready) begin
                basesoc_sdram_bankmachine3_refresh_gnt <= 1'd1;
            end
            basesoc_sdram_bankmachine3_row_close <= 1'd1;
            basesoc_sdram_bankmachine3_cmd_payload_is_cmd <= 1'd1;
            if ((~basesoc_sdram_bankmachine3_refresh_req)) begin
                bankmachine3_next_state <= 1'd0;
            end
        end
        default: begin
            if (basesoc_sdram_bankmachine3_refresh_req) begin
                bankmachine3_next_state <= 3'd4;
            end else begin
                if (basesoc_sdram_bankmachine3_source_source_valid) begin
                    if (basesoc_sdram_bankmachine3_row_opened) begin
                        if (basesoc_sdram_bankmachine3_row_hit) begin
                            basesoc_sdram_bankmachine3_cmd_valid <= 1'd1;
                            if (basesoc_sdram_bankmachine3_source_source_payload_we) begin
                                basesoc_sdram_bankmachine3_req_wdata_ready <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_write <= 1'd1;
                                basesoc_sdram_bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                                basesoc_sdram_bankmachine3_req_rdata_valid <= basesoc_sdram_bankmachine3_cmd_ready;
                                basesoc_sdram_bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                            basesoc_sdram_bankmachine3_cmd_payload_cas <= 1'd1;
                            if ((basesoc_sdram_bankmachine3_cmd_ready & basesoc_sdram_bankmachine3_auto_precharge)) begin
                                bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
assign basesoc_sdram_choose_req_want_cmds = 1'd1;
assign basesoc_sdram_trrdcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & ((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we)));
assign basesoc_sdram_tfawcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & ((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we)));
assign basesoc_sdram_ras_allowed = (basesoc_sdram_trrdcon_ready & basesoc_sdram_tfawcon_ready);
assign basesoc_sdram_tccdcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_cmd_payload_is_write | basesoc_sdram_choose_req_cmd_payload_is_read));
assign basesoc_sdram_cas_allowed = basesoc_sdram_tccdcon_ready;
assign basesoc_sdram_twtrcon_valid = ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
assign basesoc_sdram_read_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_read) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_read)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_read)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_read));
assign basesoc_sdram_write_available = ((((basesoc_sdram_bankmachine0_cmd_valid & basesoc_sdram_bankmachine0_cmd_payload_is_write) | (basesoc_sdram_bankmachine1_cmd_valid & basesoc_sdram_bankmachine1_cmd_payload_is_write)) | (basesoc_sdram_bankmachine2_cmd_valid & basesoc_sdram_bankmachine2_cmd_payload_is_write)) | (basesoc_sdram_bankmachine3_cmd_valid & basesoc_sdram_bankmachine3_cmd_payload_is_write));
assign basesoc_sdram_max_time0 = (basesoc_sdram_time0 == 1'd0);
assign basesoc_sdram_max_time1 = (basesoc_sdram_time1 == 1'd0);
assign basesoc_sdram_bankmachine0_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine1_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine2_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_bankmachine3_refresh_req = basesoc_sdram_cmd_valid;
assign basesoc_sdram_go_to_refresh = (((basesoc_sdram_bankmachine0_refresh_gnt & basesoc_sdram_bankmachine1_refresh_gnt) & basesoc_sdram_bankmachine2_refresh_gnt) & basesoc_sdram_bankmachine3_refresh_gnt);
assign basesoc_sdram_interface_rdata = {basesoc_sdram_dfi_p0_rddata};
assign {basesoc_sdram_dfi_p0_wrdata} = basesoc_sdram_interface_wdata;
assign {basesoc_sdram_dfi_p0_wrdata_mask} = (~basesoc_sdram_interface_wdata_we);
always @(*) begin
    basesoc_sdram_choose_cmd_valids <= 4'd0;
    basesoc_sdram_choose_cmd_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
    basesoc_sdram_choose_cmd_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_cmd_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_cmd_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_cmd_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_cmd_want_writes))));
end
assign basesoc_sdram_choose_cmd_request = basesoc_sdram_choose_cmd_valids;
assign basesoc_sdram_choose_cmd_cmd_valid = rhs_array_muxed8;
assign basesoc_sdram_choose_cmd_cmd_payload_a = rhs_array_muxed9;
assign basesoc_sdram_choose_cmd_cmd_payload_ba = rhs_array_muxed10;
assign basesoc_sdram_choose_cmd_cmd_payload_is_read = rhs_array_muxed11;
assign basesoc_sdram_choose_cmd_cmd_payload_is_write = rhs_array_muxed12;
assign basesoc_sdram_choose_cmd_cmd_payload_is_cmd = rhs_array_muxed13;
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_cas <= t_array_muxed0;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_ras <= t_array_muxed1;
    end
end
always @(*) begin
    basesoc_sdram_choose_cmd_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_cmd_cmd_valid) begin
        basesoc_sdram_choose_cmd_cmd_payload_we <= t_array_muxed2;
    end
end
assign basesoc_sdram_choose_cmd_ce = (basesoc_sdram_choose_cmd_cmd_ready | (~basesoc_sdram_choose_cmd_cmd_valid));
always @(*) begin
    basesoc_sdram_choose_req_valids <= 4'd0;
    basesoc_sdram_choose_req_valids[0] <= (basesoc_sdram_bankmachine0_cmd_valid & (((basesoc_sdram_bankmachine0_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine0_cmd_payload_ras & (~basesoc_sdram_bankmachine0_cmd_payload_cas)) & (~basesoc_sdram_bankmachine0_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine0_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine0_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[1] <= (basesoc_sdram_bankmachine1_cmd_valid & (((basesoc_sdram_bankmachine1_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine1_cmd_payload_ras & (~basesoc_sdram_bankmachine1_cmd_payload_cas)) & (~basesoc_sdram_bankmachine1_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine1_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine1_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[2] <= (basesoc_sdram_bankmachine2_cmd_valid & (((basesoc_sdram_bankmachine2_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine2_cmd_payload_ras & (~basesoc_sdram_bankmachine2_cmd_payload_cas)) & (~basesoc_sdram_bankmachine2_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine2_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine2_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
    basesoc_sdram_choose_req_valids[3] <= (basesoc_sdram_bankmachine3_cmd_valid & (((basesoc_sdram_bankmachine3_cmd_payload_is_cmd & basesoc_sdram_choose_req_want_cmds) & ((~((basesoc_sdram_bankmachine3_cmd_payload_ras & (~basesoc_sdram_bankmachine3_cmd_payload_cas)) & (~basesoc_sdram_bankmachine3_cmd_payload_we))) | basesoc_sdram_choose_req_want_activates)) | ((basesoc_sdram_bankmachine3_cmd_payload_is_read == basesoc_sdram_choose_req_want_reads) & (basesoc_sdram_bankmachine3_cmd_payload_is_write == basesoc_sdram_choose_req_want_writes))));
end
assign basesoc_sdram_choose_req_request = basesoc_sdram_choose_req_valids;
assign basesoc_sdram_choose_req_cmd_valid = rhs_array_muxed14;
assign basesoc_sdram_choose_req_cmd_payload_a = rhs_array_muxed15;
assign basesoc_sdram_choose_req_cmd_payload_ba = rhs_array_muxed16;
assign basesoc_sdram_choose_req_cmd_payload_is_read = rhs_array_muxed17;
assign basesoc_sdram_choose_req_cmd_payload_is_write = rhs_array_muxed18;
assign basesoc_sdram_choose_req_cmd_payload_is_cmd = rhs_array_muxed19;
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_cas <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_cas <= t_array_muxed3;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_ras <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_ras <= t_array_muxed4;
    end
end
always @(*) begin
    basesoc_sdram_choose_req_cmd_payload_we <= 1'd0;
    if (basesoc_sdram_choose_req_cmd_valid) begin
        basesoc_sdram_choose_req_cmd_payload_we <= t_array_muxed5;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine0_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd0))) begin
        basesoc_sdram_bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine1_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 1'd1))) begin
        basesoc_sdram_bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine2_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd2))) begin
        basesoc_sdram_bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    basesoc_sdram_bankmachine3_cmd_ready <= 1'd0;
    if (((basesoc_sdram_choose_cmd_cmd_valid & basesoc_sdram_choose_cmd_cmd_ready) & (basesoc_sdram_choose_cmd_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
    if (((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & (basesoc_sdram_choose_req_grant == 2'd3))) begin
        basesoc_sdram_bankmachine3_cmd_ready <= 1'd1;
    end
end
assign basesoc_sdram_choose_req_ce = (basesoc_sdram_choose_req_cmd_ready | (~basesoc_sdram_choose_req_cmd_valid));
assign basesoc_sdram_dfi_p0_reset_n = 1'd1;
assign basesoc_sdram_dfi_p0_cke = {1{basesoc_sdram_steerer0}};
assign basesoc_sdram_dfi_p0_odt = {1{basesoc_sdram_steerer1}};
always @(*) begin
    basesoc_sdram_choose_req_cmd_ready <= 1'd0;
    basesoc_sdram_choose_req_want_activates <= 1'd0;
    basesoc_sdram_choose_req_want_reads <= 1'd0;
    basesoc_sdram_choose_req_want_writes <= 1'd0;
    basesoc_sdram_cmd_ready <= 1'd0;
    basesoc_sdram_en0 <= 1'd0;
    basesoc_sdram_en1 <= 1'd0;
    basesoc_sdram_steerer_sel <= 2'd0;
    multiplexer_next_state <= 3'd0;
    basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
    multiplexer_next_state <= multiplexer_state;
    case (multiplexer_state)
        1'd1: begin
            basesoc_sdram_en1 <= 1'd1;
            basesoc_sdram_choose_req_want_writes <= 1'd1;
            if (1'd1) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_req_cmd_ready <= ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 1'd1;
            end
            if (basesoc_sdram_read_available) begin
                if (((~basesoc_sdram_write_available) | basesoc_sdram_max_time1)) begin
                    multiplexer_next_state <= 2'd3;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            basesoc_sdram_steerer_sel <= 2'd3;
            basesoc_sdram_cmd_ready <= 1'd1;
            if (basesoc_sdram_cmd_last) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (basesoc_sdram_twtrcon_ready) begin
                multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            multiplexer_next_state <= 1'd1;
        end
        default: begin
            basesoc_sdram_en0 <= 1'd1;
            basesoc_sdram_choose_req_want_reads <= 1'd1;
            if (1'd1) begin
                basesoc_sdram_choose_req_cmd_ready <= (basesoc_sdram_cas_allowed & ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed));
            end else begin
                basesoc_sdram_choose_req_want_activates <= basesoc_sdram_ras_allowed;
                basesoc_sdram_choose_req_cmd_ready <= ((~((basesoc_sdram_choose_req_cmd_payload_ras & (~basesoc_sdram_choose_req_cmd_payload_cas)) & (~basesoc_sdram_choose_req_cmd_payload_we))) | basesoc_sdram_ras_allowed);
                basesoc_sdram_choose_req_cmd_ready <= basesoc_sdram_cas_allowed;
            end
            basesoc_sdram_steerer_sel <= 1'd0;
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 2'd2;
            end
            if (1'd1) begin
                basesoc_sdram_steerer_sel <= 1'd1;
            end
            if (basesoc_sdram_write_available) begin
                if (((~basesoc_sdram_read_available) | basesoc_sdram_max_time0)) begin
                    multiplexer_next_state <= 3'd4;
                end
            end
            if (basesoc_sdram_go_to_refresh) begin
                multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
assign roundrobin0_request = {(((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign roundrobin0_ce = ((~basesoc_sdram_interface_bank0_valid) & (~basesoc_sdram_interface_bank0_lock));
assign basesoc_sdram_interface_bank0_addr = rhs_array_muxed20;
assign basesoc_sdram_interface_bank0_we = rhs_array_muxed21;
assign basesoc_sdram_interface_bank0_valid = rhs_array_muxed22;
assign roundrobin1_request = {(((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((locked1 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign roundrobin1_ce = ((~basesoc_sdram_interface_bank1_valid) & (~basesoc_sdram_interface_bank1_lock));
assign basesoc_sdram_interface_bank1_addr = rhs_array_muxed23;
assign basesoc_sdram_interface_bank1_we = rhs_array_muxed24;
assign basesoc_sdram_interface_bank1_valid = rhs_array_muxed25;
assign roundrobin2_request = {(((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((locked2 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign roundrobin2_ce = ((~basesoc_sdram_interface_bank2_valid) & (~basesoc_sdram_interface_bank2_lock));
assign basesoc_sdram_interface_bank2_addr = rhs_array_muxed26;
assign basesoc_sdram_interface_bank2_we = rhs_array_muxed27;
assign basesoc_sdram_interface_bank2_valid = rhs_array_muxed28;
assign roundrobin3_request = {(((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((locked3 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & basesoc_port_cmd_valid)};
assign roundrobin3_ce = ((~basesoc_sdram_interface_bank3_valid) & (~basesoc_sdram_interface_bank3_lock));
assign basesoc_sdram_interface_bank3_addr = rhs_array_muxed29;
assign basesoc_sdram_interface_bank3_we = rhs_array_muxed30;
assign basesoc_sdram_interface_bank3_valid = rhs_array_muxed31;
assign basesoc_port_cmd_ready = ((((1'd0 | (((roundrobin0_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank0_ready)) | (((roundrobin1_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((locked1 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank1_ready)) | (((roundrobin2_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((locked2 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0)))))) & basesoc_sdram_interface_bank2_ready)) | (((roundrobin3_grant == 1'd0) & ((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((locked3 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0)))))) & basesoc_sdram_interface_bank3_ready));
assign basesoc_port_wdata_ready = new_master_wdata_ready;
assign basesoc_port_rdata_valid = new_master_rdata_valid3;
always @(*) begin
    basesoc_sdram_interface_wdata <= 32'd0;
    basesoc_sdram_interface_wdata_we <= 4'd0;
    case ({new_master_wdata_ready})
        1'd1: begin
            basesoc_sdram_interface_wdata <= basesoc_port_wdata_payload_data;
            basesoc_sdram_interface_wdata_we <= basesoc_port_wdata_payload_we;
        end
        default: begin
            basesoc_sdram_interface_wdata <= 1'd0;
            basesoc_sdram_interface_wdata_we <= 1'd0;
        end
    endcase
end
assign basesoc_port_rdata_payload_data = basesoc_sdram_interface_rdata;
assign roundrobin0_grant = 1'd0;
assign roundrobin1_grant = 1'd0;
assign roundrobin2_grant = 1'd0;
assign roundrobin3_grant = 1'd0;
assign basesoc_data_port_adr = basesoc_wb_sdram_adr[4:2];
always @(*) begin
    basesoc_data_port_dat_w <= 128'd0;
    basesoc_data_port_we <= 16'd0;
    if (basesoc_write_from_slave) begin
        basesoc_data_port_dat_w <= basesoc_interface_dat_r;
        basesoc_data_port_we <= {16{1'd1}};
    end else begin
        basesoc_data_port_dat_w <= {4{basesoc_wb_sdram_dat_w}};
        if ((((basesoc_wb_sdram_cyc & basesoc_wb_sdram_stb) & basesoc_wb_sdram_we) & basesoc_wb_sdram_ack)) begin
            basesoc_data_port_we <= {({4{(basesoc_wb_sdram_adr[1:0] == 2'd3)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 2'd2)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 1'd1)}} & basesoc_wb_sdram_sel), ({4{(basesoc_wb_sdram_adr[1:0] == 1'd0)}} & basesoc_wb_sdram_sel)};
        end
    end
end
assign basesoc_interface_dat_w = basesoc_data_port_dat_r;
assign basesoc_interface_sel = 16'd65535;
always @(*) begin
    basesoc_wb_sdram_dat_r <= 32'd0;
    case (basesoc_adr_offset_r)
        1'd0: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[31:0];
        end
        1'd1: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[63:32];
        end
        2'd2: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[95:64];
        end
        default: begin
            basesoc_wb_sdram_dat_r <= basesoc_data_port_dat_r[127:96];
        end
    endcase
end
assign {basesoc_tag_do_dirty, basesoc_tag_do_tag} = basesoc_tag_port_dat_r;
assign basesoc_tag_port_dat_w = {basesoc_tag_di_dirty, basesoc_tag_di_tag};
assign basesoc_tag_port_adr = basesoc_wb_sdram_adr[4:2];
assign basesoc_tag_di_tag = basesoc_wb_sdram_adr[29:5];
assign basesoc_interface_adr = {basesoc_tag_do_tag, basesoc_wb_sdram_adr[4:2]};
always @(*) begin
    basesoc_interface_cyc <= 1'd0;
    basesoc_interface_stb <= 1'd0;
    basesoc_interface_we <= 1'd0;
    basesoc_tag_di_dirty <= 1'd0;
    basesoc_tag_port_we <= 1'd0;
    basesoc_wb_sdram_ack <= 1'd0;
    basesoc_word_clr <= 1'd0;
    basesoc_word_inc <= 1'd0;
    basesoc_write_from_slave <= 1'd0;
    fullmemorywe_next_state <= 2'd0;
    fullmemorywe_next_state <= fullmemorywe_state;
    case (fullmemorywe_state)
        1'd1: begin
            basesoc_word_clr <= 1'd1;
            if ((basesoc_tag_do_tag == basesoc_wb_sdram_adr[29:5])) begin
                basesoc_wb_sdram_ack <= 1'd1;
                if (basesoc_wb_sdram_we) begin
                    basesoc_tag_di_dirty <= 1'd1;
                    basesoc_tag_port_we <= 1'd1;
                end
                fullmemorywe_next_state <= 1'd0;
            end else begin
                if (basesoc_tag_do_dirty) begin
                    fullmemorywe_next_state <= 2'd2;
                end else begin
                    basesoc_tag_port_we <= 1'd1;
                    basesoc_word_clr <= 1'd1;
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd2: begin
            basesoc_interface_stb <= 1'd1;
            basesoc_interface_cyc <= 1'd1;
            basesoc_interface_we <= 1'd1;
            if (basesoc_interface_ack) begin
                basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    basesoc_tag_port_we <= 1'd1;
                    basesoc_word_clr <= 1'd1;
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        2'd3: begin
            basesoc_interface_stb <= 1'd1;
            basesoc_interface_cyc <= 1'd1;
            basesoc_interface_we <= 1'd0;
            if (basesoc_interface_ack) begin
                basesoc_write_from_slave <= 1'd1;
                basesoc_word_inc <= 1'd1;
                if (1'd1) begin
                    fullmemorywe_next_state <= 1'd1;
                end else begin
                    fullmemorywe_next_state <= 2'd3;
                end
            end
        end
        default: begin
            if ((basesoc_wb_sdram_cyc & basesoc_wb_sdram_stb)) begin
                fullmemorywe_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_wishbone_bridge_cmd_payload_addr = (basesoc_interface_adr - 27'd67108864);
assign basesoc_wishbone_bridge_cmd_payload_we = basesoc_interface_we;
assign basesoc_wishbone_bridge_cmd_last = (~basesoc_interface_we);
assign basesoc_wishbone_bridge_flush = (~basesoc_interface_cyc);
always @(*) begin
    basesoc_wishbone_bridge_wdata_valid <= 1'd0;
    basesoc_wishbone_bridge_wdata_valid <= (basesoc_interface_stb & basesoc_interface_we);
    if (1'd0) begin
        if ((~basesoc_wishbone_bridge_is_ongoing)) begin
            basesoc_wishbone_bridge_wdata_valid <= 1'd0;
        end
    end
end
assign basesoc_wishbone_bridge_wdata_payload_data = basesoc_interface_dat_w;
assign basesoc_wishbone_bridge_wdata_payload_we = basesoc_interface_sel;
assign basesoc_wishbone_bridge_rdata_ready = 1'd1;
always @(*) begin
    basesoc_port_cmd_payload_addr <= 21'd0;
    basesoc_port_cmd_payload_we <= 1'd0;
    basesoc_port_cmd_valid <= 1'd0;
    basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= 19'd0;
    basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd0;
    basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 2'd0;
    basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd0;
    basesoc_wishbone_bridge_cmd_ready <= 1'd0;
    basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= 1'd0;
    basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd0;
    litedramnativeportconverter_next_state <= 1'd0;
    litedramnativeportconverter_next_state <= litedramnativeportconverter_state;
    case (litedramnativeportconverter_state)
        1'd1: begin
            basesoc_port_cmd_valid <= 1'd1;
            basesoc_port_cmd_payload_we <= basesoc_wishbone_bridge_cmd_we;
            basesoc_port_cmd_payload_addr <= ((basesoc_wishbone_bridge_cmd_addr * 3'd4) + basesoc_wishbone_bridge_cmd_count);
            if (basesoc_port_cmd_ready) begin
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= (basesoc_wishbone_bridge_cmd_count + 1'd1);
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                if ((basesoc_wishbone_bridge_cmd_count == 2'd3)) begin
                    litedramnativeportconverter_next_state <= 1'd0;
                end
            end
        end
        default: begin
            basesoc_wishbone_bridge_cmd_ready <= 1'd1;
            if (basesoc_wishbone_bridge_cmd_valid) begin
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0 <= 1'd0;
                basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0 <= 1'd1;
                basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1 <= basesoc_wishbone_bridge_cmd_payload_addr;
                basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1 <= 1'd1;
                basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2 <= basesoc_wishbone_bridge_cmd_payload_we;
                basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2 <= 1'd1;
                litedramnativeportconverter_next_state <= 1'd1;
            end
        end
    endcase
end
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_valid = basesoc_wishbone_bridge_wdata_converter_sink_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_first = basesoc_wishbone_bridge_wdata_converter_sink_first;
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_last = basesoc_wishbone_bridge_wdata_converter_sink_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_ready = basesoc_wishbone_bridge_wdata_converter_converter_sink_ready;
always @(*) begin
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data <= 144'd0;
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[31:0] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[31:0];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:32] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[3:0];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[67:36] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[63:32];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:68] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[7:4];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[103:72] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[95:64];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:104] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[11:8];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[139:108] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_data[127:96];
    basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:140] <= basesoc_wishbone_bridge_wdata_converter_sink_payload_we[15:12];
end
assign basesoc_wishbone_bridge_wdata_converter_source_valid = basesoc_wishbone_bridge_wdata_converter_source_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_source_first = basesoc_wishbone_bridge_wdata_converter_source_source_first;
assign basesoc_wishbone_bridge_wdata_converter_source_last = basesoc_wishbone_bridge_wdata_converter_source_source_last;
assign basesoc_wishbone_bridge_wdata_converter_source_source_ready = basesoc_wishbone_bridge_wdata_converter_source_ready;
assign {basesoc_wishbone_bridge_wdata_converter_source_payload_we, basesoc_wishbone_bridge_wdata_converter_source_payload_data} = basesoc_wishbone_bridge_wdata_converter_source_source_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_source_source_valid = basesoc_wishbone_bridge_wdata_converter_converter_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_source_ready = basesoc_wishbone_bridge_wdata_converter_source_source_ready;
assign basesoc_wishbone_bridge_wdata_converter_source_source_first = basesoc_wishbone_bridge_wdata_converter_converter_source_first;
assign basesoc_wishbone_bridge_wdata_converter_source_source_last = basesoc_wishbone_bridge_wdata_converter_converter_source_last;
assign basesoc_wishbone_bridge_wdata_converter_source_source_payload_data = basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_converter_first = (basesoc_wishbone_bridge_wdata_converter_converter_mux == 1'd0);
assign basesoc_wishbone_bridge_wdata_converter_converter_last = (basesoc_wishbone_bridge_wdata_converter_converter_mux == 2'd3);
assign basesoc_wishbone_bridge_wdata_converter_converter_source_valid = basesoc_wishbone_bridge_wdata_converter_converter_sink_valid;
assign basesoc_wishbone_bridge_wdata_converter_converter_source_first = (basesoc_wishbone_bridge_wdata_converter_converter_sink_first & basesoc_wishbone_bridge_wdata_converter_converter_first);
assign basesoc_wishbone_bridge_wdata_converter_converter_source_last = (basesoc_wishbone_bridge_wdata_converter_converter_sink_last & basesoc_wishbone_bridge_wdata_converter_converter_last);
assign basesoc_wishbone_bridge_wdata_converter_converter_sink_ready = (basesoc_wishbone_bridge_wdata_converter_converter_last & basesoc_wishbone_bridge_wdata_converter_converter_source_ready);
always @(*) begin
    basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= 36'd0;
    case (basesoc_wishbone_bridge_wdata_converter_converter_mux)
        1'd0: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[35:0];
        end
        1'd1: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[71:36];
        end
        2'd2: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[107:72];
        end
        default: begin
            basesoc_wishbone_bridge_wdata_converter_converter_source_payload_data <= basesoc_wishbone_bridge_wdata_converter_converter_sink_payload_data[143:108];
        end
    endcase
end
assign basesoc_wishbone_bridge_wdata_converter_converter_source_payload_valid_token_count = basesoc_wishbone_bridge_wdata_converter_converter_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_valid = basesoc_wishbone_bridge_wdata_valid;
assign basesoc_wishbone_bridge_wdata_ready = basesoc_wishbone_bridge_wdata_converter_sink_ready;
assign basesoc_wishbone_bridge_wdata_converter_sink_first = basesoc_wishbone_bridge_wdata_first;
assign basesoc_wishbone_bridge_wdata_converter_sink_last = basesoc_wishbone_bridge_wdata_last;
assign basesoc_wishbone_bridge_wdata_converter_sink_payload_data = basesoc_wishbone_bridge_wdata_payload_data;
assign basesoc_wishbone_bridge_wdata_converter_sink_payload_we = basesoc_wishbone_bridge_wdata_payload_we;
assign basesoc_port_wdata_valid = basesoc_wishbone_bridge_wdata_converter_source_valid;
assign basesoc_wishbone_bridge_wdata_converter_source_ready = basesoc_port_wdata_ready;
assign basesoc_port_wdata_first = basesoc_wishbone_bridge_wdata_converter_source_first;
assign basesoc_port_wdata_last = basesoc_wishbone_bridge_wdata_converter_source_last;
assign basesoc_port_wdata_payload_data = basesoc_wishbone_bridge_wdata_converter_source_payload_data;
assign basesoc_port_wdata_payload_we = basesoc_wishbone_bridge_wdata_converter_source_payload_we;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_valid = basesoc_wishbone_bridge_rdata_converter_sink_valid;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_first = basesoc_wishbone_bridge_rdata_converter_sink_first;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_last = basesoc_wishbone_bridge_rdata_converter_sink_last;
assign basesoc_wishbone_bridge_rdata_converter_sink_ready = basesoc_wishbone_bridge_rdata_converter_converter_sink_ready;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data = {basesoc_wishbone_bridge_rdata_converter_sink_payload_data};
assign basesoc_wishbone_bridge_rdata_converter_source_valid = basesoc_wishbone_bridge_rdata_converter_source_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_source_first = basesoc_wishbone_bridge_rdata_converter_source_source_first;
assign basesoc_wishbone_bridge_rdata_converter_source_last = basesoc_wishbone_bridge_rdata_converter_source_source_last;
assign basesoc_wishbone_bridge_rdata_converter_source_source_ready = basesoc_wishbone_bridge_rdata_converter_source_ready;
always @(*) begin
    basesoc_wishbone_bridge_rdata_converter_source_payload_data <= 128'd0;
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[31:0] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[31:0];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[63:32] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[63:32];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[95:64] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[95:64];
    basesoc_wishbone_bridge_rdata_converter_source_payload_data[127:96] <= basesoc_wishbone_bridge_rdata_converter_source_source_payload_data[127:96];
end
assign basesoc_wishbone_bridge_rdata_converter_source_source_valid = basesoc_wishbone_bridge_rdata_converter_converter_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_converter_source_ready = basesoc_wishbone_bridge_rdata_converter_source_source_ready;
assign basesoc_wishbone_bridge_rdata_converter_source_source_first = basesoc_wishbone_bridge_rdata_converter_converter_source_first;
assign basesoc_wishbone_bridge_rdata_converter_source_source_last = basesoc_wishbone_bridge_rdata_converter_converter_source_last;
assign basesoc_wishbone_bridge_rdata_converter_source_source_payload_data = basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data;
assign basesoc_wishbone_bridge_rdata_converter_converter_sink_ready = ((~basesoc_wishbone_bridge_rdata_converter_converter_strobe_all) | basesoc_wishbone_bridge_rdata_converter_converter_source_ready);
assign basesoc_wishbone_bridge_rdata_converter_converter_source_valid = basesoc_wishbone_bridge_rdata_converter_converter_strobe_all;
assign basesoc_wishbone_bridge_rdata_converter_converter_load_part = (basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready);
assign basesoc_wishbone_bridge_rdata_converter_sink_valid = basesoc_port_rdata_valid;
assign basesoc_port_rdata_ready = basesoc_wishbone_bridge_rdata_converter_sink_ready;
assign basesoc_wishbone_bridge_rdata_converter_sink_first = basesoc_port_rdata_first;
assign basesoc_wishbone_bridge_rdata_converter_sink_last = basesoc_port_rdata_last;
assign basesoc_wishbone_bridge_rdata_converter_sink_payload_data = basesoc_port_rdata_payload_data;
assign basesoc_wishbone_bridge_rdata_valid = basesoc_wishbone_bridge_rdata_converter_source_valid;
assign basesoc_wishbone_bridge_rdata_converter_source_ready = basesoc_wishbone_bridge_rdata_ready;
assign basesoc_wishbone_bridge_rdata_first = basesoc_wishbone_bridge_rdata_converter_source_first;
assign basesoc_wishbone_bridge_rdata_last = basesoc_wishbone_bridge_rdata_converter_source_last;
assign basesoc_wishbone_bridge_rdata_payload_data = basesoc_wishbone_bridge_rdata_converter_source_payload_data;
always @(*) begin
    basesoc_interface_ack <= 1'd0;
    basesoc_interface_dat_r <= 128'd0;
    basesoc_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
    basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd0;
    basesoc_wishbone_bridge_cmd_valid <= 1'd0;
    basesoc_wishbone_bridge_is_ongoing <= 1'd0;
    fsm_next_state <= 2'd0;
    fsm_next_state <= fsm_state;
    case (fsm_state)
        1'd1: begin
            basesoc_wishbone_bridge_is_ongoing <= 1'd1;
            basesoc_wishbone_bridge_aborted_fsm_next_value <= ((~basesoc_interface_cyc) | basesoc_wishbone_bridge_aborted);
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if ((basesoc_wishbone_bridge_wdata_valid & basesoc_wishbone_bridge_wdata_ready)) begin
                basesoc_interface_ack <= (basesoc_interface_cyc & (~basesoc_wishbone_bridge_aborted));
                fsm_next_state <= 1'd0;
            end
        end
        2'd2: begin
            basesoc_wishbone_bridge_aborted_fsm_next_value <= ((~basesoc_interface_cyc) | basesoc_wishbone_bridge_aborted);
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
            if (basesoc_wishbone_bridge_rdata_valid) begin
                basesoc_interface_ack <= (basesoc_interface_cyc & (~basesoc_wishbone_bridge_aborted));
                basesoc_interface_dat_r <= basesoc_wishbone_bridge_rdata_payload_data;
                fsm_next_state <= 1'd0;
            end
        end
        default: begin
            basesoc_wishbone_bridge_cmd_valid <= (basesoc_interface_cyc & basesoc_interface_stb);
            if (((basesoc_wishbone_bridge_cmd_valid & basesoc_wishbone_bridge_cmd_ready) & basesoc_interface_we)) begin
                fsm_next_state <= 1'd1;
            end
            if (((basesoc_wishbone_bridge_cmd_valid & basesoc_wishbone_bridge_cmd_ready) & (~basesoc_interface_we))) begin
                fsm_next_state <= 2'd2;
            end
            basesoc_wishbone_bridge_aborted_fsm_next_value <= 1'd0;
            basesoc_wishbone_bridge_aborted_fsm_next_value_ce <= 1'd1;
        end
    endcase
end
assign leds_wait = (~leds_done);
always @(*) begin
    leds_leds <= 6'd0;
    if ((leds_mode == 1'd1)) begin
        leds_leds <= leds_storage;
    end else begin
        leds_leds <= leds_chaser;
    end
end
assign {led_n5, led_n4, led_n3, led_n2, led_n1, led_n0} = (leds_leds ^ 1'd0);
assign leds_done = (leds_count == 1'd0);
always @(*) begin
    interface0_ack <= 1'd0;
    interface0_dat_r <= 32'd0;
    interface1_adr_next_value1 <= 14'd0;
    interface1_adr_next_value_ce1 <= 1'd0;
    interface1_dat_w_next_value0 <= 32'd0;
    interface1_dat_w_next_value_ce0 <= 1'd0;
    interface1_re_next_value2 <= 1'd0;
    interface1_re_next_value_ce2 <= 1'd0;
    interface1_we_next_value3 <= 1'd0;
    interface1_we_next_value_ce3 <= 1'd0;
    wishbone2csr_next_state <= 2'd0;
    wishbone2csr_next_state <= wishbone2csr_state;
    case (wishbone2csr_state)
        1'd1: begin
            interface1_adr_next_value1 <= 1'd0;
            interface1_adr_next_value_ce1 <= 1'd1;
            interface1_re_next_value2 <= 1'd0;
            interface1_re_next_value_ce2 <= 1'd1;
            interface1_we_next_value3 <= 1'd0;
            interface1_we_next_value_ce3 <= 1'd1;
            wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            interface0_ack <= 1'd1;
            interface0_dat_r <= interface1_dat_r;
            wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w_next_value0 <= interface0_dat_w;
            interface1_dat_w_next_value_ce0 <= 1'd1;
            if ((interface0_cyc & interface0_stb)) begin
                interface1_adr_next_value1 <= interface0_adr;
                interface1_adr_next_value_ce1 <= 1'd1;
                interface1_re_next_value2 <= ((~interface0_we) & (interface0_sel != 1'd0));
                interface1_re_next_value_ce2 <= 1'd1;
                interface1_we_next_value3 <= (interface0_we & (interface0_sel != 1'd0));
                interface1_we_next_value_ce3 <= 1'd1;
                wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_in_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_in_re <= 1'd0;
    csr_bankarray_csrbank0_in_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_in_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_in_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_in_w = buttons_status;
assign buttons_we = csr_bankarray_csrbank0_in_we;
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 1'd1);
assign csr_bankarray_csrbank1_reset0_r = csr_bankarray_interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank1_reset0_re <= 1'd0;
    csr_bankarray_csrbank1_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_reset0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_reset0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_scratch0_r = csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank1_scratch0_re <= 1'd0;
    csr_bankarray_csrbank1_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_scratch0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_scratch0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_bus_errors_r = csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank1_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank1_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_bus_errors_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_bus_errors_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
always @(*) begin
    basesoc_soc_rst <= 1'd0;
    if (basesoc_reset_re) begin
        basesoc_soc_rst <= basesoc_reset_storage[0];
    end
end
assign basesoc_cpu_rst = basesoc_reset_storage[1];
assign csr_bankarray_csrbank1_reset0_w = basesoc_reset_storage;
assign csr_bankarray_csrbank1_scratch0_w = basesoc_scratch_storage;
assign csr_bankarray_csrbank1_bus_errors_w = basesoc_bus_errors_status;
assign basesoc_bus_errors_we = csr_bankarray_csrbank1_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 2'd2);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign csr_bankarray_csrbank2_out0_r = csr_bankarray_interface2_bank_bus_dat_w[5:0];
always @(*) begin
    csr_bankarray_csrbank2_out0_re <= 1'd0;
    csr_bankarray_csrbank2_out0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank2_out0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_out0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_out0_w = leds_storage;
assign csr_bankarray_csrbank3_sel = (csr_bankarray_interface3_bank_bus_adr[13:9] == 3'd4);
assign csr_bankarray_csrbank3_dfii_control0_r = csr_bankarray_interface3_bank_bus_dat_w[3:0];
always @(*) begin
    csr_bankarray_csrbank3_dfii_control0_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_control0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank3_dfii_control0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_control0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_dfii_pi0_command0_r = csr_bankarray_interface3_bank_bus_dat_w[7:0];
always @(*) begin
    csr_bankarray_csrbank3_dfii_pi0_command0_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_pi0_command0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank3_dfii_pi0_command0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_pi0_command0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign basesoc_sdram_command_issue_r = csr_bankarray_interface3_bank_bus_dat_w[0];
always @(*) begin
    basesoc_sdram_command_issue_re <= 1'd0;
    basesoc_sdram_command_issue_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd2))) begin
        basesoc_sdram_command_issue_re <= csr_bankarray_interface3_bank_bus_we;
        basesoc_sdram_command_issue_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_dfii_pi0_address0_r = csr_bankarray_interface3_bank_bus_dat_w[10:0];
always @(*) begin
    csr_bankarray_csrbank3_dfii_pi0_address0_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_pi0_address0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank3_dfii_pi0_address0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_pi0_address0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_dfii_pi0_baddress0_r = csr_bankarray_interface3_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank3_dfii_pi0_baddress0_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_pi0_baddress0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank3_dfii_pi0_baddress0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_pi0_baddress0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_dfii_pi0_wrdata0_r = csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank3_dfii_pi0_wrdata0_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_pi0_wrdata0_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank3_dfii_pi0_wrdata0_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_pi0_wrdata0_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign csr_bankarray_csrbank3_dfii_pi0_rddata_r = csr_bankarray_interface3_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank3_dfii_pi0_rddata_re <= 1'd0;
    csr_bankarray_csrbank3_dfii_pi0_rddata_we <= 1'd0;
    if ((csr_bankarray_csrbank3_sel & (csr_bankarray_interface3_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank3_dfii_pi0_rddata_re <= csr_bankarray_interface3_bank_bus_we;
        csr_bankarray_csrbank3_dfii_pi0_rddata_we <= csr_bankarray_interface3_bank_bus_re;
    end
end
assign basesoc_sdram_sel = basesoc_sdram_storage[0];
assign basesoc_sdram_cke = basesoc_sdram_storage[1];
assign basesoc_sdram_odt = basesoc_sdram_storage[2];
assign basesoc_sdram_reset_n = basesoc_sdram_storage[3];
assign csr_bankarray_csrbank3_dfii_control0_w = basesoc_sdram_storage;
assign basesoc_sdram_csrfield_cs = basesoc_sdram_command_storage[0];
assign basesoc_sdram_csrfield_we = basesoc_sdram_command_storage[1];
assign basesoc_sdram_csrfield_cas = basesoc_sdram_command_storage[2];
assign basesoc_sdram_csrfield_ras = basesoc_sdram_command_storage[3];
assign basesoc_sdram_csrfield_wren = basesoc_sdram_command_storage[4];
assign basesoc_sdram_csrfield_rden = basesoc_sdram_command_storage[5];
assign basesoc_sdram_csrfield_cs_top = basesoc_sdram_command_storage[6];
assign basesoc_sdram_csrfield_cs_bottom = basesoc_sdram_command_storage[7];
assign csr_bankarray_csrbank3_dfii_pi0_command0_w = basesoc_sdram_command_storage;
assign csr_bankarray_csrbank3_dfii_pi0_address0_w = basesoc_sdram_address_storage;
assign csr_bankarray_csrbank3_dfii_pi0_baddress0_w = basesoc_sdram_baddress_storage;
assign csr_bankarray_csrbank3_dfii_pi0_wrdata0_w = basesoc_sdram_wrdata_storage;
assign csr_bankarray_csrbank3_dfii_pi0_rddata_w = basesoc_sdram_rddata_status;
assign basesoc_sdram_rddata_we = csr_bankarray_csrbank3_dfii_pi0_rddata_we;
assign csr_bankarray_csrbank4_sel = (csr_bankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign csr_bankarray_csrbank4_load0_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_load0_re <= 1'd0;
    csr_bankarray_csrbank4_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank4_load0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_load0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_reload0_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_reload0_re <= 1'd0;
    csr_bankarray_csrbank4_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank4_reload0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_reload0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_en0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_en0_re <= 1'd0;
    csr_bankarray_csrbank4_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank4_en0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_en0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_update_value0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_update_value0_re <= 1'd0;
    csr_bankarray_csrbank4_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank4_update_value0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_update_value0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_value_r = csr_bankarray_interface4_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank4_value_re <= 1'd0;
    csr_bankarray_csrbank4_value_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank4_value_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_value_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_status_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_status_re <= 1'd0;
    csr_bankarray_csrbank4_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank4_ev_status_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_status_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_pending_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank4_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank4_ev_pending_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_pending_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_ev_enable0_r = csr_bankarray_interface4_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank4_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank4_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank4_sel & (csr_bankarray_interface4_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank4_ev_enable0_re <= csr_bankarray_interface4_bank_bus_we;
        csr_bankarray_csrbank4_ev_enable0_we <= csr_bankarray_interface4_bank_bus_re;
    end
end
assign csr_bankarray_csrbank4_load0_w = basesoc_timer_load_storage;
assign csr_bankarray_csrbank4_reload0_w = basesoc_timer_reload_storage;
assign csr_bankarray_csrbank4_en0_w = basesoc_timer_en_storage;
assign csr_bankarray_csrbank4_update_value0_w = basesoc_timer_update_value_storage;
assign csr_bankarray_csrbank4_value_w = basesoc_timer_value_status;
assign basesoc_timer_value_we = csr_bankarray_csrbank4_value_we;
assign basesoc_timer_status_status = basesoc_timer_zero0;
assign csr_bankarray_csrbank4_ev_status_w = basesoc_timer_status_status;
assign basesoc_timer_status_we = csr_bankarray_csrbank4_ev_status_we;
assign basesoc_timer_pending_status = basesoc_timer_zero1;
assign csr_bankarray_csrbank4_ev_pending_w = basesoc_timer_pending_status;
assign basesoc_timer_pending_we = csr_bankarray_csrbank4_ev_pending_we;
assign basesoc_timer_zero2 = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank4_ev_enable0_w = basesoc_timer_enable_storage;
assign csr_bankarray_csrbank5_sel = (csr_bankarray_interface5_bank_bus_adr[13:9] == 3'd6);
assign basesoc_uart_rxtx_r = csr_bankarray_interface5_bank_bus_dat_w[7:0];
always @(*) begin
    basesoc_uart_rxtx_re <= 1'd0;
    basesoc_uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd0))) begin
        basesoc_uart_rxtx_re <= csr_bankarray_interface5_bank_bus_we;
        basesoc_uart_rxtx_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_txfull_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_txfull_re <= 1'd0;
    csr_bankarray_csrbank5_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank5_txfull_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_txfull_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_rxempty_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_rxempty_re <= 1'd0;
    csr_bankarray_csrbank5_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank5_rxempty_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_rxempty_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_ev_status_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank5_ev_status_re <= 1'd0;
    csr_bankarray_csrbank5_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank5_ev_status_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_ev_status_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_ev_pending_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank5_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank5_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank5_ev_pending_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_ev_pending_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_ev_enable0_r = csr_bankarray_interface5_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank5_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank5_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank5_ev_enable0_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_ev_enable0_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_txempty_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_txempty_re <= 1'd0;
    csr_bankarray_csrbank5_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank5_txempty_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_txempty_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_rxfull_r = csr_bankarray_interface5_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank5_rxfull_re <= 1'd0;
    csr_bankarray_csrbank5_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank5_sel & (csr_bankarray_interface5_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank5_rxfull_re <= csr_bankarray_interface5_bank_bus_we;
        csr_bankarray_csrbank5_rxfull_we <= csr_bankarray_interface5_bank_bus_re;
    end
end
assign csr_bankarray_csrbank5_txfull_w = basesoc_uart_txfull_status;
assign basesoc_uart_txfull_we = csr_bankarray_csrbank5_txfull_we;
assign csr_bankarray_csrbank5_rxempty_w = basesoc_uart_rxempty_status;
assign basesoc_uart_rxempty_we = csr_bankarray_csrbank5_rxempty_we;
always @(*) begin
    basesoc_uart_status_status <= 2'd0;
    basesoc_uart_status_status[0] <= basesoc_uart_tx0;
    basesoc_uart_status_status[1] <= basesoc_uart_rx0;
end
assign csr_bankarray_csrbank5_ev_status_w = basesoc_uart_status_status;
assign basesoc_uart_status_we = csr_bankarray_csrbank5_ev_status_we;
always @(*) begin
    basesoc_uart_pending_status <= 2'd0;
    basesoc_uart_pending_status[0] <= basesoc_uart_tx1;
    basesoc_uart_pending_status[1] <= basesoc_uart_rx1;
end
assign csr_bankarray_csrbank5_ev_pending_w = basesoc_uart_pending_status;
assign basesoc_uart_pending_we = csr_bankarray_csrbank5_ev_pending_we;
assign basesoc_uart_tx2 = basesoc_uart_enable_storage[0];
assign basesoc_uart_rx2 = basesoc_uart_enable_storage[1];
assign csr_bankarray_csrbank5_ev_enable0_w = basesoc_uart_enable_storage;
assign csr_bankarray_csrbank5_txempty_w = basesoc_uart_txempty_status;
assign basesoc_uart_txempty_we = csr_bankarray_csrbank5_txempty_we;
assign csr_bankarray_csrbank5_rxfull_w = basesoc_uart_rxfull_status;
assign basesoc_uart_rxfull_we = csr_bankarray_csrbank5_rxfull_we;
assign csr_interconnect_adr = interface1_adr;
assign csr_interconnect_re = interface1_re;
assign csr_interconnect_we = interface1_we;
assign csr_interconnect_dat_w = interface1_dat_w;
assign interface1_dat_r = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface3_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface4_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface5_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface3_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface4_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface5_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface3_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface4_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface5_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_interface3_bank_bus_dat_r) | csr_bankarray_interface4_bank_bus_dat_r) | csr_bankarray_interface5_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    rhs_array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed0 <= basesoc_ibus_adr;
        end
        default: begin
            rhs_array_muxed0 <= basesoc_dbus_adr;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed1 <= basesoc_ibus_dat_w;
        end
        default: begin
            rhs_array_muxed1 <= basesoc_dbus_dat_w;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed2 <= basesoc_ibus_sel;
        end
        default: begin
            rhs_array_muxed2 <= basesoc_dbus_sel;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed3 <= basesoc_ibus_cyc;
        end
        default: begin
            rhs_array_muxed3 <= basesoc_dbus_cyc;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed4 <= basesoc_ibus_stb;
        end
        default: begin
            rhs_array_muxed4 <= basesoc_dbus_stb;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed5 <= basesoc_ibus_we;
        end
        default: begin
            rhs_array_muxed5 <= basesoc_dbus_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed6 <= basesoc_ibus_cti;
        end
        default: begin
            rhs_array_muxed6 <= basesoc_dbus_cti;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            rhs_array_muxed7 <= basesoc_ibus_bte;
        end
        default: begin
            rhs_array_muxed7 <= basesoc_dbus_bte;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed8 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed8 <= basesoc_sdram_choose_cmd_valids[0];
        end
        1'd1: begin
            rhs_array_muxed8 <= basesoc_sdram_choose_cmd_valids[1];
        end
        2'd2: begin
            rhs_array_muxed8 <= basesoc_sdram_choose_cmd_valids[2];
        end
        default: begin
            rhs_array_muxed8 <= basesoc_sdram_choose_cmd_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_array_muxed9 <= 11'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed9 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_array_muxed9 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_array_muxed9 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_array_muxed9 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed10 <= 2'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed10 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_array_muxed10 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_array_muxed10 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_array_muxed10 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed11 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed11 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_array_muxed11 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_array_muxed11 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_array_muxed11 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed12 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed12 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_array_muxed12 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_array_muxed12 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_array_muxed12 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed13 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed13 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_array_muxed13 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_array_muxed13 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_array_muxed13 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_array_muxed0 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_array_muxed0 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_array_muxed0 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_array_muxed0 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_array_muxed0 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_array_muxed1 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_array_muxed1 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_array_muxed1 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_array_muxed1 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_array_muxed1 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_array_muxed2 <= 1'd0;
    case (basesoc_sdram_choose_cmd_grant)
        1'd0: begin
            t_array_muxed2 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_array_muxed2 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_array_muxed2 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_array_muxed2 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed14 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed14 <= basesoc_sdram_choose_req_valids[0];
        end
        1'd1: begin
            rhs_array_muxed14 <= basesoc_sdram_choose_req_valids[1];
        end
        2'd2: begin
            rhs_array_muxed14 <= basesoc_sdram_choose_req_valids[2];
        end
        default: begin
            rhs_array_muxed14 <= basesoc_sdram_choose_req_valids[3];
        end
    endcase
end
always @(*) begin
    rhs_array_muxed15 <= 11'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed15 <= basesoc_sdram_bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_array_muxed15 <= basesoc_sdram_bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_array_muxed15 <= basesoc_sdram_bankmachine2_cmd_payload_a;
        end
        default: begin
            rhs_array_muxed15 <= basesoc_sdram_bankmachine3_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed16 <= 2'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed16 <= basesoc_sdram_bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_array_muxed16 <= basesoc_sdram_bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_array_muxed16 <= basesoc_sdram_bankmachine2_cmd_payload_ba;
        end
        default: begin
            rhs_array_muxed16 <= basesoc_sdram_bankmachine3_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed17 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed17 <= basesoc_sdram_bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_array_muxed17 <= basesoc_sdram_bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_array_muxed17 <= basesoc_sdram_bankmachine2_cmd_payload_is_read;
        end
        default: begin
            rhs_array_muxed17 <= basesoc_sdram_bankmachine3_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed18 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed18 <= basesoc_sdram_bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_array_muxed18 <= basesoc_sdram_bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_array_muxed18 <= basesoc_sdram_bankmachine2_cmd_payload_is_write;
        end
        default: begin
            rhs_array_muxed18 <= basesoc_sdram_bankmachine3_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed19 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            rhs_array_muxed19 <= basesoc_sdram_bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_array_muxed19 <= basesoc_sdram_bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_array_muxed19 <= basesoc_sdram_bankmachine2_cmd_payload_is_cmd;
        end
        default: begin
            rhs_array_muxed19 <= basesoc_sdram_bankmachine3_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_array_muxed3 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_array_muxed3 <= basesoc_sdram_bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_array_muxed3 <= basesoc_sdram_bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_array_muxed3 <= basesoc_sdram_bankmachine2_cmd_payload_cas;
        end
        default: begin
            t_array_muxed3 <= basesoc_sdram_bankmachine3_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_array_muxed4 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_array_muxed4 <= basesoc_sdram_bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_array_muxed4 <= basesoc_sdram_bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_array_muxed4 <= basesoc_sdram_bankmachine2_cmd_payload_ras;
        end
        default: begin
            t_array_muxed4 <= basesoc_sdram_bankmachine3_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_array_muxed5 <= 1'd0;
    case (basesoc_sdram_choose_req_grant)
        1'd0: begin
            t_array_muxed5 <= basesoc_sdram_bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_array_muxed5 <= basesoc_sdram_bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_array_muxed5 <= basesoc_sdram_bankmachine2_cmd_payload_we;
        end
        default: begin
            t_array_muxed5 <= basesoc_sdram_bankmachine3_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed20 <= 19'd0;
    case (roundrobin0_grant)
        default: begin
            rhs_array_muxed20 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed21 <= 1'd0;
    case (roundrobin0_grant)
        default: begin
            rhs_array_muxed21 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed22 <= 1'd0;
    case (roundrobin0_grant)
        default: begin
            rhs_array_muxed22 <= (((basesoc_port_cmd_payload_addr[9:8] == 1'd0) & (~(((locked0 | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed23 <= 19'd0;
    case (roundrobin1_grant)
        default: begin
            rhs_array_muxed23 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed24 <= 1'd0;
    case (roundrobin1_grant)
        default: begin
            rhs_array_muxed24 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed25 <= 1'd0;
    case (roundrobin1_grant)
        default: begin
            rhs_array_muxed25 <= (((basesoc_port_cmd_payload_addr[9:8] == 1'd1) & (~(((locked1 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed26 <= 19'd0;
    case (roundrobin2_grant)
        default: begin
            rhs_array_muxed26 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed27 <= 1'd0;
    case (roundrobin2_grant)
        default: begin
            rhs_array_muxed27 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed28 <= 1'd0;
    case (roundrobin2_grant)
        default: begin
            rhs_array_muxed28 <= (((basesoc_port_cmd_payload_addr[9:8] == 2'd2) & (~(((locked2 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank3_lock & (roundrobin3_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed29 <= 19'd0;
    case (roundrobin3_grant)
        default: begin
            rhs_array_muxed29 <= {basesoc_port_cmd_payload_addr[20:10], basesoc_port_cmd_payload_addr[7:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed30 <= 1'd0;
    case (roundrobin3_grant)
        default: begin
            rhs_array_muxed30 <= basesoc_port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed31 <= 1'd0;
    case (roundrobin3_grant)
        default: begin
            rhs_array_muxed31 <= (((basesoc_port_cmd_payload_addr[9:8] == 2'd3) & (~(((locked3 | (basesoc_sdram_interface_bank0_lock & (roundrobin0_grant == 1'd0))) | (basesoc_sdram_interface_bank1_lock & (roundrobin1_grant == 1'd0))) | (basesoc_sdram_interface_bank2_lock & (roundrobin2_grant == 1'd0))))) & basesoc_port_cmd_valid);
        end
    endcase
end
always @(*) begin
    array_muxed0 <= 2'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed0 <= basesoc_sdram_nop_ba;
        end
        1'd1: begin
            array_muxed0 <= basesoc_sdram_choose_req_cmd_payload_ba;
        end
        2'd2: begin
            array_muxed0 <= basesoc_sdram_choose_req_cmd_payload_ba;
        end
        default: begin
            array_muxed0 <= basesoc_sdram_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 11'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed1 <= basesoc_sdram_nop_a;
        end
        1'd1: begin
            array_muxed1 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        2'd2: begin
            array_muxed1 <= basesoc_sdram_choose_req_cmd_payload_a;
        end
        default: begin
            array_muxed1 <= basesoc_sdram_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed2 <= 1'd0;
        end
        1'd1: begin
            array_muxed2 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        2'd2: begin
            array_muxed2 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_cas);
        end
        default: begin
            array_muxed2 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed3 <= 1'd0;
        end
        1'd1: begin
            array_muxed3 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        2'd2: begin
            array_muxed3 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_ras);
        end
        default: begin
            array_muxed3 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed4 <= 1'd0;
        end
        1'd1: begin
            array_muxed4 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        2'd2: begin
            array_muxed4 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_we);
        end
        default: begin
            array_muxed4 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_we);
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed5 <= 1'd0;
        end
        1'd1: begin
            array_muxed5 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        2'd2: begin
            array_muxed5 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_read);
        end
        default: begin
            array_muxed5 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 1'd0;
    case (basesoc_sdram_steerer_sel)
        1'd0: begin
            array_muxed6 <= 1'd0;
        end
        1'd1: begin
            array_muxed6 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        2'd2: begin
            array_muxed6 <= ((basesoc_sdram_choose_req_cmd_valid & basesoc_sdram_choose_req_cmd_ready) & basesoc_sdram_choose_req_cmd_payload_is_write);
        end
        default: begin
            array_muxed6 <= ((basesoc_sdram_cmd_valid & basesoc_sdram_cmd_ready) & basesoc_sdram_cmd_payload_is_write);
        end
    endcase
end
assign basesoc_rx_rx = multiregimpl0_regs1;
assign sdrio_clk = sys_clk;
assign sdrio_clk_1 = sys_clk;
assign sdrio_clk_2 = sys_clk;
assign sdrio_clk_3 = sys_clk;
assign sdrio_clk_4 = sys_clk;
assign sdrio_clk_5 = sys_clk;
assign sdrio_clk_6 = sys_clk;
assign sdrio_clk_7 = sys_clk;
assign sdrio_clk_8 = sys_clk;
assign sdrio_clk_9 = sys_clk;
assign sdrio_clk_10 = sys_clk;
assign sdrio_clk_11 = sys_clk;
assign sdrio_clk_12 = sys_clk;
assign sdrio_clk_13 = sys_clk;
assign sdrio_clk_14 = sys_clk;
assign sdrio_clk_15 = sys_clk;
assign sdrio_clk_16 = sys_clk;
assign sdrio_clk_17 = sys_clk;
assign sdrio_clk_18 = sys_clk;
assign sdrio_clk_19 = sys_clk;
assign sdrio_clk_20 = sys_clk;
assign sdrio_clk_21 = sys_clk;
assign sdrio_clk_22 = sys_clk;
assign sdrio_clk_23 = sys_clk;
assign sdrio_clk_24 = sys_clk;
assign sdrio_clk_25 = sys_clk;
assign sdrio_clk_26 = sys_clk;
assign sdrio_clk_27 = sys_clk;
assign sdrio_clk_28 = sys_clk;
assign sdrio_clk_29 = sys_clk;
assign sdrio_clk_30 = sys_clk;
assign sdrio_clk_31 = sys_clk;
assign sdrio_clk_32 = sys_clk;
assign sdrio_clk_33 = sys_clk;
assign sdrio_clk_34 = sys_clk;
assign sdrio_clk_35 = sys_clk;
assign sdrio_clk_36 = sys_clk;
assign sdrio_clk_37 = sys_clk;
assign sdrio_clk_38 = sys_clk;
assign sdrio_clk_39 = sys_clk;
assign sdrio_clk_40 = sys_clk;
assign sdrio_clk_41 = sys_clk;
assign sdrio_clk_42 = sys_clk;
assign sdrio_clk_43 = sys_clk;
assign sdrio_clk_44 = sys_clk;
assign sdrio_clk_45 = sys_clk;
assign sdrio_clk_46 = sys_clk;
assign sdrio_clk_47 = sys_clk;
assign sdrio_clk_48 = sys_clk;
assign sdrio_clk_49 = sys_clk;
assign sdrio_clk_50 = sys_clk;
assign sdrio_clk_51 = sys_clk;
assign sdrio_clk_52 = sys_clk;
assign sdrio_clk_53 = sys_clk;
assign buttons_status = multiregimpl1_regs1;
assign sdrio_clk_54 = sys_clk;
assign sdrio_clk_55 = sys_clk;
assign sdrio_clk_56 = sys_clk;
assign sdrio_clk_57 = sys_clk;
assign sdrio_clk_58 = sys_clk;
assign sdrio_clk_59 = sys_clk;
assign sdrio_clk_60 = sys_clk;
assign sdrio_clk_61 = sys_clk;
assign sdrio_clk_62 = sys_clk;
assign sdrio_clk_63 = sys_clk;
assign sdrio_clk_64 = sys_clk;
assign sdrio_clk_65 = sys_clk;
assign sdrio_clk_66 = sys_clk;
assign sdrio_clk_67 = sys_clk;
assign sdrio_clk_68 = sys_clk;
assign sdrio_clk_69 = sys_clk;
assign sdrio_clk_70 = sys_clk;
assign sdrio_clk_71 = sys_clk;
assign sdrio_clk_72 = sys_clk;
assign sdrio_clk_73 = sys_clk;
assign sdrio_clk_74 = sys_clk;
assign sdrio_clk_75 = sys_clk;
assign sdrio_clk_76 = sys_clk;
assign sdrio_clk_77 = sys_clk;
assign sdrio_clk_78 = sys_clk;
assign sdrio_clk_79 = sys_clk;
assign sdrio_clk_80 = sys_clk;
assign sdrio_clk_81 = sys_clk;
assign sdrio_clk_82 = sys_clk;
assign sdrio_clk_83 = sys_clk;
assign sdrio_clk_84 = sys_clk;
assign sdrio_clk_85 = sys_clk;
assign sdrio_clk_86 = sys_clk;
assign sdrio_clk_87 = sys_clk;
assign sdrio_clk_88 = sys_clk;
assign sdrio_clk_89 = sys_clk;
assign sdrio_clk_90 = sys_clk;
assign sdrio_clk_91 = sys_clk;
assign sdrio_clk_92 = sys_clk;
assign sdrio_clk_93 = sys_clk;
assign sdrio_clk_94 = sys_clk;
assign sdrio_clk_95 = sys_clk;
assign sdrio_clk_96 = sys_clk;
assign sdrio_clk_97 = sys_clk;
assign sdrio_clk_98 = sys_clk;
assign sdrio_clk_99 = sys_clk;
assign sdrio_clk_100 = sys_clk;
assign sdrio_clk_101 = sys_clk;
assign sdrio_clk_102 = sys_clk;
assign sdrio_clk_103 = sys_clk;
assign sdrio_clk_104 = sys_clk;
assign sdrio_clk_105 = sys_clk;
assign sdrio_clk_106 = sys_clk;
assign sdrio_clk_107 = sys_clk;
assign sdrio_clk_108 = sys_clk;
assign sdrio_clk_109 = sys_clk;
assign sdrio_clk_110 = sys_clk;
assign sdrio_clk_111 = sys_clk;
assign sdrio_clk_112 = sys_clk;
assign sdrio_clk_113 = sys_clk;
assign sdrio_clk_114 = sys_clk;
assign sdrio_clk_115 = sys_clk;
assign sdrio_clk_116 = sys_clk;
assign sdrio_clk_117 = sys_clk;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    if ((~crg_por_done)) begin
        crg_por_count <= (crg_por_count - 1'd1);
    end
    if (por_rst) begin
        crg_por_count <= 16'd65535;
    end
end

always @(posedge sdrio_clk) begin
    O_sdram_cs_n <= dfi_p0_cs_n;
    O_sdram_addr[0] <= dfi_p0_address[0];
    O_sdram_addr[1] <= dfi_p0_address[1];
    O_sdram_addr[2] <= dfi_p0_address[2];
    O_sdram_addr[3] <= dfi_p0_address[3];
    O_sdram_addr[4] <= dfi_p0_address[4];
    O_sdram_addr[5] <= dfi_p0_address[5];
    O_sdram_addr[6] <= dfi_p0_address[6];
    O_sdram_addr[7] <= dfi_p0_address[7];
    O_sdram_addr[8] <= dfi_p0_address[8];
    O_sdram_addr[9] <= dfi_p0_address[9];
    O_sdram_addr[10] <= dfi_p0_address[10];
    O_sdram_ba[0] <= dfi_p0_bank[0];
    O_sdram_ba[1] <= dfi_p0_bank[1];
    O_sdram_ras_n <= dfi_p0_ras_n;
    O_sdram_cas_n <= dfi_p0_cas_n;
    O_sdram_wen_n <= dfi_p0_we_n;
    O_sdram_cke <= dfi_p0_cke;
    inferedsdrtristate0_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate1_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate2_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate3_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate4_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate5_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate6_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate7_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate8_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate9_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate10_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate11_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate12_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate13_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate14_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate15_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate16_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate17_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate18_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate19_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate20_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate21_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate22_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate23_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate24_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate25_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate26_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate27_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate28_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate29_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate30_oe <= dfi_p0_wrdata_en;
    inferedsdrtristate31_oe <= dfi_p0_wrdata_en;
    O_sdram_dqm[0] <= (dfi_p0_wrdata_en & dfi_p0_wrdata_mask[0]);
    O_sdram_dqm[1] <= (dfi_p0_wrdata_en & dfi_p0_wrdata_mask[1]);
    O_sdram_dqm[2] <= (dfi_p0_wrdata_en & dfi_p0_wrdata_mask[2]);
    O_sdram_dqm[3] <= (dfi_p0_wrdata_en & dfi_p0_wrdata_mask[3]);
    inferedsdrtristate0__o <= dfi_p0_wrdata[0];
    dfi_p0_rddata[0] <= inferedsdrtristate0__i;
    inferedsdrtristate1__o <= dfi_p0_wrdata[1];
    dfi_p0_rddata[1] <= inferedsdrtristate1__i;
    inferedsdrtristate2__o <= dfi_p0_wrdata[2];
    dfi_p0_rddata[2] <= inferedsdrtristate2__i;
    inferedsdrtristate3__o <= dfi_p0_wrdata[3];
    dfi_p0_rddata[3] <= inferedsdrtristate3__i;
    inferedsdrtristate4__o <= dfi_p0_wrdata[4];
    dfi_p0_rddata[4] <= inferedsdrtristate4__i;
    inferedsdrtristate5__o <= dfi_p0_wrdata[5];
    dfi_p0_rddata[5] <= inferedsdrtristate5__i;
    inferedsdrtristate6__o <= dfi_p0_wrdata[6];
    dfi_p0_rddata[6] <= inferedsdrtristate6__i;
    inferedsdrtristate7__o <= dfi_p0_wrdata[7];
    dfi_p0_rddata[7] <= inferedsdrtristate7__i;
    inferedsdrtristate8__o <= dfi_p0_wrdata[8];
    dfi_p0_rddata[8] <= inferedsdrtristate8__i;
    inferedsdrtristate9__o <= dfi_p0_wrdata[9];
    dfi_p0_rddata[9] <= inferedsdrtristate9__i;
    inferedsdrtristate10__o <= dfi_p0_wrdata[10];
    dfi_p0_rddata[10] <= inferedsdrtristate10__i;
    inferedsdrtristate11__o <= dfi_p0_wrdata[11];
    dfi_p0_rddata[11] <= inferedsdrtristate11__i;
    inferedsdrtristate12__o <= dfi_p0_wrdata[12];
    dfi_p0_rddata[12] <= inferedsdrtristate12__i;
    inferedsdrtristate13__o <= dfi_p0_wrdata[13];
    dfi_p0_rddata[13] <= inferedsdrtristate13__i;
    inferedsdrtristate14__o <= dfi_p0_wrdata[14];
    dfi_p0_rddata[14] <= inferedsdrtristate14__i;
    inferedsdrtristate15__o <= dfi_p0_wrdata[15];
    dfi_p0_rddata[15] <= inferedsdrtristate15__i;
    inferedsdrtristate16__o <= dfi_p0_wrdata[16];
    dfi_p0_rddata[16] <= inferedsdrtristate16__i;
    inferedsdrtristate17__o <= dfi_p0_wrdata[17];
    dfi_p0_rddata[17] <= inferedsdrtristate17__i;
    inferedsdrtristate18__o <= dfi_p0_wrdata[18];
    dfi_p0_rddata[18] <= inferedsdrtristate18__i;
    inferedsdrtristate19__o <= dfi_p0_wrdata[19];
    dfi_p0_rddata[19] <= inferedsdrtristate19__i;
    inferedsdrtristate20__o <= dfi_p0_wrdata[20];
    dfi_p0_rddata[20] <= inferedsdrtristate20__i;
    inferedsdrtristate21__o <= dfi_p0_wrdata[21];
    dfi_p0_rddata[21] <= inferedsdrtristate21__i;
    inferedsdrtristate22__o <= dfi_p0_wrdata[22];
    dfi_p0_rddata[22] <= inferedsdrtristate22__i;
    inferedsdrtristate23__o <= dfi_p0_wrdata[23];
    dfi_p0_rddata[23] <= inferedsdrtristate23__i;
    inferedsdrtristate24__o <= dfi_p0_wrdata[24];
    dfi_p0_rddata[24] <= inferedsdrtristate24__i;
    inferedsdrtristate25__o <= dfi_p0_wrdata[25];
    dfi_p0_rddata[25] <= inferedsdrtristate25__i;
    inferedsdrtristate26__o <= dfi_p0_wrdata[26];
    dfi_p0_rddata[26] <= inferedsdrtristate26__i;
    inferedsdrtristate27__o <= dfi_p0_wrdata[27];
    dfi_p0_rddata[27] <= inferedsdrtristate27__i;
    inferedsdrtristate28__o <= dfi_p0_wrdata[28];
    dfi_p0_rddata[28] <= inferedsdrtristate28__i;
    inferedsdrtristate29__o <= dfi_p0_wrdata[29];
    dfi_p0_rddata[29] <= inferedsdrtristate29__i;
    inferedsdrtristate30__o <= dfi_p0_wrdata[30];
    dfi_p0_rddata[30] <= inferedsdrtristate30__i;
    inferedsdrtristate31__o <= dfi_p0_wrdata[31];
    dfi_p0_rddata[31] <= inferedsdrtristate31__i;
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((basesoc_bus_errors != 32'd4294967295)) begin
        if (basesoc_bus_error) begin
            basesoc_bus_errors <= (basesoc_bus_errors + 1'd1);
        end
    end
    basesoc_basesoc_ram_bus_ack <= 1'd0;
    if (((basesoc_basesoc_ram_bus_cyc & basesoc_basesoc_ram_bus_stb) & ((~basesoc_basesoc_ram_bus_ack) | basesoc_basesoc_adr_burst))) begin
        basesoc_basesoc_ram_bus_ack <= 1'd1;
    end
    basesoc_ram_bus_ram_bus_ack <= 1'd0;
    if (((basesoc_ram_bus_ram_bus_cyc & basesoc_ram_bus_ram_bus_stb) & ((~basesoc_ram_bus_ram_bus_ack) | basesoc_ram_adr_burst))) begin
        basesoc_ram_bus_ram_bus_ack <= 1'd1;
    end
    {basesoc_tx_tick, basesoc_tx_phase} <= 24'd10307921;
    if (basesoc_tx_enable) begin
        {basesoc_tx_tick, basesoc_tx_phase} <= (basesoc_tx_phase + 24'd10307921);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (basesoc_tx_count_rs232phytx_next_value_ce0) begin
        basesoc_tx_count <= basesoc_tx_count_rs232phytx_next_value0;
    end
    if (basesoc_serial_tx_rs232phytx_next_value_ce1) begin
        serial_tx <= basesoc_serial_tx_rs232phytx_next_value1;
    end
    if (basesoc_tx_data_rs232phytx_next_value_ce2) begin
        basesoc_tx_data <= basesoc_tx_data_rs232phytx_next_value2;
    end
    basesoc_rx_rx_d <= basesoc_rx_rx;
    {basesoc_rx_tick, basesoc_rx_phase} <= 32'd2147483648;
    if (basesoc_rx_enable) begin
        {basesoc_rx_tick, basesoc_rx_phase} <= (basesoc_rx_phase + 24'd10307921);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (basesoc_rx_count_rs232phyrx_next_value_ce0) begin
        basesoc_rx_count <= basesoc_rx_count_rs232phyrx_next_value0;
    end
    if (basesoc_rx_data_rs232phyrx_next_value_ce1) begin
        basesoc_rx_data <= basesoc_rx_data_rs232phyrx_next_value1;
    end
    if (basesoc_uart_tx_clear) begin
        basesoc_uart_tx_pending <= 1'd0;
    end
    basesoc_uart_tx_trigger_d <= basesoc_uart_tx_trigger;
    if ((basesoc_uart_tx_trigger & (~basesoc_uart_tx_trigger_d))) begin
        basesoc_uart_tx_pending <= 1'd1;
    end
    if (basesoc_uart_rx_clear) begin
        basesoc_uart_rx_pending <= 1'd0;
    end
    basesoc_uart_rx_trigger_d <= basesoc_uart_rx_trigger;
    if ((basesoc_uart_rx_trigger & (~basesoc_uart_rx_trigger_d))) begin
        basesoc_uart_rx_pending <= 1'd1;
    end
    if (basesoc_uart_tx_fifo_syncfifo_re) begin
        basesoc_uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_tx_fifo_re) begin
            basesoc_uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        basesoc_uart_tx_fifo_produce <= (basesoc_uart_tx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_tx_fifo_do_read) begin
        basesoc_uart_tx_fifo_consume <= (basesoc_uart_tx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_tx_fifo_syncfifo_we & basesoc_uart_tx_fifo_syncfifo_writable) & (~basesoc_uart_tx_fifo_replace))) begin
        if ((~basesoc_uart_tx_fifo_do_read)) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_tx_fifo_do_read) begin
            basesoc_uart_tx_fifo_level0 <= (basesoc_uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_uart_rx_fifo_syncfifo_re) begin
        basesoc_uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (basesoc_uart_rx_fifo_re) begin
            basesoc_uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        basesoc_uart_rx_fifo_produce <= (basesoc_uart_rx_fifo_produce + 1'd1);
    end
    if (basesoc_uart_rx_fifo_do_read) begin
        basesoc_uart_rx_fifo_consume <= (basesoc_uart_rx_fifo_consume + 1'd1);
    end
    if (((basesoc_uart_rx_fifo_syncfifo_we & basesoc_uart_rx_fifo_syncfifo_writable) & (~basesoc_uart_rx_fifo_replace))) begin
        if ((~basesoc_uart_rx_fifo_do_read)) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (basesoc_uart_rx_fifo_do_read) begin
            basesoc_uart_rx_fifo_level0 <= (basesoc_uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (basesoc_timer_en_storage) begin
        if ((basesoc_timer_value == 1'd0)) begin
            basesoc_timer_value <= basesoc_timer_reload_storage;
        end else begin
            basesoc_timer_value <= (basesoc_timer_value - 1'd1);
        end
    end else begin
        basesoc_timer_value <= basesoc_timer_load_storage;
    end
    if (basesoc_timer_update_value_re) begin
        basesoc_timer_value_status <= basesoc_timer_value;
    end
    if (basesoc_timer_zero_clear) begin
        basesoc_timer_zero_pending <= 1'd0;
    end
    basesoc_timer_zero_trigger_d <= basesoc_timer_zero_trigger;
    if ((basesoc_timer_zero_trigger & (~basesoc_timer_zero_trigger_d))) begin
        basesoc_timer_zero_pending <= 1'd1;
    end
    rddata_en <= {rddata_en, dfi_p0_rddata_en};
    dfi_p0_rddata_valid <= rddata_en[2];
    if (basesoc_sdram_csr_dfi_p0_rddata_valid) begin
        basesoc_sdram_rddata_status <= basesoc_sdram_csr_dfi_p0_rddata;
    end
    if ((basesoc_sdram_timer_wait & (~basesoc_sdram_timer_done0))) begin
        basesoc_sdram_timer_count1 <= (basesoc_sdram_timer_count1 - 1'd1);
    end else begin
        basesoc_sdram_timer_count1 <= 10'd749;
    end
    basesoc_sdram_postponer_req_o <= 1'd0;
    if (basesoc_sdram_postponer_req_i) begin
        basesoc_sdram_postponer_count <= (basesoc_sdram_postponer_count - 1'd1);
        if ((basesoc_sdram_postponer_count == 1'd0)) begin
            basesoc_sdram_postponer_count <= 1'd0;
            basesoc_sdram_postponer_req_o <= 1'd1;
        end
    end
    if (basesoc_sdram_sequencer_start0) begin
        basesoc_sdram_sequencer_count <= 1'd0;
    end else begin
        if (basesoc_sdram_sequencer_done1) begin
            if ((basesoc_sdram_sequencer_count != 1'd0)) begin
                basesoc_sdram_sequencer_count <= (basesoc_sdram_sequencer_count - 1'd1);
            end
        end
    end
    basesoc_sdram_cmd_payload_a <= 1'd0;
    basesoc_sdram_cmd_payload_ba <= 1'd0;
    basesoc_sdram_cmd_payload_cas <= 1'd0;
    basesoc_sdram_cmd_payload_ras <= 1'd0;
    basesoc_sdram_cmd_payload_we <= 1'd0;
    basesoc_sdram_sequencer_done1 <= 1'd0;
    if ((basesoc_sdram_sequencer_start1 & (basesoc_sdram_sequencer_counter == 1'd0))) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_counter == 1'd1)) begin
        basesoc_sdram_cmd_payload_a <= 11'd1024;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd1;
        basesoc_sdram_cmd_payload_ras <= 1'd1;
        basesoc_sdram_cmd_payload_we <= 1'd0;
    end
    if ((basesoc_sdram_sequencer_counter == 3'd4)) begin
        basesoc_sdram_cmd_payload_a <= 1'd0;
        basesoc_sdram_cmd_payload_ba <= 1'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd1;
    end
    if ((basesoc_sdram_sequencer_counter == 3'd4)) begin
        basesoc_sdram_sequencer_counter <= 1'd0;
    end else begin
        if ((basesoc_sdram_sequencer_counter != 1'd0)) begin
            basesoc_sdram_sequencer_counter <= (basesoc_sdram_sequencer_counter + 1'd1);
        end else begin
            if (basesoc_sdram_sequencer_start1) begin
                basesoc_sdram_sequencer_counter <= 1'd1;
            end
        end
    end
    refresher_state <= refresher_next_state;
    if (basesoc_sdram_bankmachine0_row_close) begin
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine0_row_open) begin
            basesoc_sdram_bankmachine0_row_opened <= 1'd1;
            basesoc_sdram_bankmachine0_row <= basesoc_sdram_bankmachine0_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        basesoc_sdram_bankmachine0_produce <= (basesoc_sdram_bankmachine0_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine0_do_read) begin
        basesoc_sdram_bankmachine0_consume <= (basesoc_sdram_bankmachine0_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine0_syncfifo0_we & basesoc_sdram_bankmachine0_syncfifo0_writable) & (~basesoc_sdram_bankmachine0_replace))) begin
        if ((~basesoc_sdram_bankmachine0_do_read)) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine0_do_read) begin
            basesoc_sdram_bankmachine0_level <= (basesoc_sdram_bankmachine0_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine0_pipe_valid_source_valid) | basesoc_sdram_bankmachine0_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= basesoc_sdram_bankmachine0_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine0_pipe_valid_source_first <= basesoc_sdram_bankmachine0_pipe_valid_sink_first;
        basesoc_sdram_bankmachine0_pipe_valid_source_last <= basesoc_sdram_bankmachine0_pipe_valid_sink_last;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine0_twtpcon_valid) begin
        basesoc_sdram_bankmachine0_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_twtpcon_ready)) begin
            basesoc_sdram_bankmachine0_twtpcon_count <= (basesoc_sdram_bankmachine0_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trccon_valid) begin
        basesoc_sdram_bankmachine0_trccon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trccon_ready)) begin
            basesoc_sdram_bankmachine0_trccon_count <= (basesoc_sdram_bankmachine0_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine0_trascon_valid) begin
        basesoc_sdram_bankmachine0_trascon_count <= 1'd1;
        if (1'd0) begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine0_trascon_ready)) begin
            basesoc_sdram_bankmachine0_trascon_count <= (basesoc_sdram_bankmachine0_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine0_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine0_state <= bankmachine0_next_state;
    if (basesoc_sdram_bankmachine1_row_close) begin
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine1_row_open) begin
            basesoc_sdram_bankmachine1_row_opened <= 1'd1;
            basesoc_sdram_bankmachine1_row <= basesoc_sdram_bankmachine1_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        basesoc_sdram_bankmachine1_produce <= (basesoc_sdram_bankmachine1_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine1_do_read) begin
        basesoc_sdram_bankmachine1_consume <= (basesoc_sdram_bankmachine1_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine1_syncfifo1_we & basesoc_sdram_bankmachine1_syncfifo1_writable) & (~basesoc_sdram_bankmachine1_replace))) begin
        if ((~basesoc_sdram_bankmachine1_do_read)) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine1_do_read) begin
            basesoc_sdram_bankmachine1_level <= (basesoc_sdram_bankmachine1_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine1_pipe_valid_source_valid) | basesoc_sdram_bankmachine1_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= basesoc_sdram_bankmachine1_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine1_pipe_valid_source_first <= basesoc_sdram_bankmachine1_pipe_valid_sink_first;
        basesoc_sdram_bankmachine1_pipe_valid_source_last <= basesoc_sdram_bankmachine1_pipe_valid_sink_last;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine1_twtpcon_valid) begin
        basesoc_sdram_bankmachine1_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_twtpcon_ready)) begin
            basesoc_sdram_bankmachine1_twtpcon_count <= (basesoc_sdram_bankmachine1_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trccon_valid) begin
        basesoc_sdram_bankmachine1_trccon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trccon_ready)) begin
            basesoc_sdram_bankmachine1_trccon_count <= (basesoc_sdram_bankmachine1_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine1_trascon_valid) begin
        basesoc_sdram_bankmachine1_trascon_count <= 1'd1;
        if (1'd0) begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine1_trascon_ready)) begin
            basesoc_sdram_bankmachine1_trascon_count <= (basesoc_sdram_bankmachine1_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine1_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine1_state <= bankmachine1_next_state;
    if (basesoc_sdram_bankmachine2_row_close) begin
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine2_row_open) begin
            basesoc_sdram_bankmachine2_row_opened <= 1'd1;
            basesoc_sdram_bankmachine2_row <= basesoc_sdram_bankmachine2_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        basesoc_sdram_bankmachine2_produce <= (basesoc_sdram_bankmachine2_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine2_do_read) begin
        basesoc_sdram_bankmachine2_consume <= (basesoc_sdram_bankmachine2_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine2_syncfifo2_we & basesoc_sdram_bankmachine2_syncfifo2_writable) & (~basesoc_sdram_bankmachine2_replace))) begin
        if ((~basesoc_sdram_bankmachine2_do_read)) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine2_do_read) begin
            basesoc_sdram_bankmachine2_level <= (basesoc_sdram_bankmachine2_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine2_pipe_valid_source_valid) | basesoc_sdram_bankmachine2_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= basesoc_sdram_bankmachine2_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine2_pipe_valid_source_first <= basesoc_sdram_bankmachine2_pipe_valid_sink_first;
        basesoc_sdram_bankmachine2_pipe_valid_source_last <= basesoc_sdram_bankmachine2_pipe_valid_sink_last;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine2_twtpcon_valid) begin
        basesoc_sdram_bankmachine2_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_twtpcon_ready)) begin
            basesoc_sdram_bankmachine2_twtpcon_count <= (basesoc_sdram_bankmachine2_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trccon_valid) begin
        basesoc_sdram_bankmachine2_trccon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trccon_ready)) begin
            basesoc_sdram_bankmachine2_trccon_count <= (basesoc_sdram_bankmachine2_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine2_trascon_valid) begin
        basesoc_sdram_bankmachine2_trascon_count <= 1'd1;
        if (1'd0) begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine2_trascon_ready)) begin
            basesoc_sdram_bankmachine2_trascon_count <= (basesoc_sdram_bankmachine2_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine2_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine2_state <= bankmachine2_next_state;
    if (basesoc_sdram_bankmachine3_row_close) begin
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
    end else begin
        if (basesoc_sdram_bankmachine3_row_open) begin
            basesoc_sdram_bankmachine3_row_opened <= 1'd1;
            basesoc_sdram_bankmachine3_row <= basesoc_sdram_bankmachine3_source_source_payload_addr[18:8];
        end
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        basesoc_sdram_bankmachine3_produce <= (basesoc_sdram_bankmachine3_produce + 1'd1);
    end
    if (basesoc_sdram_bankmachine3_do_read) begin
        basesoc_sdram_bankmachine3_consume <= (basesoc_sdram_bankmachine3_consume + 1'd1);
    end
    if (((basesoc_sdram_bankmachine3_syncfifo3_we & basesoc_sdram_bankmachine3_syncfifo3_writable) & (~basesoc_sdram_bankmachine3_replace))) begin
        if ((~basesoc_sdram_bankmachine3_do_read)) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level + 1'd1);
        end
    end else begin
        if (basesoc_sdram_bankmachine3_do_read) begin
            basesoc_sdram_bankmachine3_level <= (basesoc_sdram_bankmachine3_level - 1'd1);
        end
    end
    if (((~basesoc_sdram_bankmachine3_pipe_valid_source_valid) | basesoc_sdram_bankmachine3_pipe_valid_source_ready)) begin
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= basesoc_sdram_bankmachine3_pipe_valid_sink_valid;
        basesoc_sdram_bankmachine3_pipe_valid_source_first <= basesoc_sdram_bankmachine3_pipe_valid_sink_first;
        basesoc_sdram_bankmachine3_pipe_valid_source_last <= basesoc_sdram_bankmachine3_pipe_valid_sink_last;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_we;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= basesoc_sdram_bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (basesoc_sdram_bankmachine3_twtpcon_valid) begin
        basesoc_sdram_bankmachine3_twtpcon_count <= 2'd3;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_twtpcon_ready)) begin
            basesoc_sdram_bankmachine3_twtpcon_count <= (basesoc_sdram_bankmachine3_twtpcon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_twtpcon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trccon_valid) begin
        basesoc_sdram_bankmachine3_trccon_count <= 2'd2;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trccon_ready)) begin
            basesoc_sdram_bankmachine3_trccon_count <= (basesoc_sdram_bankmachine3_trccon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trccon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_bankmachine3_trascon_valid) begin
        basesoc_sdram_bankmachine3_trascon_count <= 1'd1;
        if (1'd0) begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
        end else begin
            basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_bankmachine3_trascon_ready)) begin
            basesoc_sdram_bankmachine3_trascon_count <= (basesoc_sdram_bankmachine3_trascon_count - 1'd1);
            if ((basesoc_sdram_bankmachine3_trascon_count == 1'd1)) begin
                basesoc_sdram_bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    bankmachine3_state <= bankmachine3_next_state;
    if ((~basesoc_sdram_en0)) begin
        basesoc_sdram_time0 <= 5'd31;
    end else begin
        if ((~basesoc_sdram_max_time0)) begin
            basesoc_sdram_time0 <= (basesoc_sdram_time0 - 1'd1);
        end
    end
    if ((~basesoc_sdram_en1)) begin
        basesoc_sdram_time1 <= 4'd15;
    end else begin
        if ((~basesoc_sdram_max_time1)) begin
            basesoc_sdram_time1 <= (basesoc_sdram_time1 - 1'd1);
        end
    end
    if (basesoc_sdram_choose_cmd_ce) begin
        case (basesoc_sdram_choose_cmd_grant)
            1'd0: begin
                if (basesoc_sdram_choose_cmd_request[1]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[2]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[3]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_cmd_request[2]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[3]) begin
                        basesoc_sdram_choose_cmd_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[0]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_cmd_request[3]) begin
                    basesoc_sdram_choose_cmd_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[0]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[1]) begin
                            basesoc_sdram_choose_cmd_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_cmd_request[0]) begin
                    basesoc_sdram_choose_cmd_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_cmd_request[1]) begin
                        basesoc_sdram_choose_cmd_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_cmd_request[2]) begin
                            basesoc_sdram_choose_cmd_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    if (basesoc_sdram_choose_req_ce) begin
        case (basesoc_sdram_choose_req_grant)
            1'd0: begin
                if (basesoc_sdram_choose_req_request[1]) begin
                    basesoc_sdram_choose_req_grant <= 1'd1;
                end else begin
                    if (basesoc_sdram_choose_req_request[2]) begin
                        basesoc_sdram_choose_req_grant <= 2'd2;
                    end else begin
                        if (basesoc_sdram_choose_req_request[3]) begin
                            basesoc_sdram_choose_req_grant <= 2'd3;
                        end
                    end
                end
            end
            1'd1: begin
                if (basesoc_sdram_choose_req_request[2]) begin
                    basesoc_sdram_choose_req_grant <= 2'd2;
                end else begin
                    if (basesoc_sdram_choose_req_request[3]) begin
                        basesoc_sdram_choose_req_grant <= 2'd3;
                    end else begin
                        if (basesoc_sdram_choose_req_request[0]) begin
                            basesoc_sdram_choose_req_grant <= 1'd0;
                        end
                    end
                end
            end
            2'd2: begin
                if (basesoc_sdram_choose_req_request[3]) begin
                    basesoc_sdram_choose_req_grant <= 2'd3;
                end else begin
                    if (basesoc_sdram_choose_req_request[0]) begin
                        basesoc_sdram_choose_req_grant <= 1'd0;
                    end else begin
                        if (basesoc_sdram_choose_req_request[1]) begin
                            basesoc_sdram_choose_req_grant <= 1'd1;
                        end
                    end
                end
            end
            2'd3: begin
                if (basesoc_sdram_choose_req_request[0]) begin
                    basesoc_sdram_choose_req_grant <= 1'd0;
                end else begin
                    if (basesoc_sdram_choose_req_request[1]) begin
                        basesoc_sdram_choose_req_grant <= 1'd1;
                    end else begin
                        if (basesoc_sdram_choose_req_request[2]) begin
                            basesoc_sdram_choose_req_grant <= 2'd2;
                        end
                    end
                end
            end
        endcase
    end
    basesoc_sdram_dfi_p0_cs_n <= 1'd0;
    basesoc_sdram_dfi_p0_bank <= array_muxed0;
    basesoc_sdram_dfi_p0_address <= array_muxed1;
    basesoc_sdram_dfi_p0_cas_n <= (~array_muxed2);
    basesoc_sdram_dfi_p0_ras_n <= (~array_muxed3);
    basesoc_sdram_dfi_p0_we_n <= (~array_muxed4);
    basesoc_sdram_dfi_p0_rddata_en <= array_muxed5;
    basesoc_sdram_dfi_p0_wrdata_en <= array_muxed6;
    if (basesoc_sdram_trrdcon_valid) begin
        basesoc_sdram_trrdcon_count <= 1'd0;
        if (1'd1) begin
            basesoc_sdram_trrdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_trrdcon_ready)) begin
            basesoc_sdram_trrdcon_count <= (basesoc_sdram_trrdcon_count - 1'd1);
            if ((basesoc_sdram_trrdcon_count == 1'd1)) begin
                basesoc_sdram_trrdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_tccdcon_valid) begin
        basesoc_sdram_tccdcon_count <= 1'd0;
        if (1'd1) begin
            basesoc_sdram_tccdcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_tccdcon_ready)) begin
            basesoc_sdram_tccdcon_count <= (basesoc_sdram_tccdcon_count - 1'd1);
            if ((basesoc_sdram_tccdcon_count == 1'd1)) begin
                basesoc_sdram_tccdcon_ready <= 1'd1;
            end
        end
    end
    if (basesoc_sdram_twtrcon_valid) begin
        basesoc_sdram_twtrcon_count <= 3'd4;
        if (1'd0) begin
            basesoc_sdram_twtrcon_ready <= 1'd1;
        end else begin
            basesoc_sdram_twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~basesoc_sdram_twtrcon_ready)) begin
            basesoc_sdram_twtrcon_count <= (basesoc_sdram_twtrcon_count - 1'd1);
            if ((basesoc_sdram_twtrcon_count == 1'd1)) begin
                basesoc_sdram_twtrcon_ready <= 1'd1;
            end
        end
    end
    multiplexer_state <= multiplexer_next_state;
    new_master_wdata_ready <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_wdata_ready)) | ((roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_wdata_ready)) | ((roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_wdata_ready)) | ((roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_wdata_ready));
    new_master_rdata_valid0 <= ((((1'd0 | ((roundrobin0_grant == 1'd0) & basesoc_sdram_interface_bank0_rdata_valid)) | ((roundrobin1_grant == 1'd0) & basesoc_sdram_interface_bank1_rdata_valid)) | ((roundrobin2_grant == 1'd0) & basesoc_sdram_interface_bank2_rdata_valid)) | ((roundrobin3_grant == 1'd0) & basesoc_sdram_interface_bank3_rdata_valid));
    new_master_rdata_valid1 <= new_master_rdata_valid0;
    new_master_rdata_valid2 <= new_master_rdata_valid1;
    new_master_rdata_valid3 <= new_master_rdata_valid2;
    basesoc_adr_offset_r <= basesoc_wb_sdram_adr[1:0];
    fullmemorywe_state <= fullmemorywe_next_state;
    litedramnativeportconverter_state <= litedramnativeportconverter_next_state;
    if (basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value_ce0) begin
        basesoc_wishbone_bridge_cmd_count <= basesoc_wishbone_bridge_cmd_count_litedramnativeportconverter_next_value0;
    end
    if (basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value_ce1) begin
        basesoc_wishbone_bridge_cmd_addr <= basesoc_wishbone_bridge_cmd_addr_litedramnativeportconverter_next_value1;
    end
    if (basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value_ce2) begin
        basesoc_wishbone_bridge_cmd_we <= basesoc_wishbone_bridge_cmd_we_litedramnativeportconverter_next_value2;
    end
    if ((basesoc_wishbone_bridge_wdata_converter_converter_source_valid & basesoc_wishbone_bridge_wdata_converter_converter_source_ready)) begin
        if (basesoc_wishbone_bridge_wdata_converter_converter_last) begin
            basesoc_wishbone_bridge_wdata_converter_converter_mux <= 1'd0;
        end else begin
            basesoc_wishbone_bridge_wdata_converter_converter_mux <= (basesoc_wishbone_bridge_wdata_converter_converter_mux + 1'd1);
        end
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_source_ready) begin
        basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        if (((basesoc_wishbone_bridge_rdata_converter_converter_demux == 2'd3) | basesoc_wishbone_bridge_rdata_converter_converter_sink_last)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_demux <= 1'd0;
            basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            basesoc_wishbone_bridge_rdata_converter_converter_demux <= (basesoc_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
        end
    end
    if ((basesoc_wishbone_bridge_rdata_converter_converter_source_valid & basesoc_wishbone_bridge_rdata_converter_converter_source_ready)) begin
        if ((basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= basesoc_wishbone_bridge_rdata_converter_converter_sink_first;
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= basesoc_wishbone_bridge_rdata_converter_converter_sink_last;
        end else begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= 1'd0;
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((basesoc_wishbone_bridge_rdata_converter_converter_sink_valid & basesoc_wishbone_bridge_rdata_converter_converter_sink_ready)) begin
            basesoc_wishbone_bridge_rdata_converter_converter_source_first <= (basesoc_wishbone_bridge_rdata_converter_converter_sink_first | basesoc_wishbone_bridge_rdata_converter_converter_source_first);
            basesoc_wishbone_bridge_rdata_converter_converter_source_last <= (basesoc_wishbone_bridge_rdata_converter_converter_sink_last | basesoc_wishbone_bridge_rdata_converter_converter_source_last);
        end
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        case (basesoc_wishbone_bridge_rdata_converter_converter_demux)
            1'd0: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[31:0] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[63:32] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[95:64] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data[127:96] <= basesoc_wishbone_bridge_rdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (basesoc_wishbone_bridge_rdata_converter_converter_load_part) begin
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= (basesoc_wishbone_bridge_rdata_converter_converter_demux + 1'd1);
    end
    fsm_state <= fsm_next_state;
    if (basesoc_wishbone_bridge_aborted_fsm_next_value_ce) begin
        basesoc_wishbone_bridge_aborted <= basesoc_wishbone_bridge_aborted_fsm_next_value;
    end
    if (leds_done) begin
        leds_chaser <= {leds_chaser, (~leds_chaser[5])};
    end
    if (leds_re) begin
        leds_mode <= 1'd1;
    end
    if (leds_wait) begin
        if ((~leds_done)) begin
            leds_count <= (leds_count - 1'd1);
        end
    end else begin
        leds_count <= 22'd4000000;
    end
    wishbone2csr_state <= wishbone2csr_next_state;
    if (interface1_dat_w_next_value_ce0) begin
        interface1_dat_w <= interface1_dat_w_next_value0;
    end
    if (interface1_adr_next_value_ce1) begin
        interface1_adr <= interface1_adr_next_value1;
    end
    if (interface1_re_next_value_ce2) begin
        interface1_re <= interface1_re_next_value2;
    end
    if (interface1_we_next_value_ce3) begin
        interface1_we <= interface1_we_next_value3;
    end
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_in_w;
            end
        endcase
    end
    buttons_re <= csr_bankarray_csrbank0_in_re;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_reset0_re) begin
        basesoc_reset_storage <= csr_bankarray_csrbank1_reset0_r;
    end
    basesoc_reset_re <= csr_bankarray_csrbank1_reset0_re;
    if (csr_bankarray_csrbank1_scratch0_re) begin
        basesoc_scratch_storage <= csr_bankarray_csrbank1_scratch0_r;
    end
    basesoc_scratch_re <= csr_bankarray_csrbank1_scratch0_re;
    basesoc_bus_errors_re <= csr_bankarray_csrbank1_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_out0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank2_out0_re) begin
        leds_storage <= csr_bankarray_csrbank2_out0_r;
    end
    leds_re <= csr_bankarray_csrbank2_out0_re;
    csr_bankarray_interface3_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank3_sel) begin
        case (csr_bankarray_interface3_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_control0_w;
            end
            1'd1: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_pi0_command0_w;
            end
            2'd2: begin
                csr_bankarray_interface3_bank_bus_dat_r <= basesoc_sdram_command_issue_w;
            end
            2'd3: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_pi0_address0_w;
            end
            3'd4: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                csr_bankarray_interface3_bank_bus_dat_r <= csr_bankarray_csrbank3_dfii_pi0_rddata_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank3_dfii_control0_re) begin
        basesoc_sdram_storage <= csr_bankarray_csrbank3_dfii_control0_r;
    end
    basesoc_sdram_re <= csr_bankarray_csrbank3_dfii_control0_re;
    if (csr_bankarray_csrbank3_dfii_pi0_command0_re) begin
        basesoc_sdram_command_storage <= csr_bankarray_csrbank3_dfii_pi0_command0_r;
    end
    basesoc_sdram_command_re <= csr_bankarray_csrbank3_dfii_pi0_command0_re;
    if (csr_bankarray_csrbank3_dfii_pi0_address0_re) begin
        basesoc_sdram_address_storage <= csr_bankarray_csrbank3_dfii_pi0_address0_r;
    end
    basesoc_sdram_address_re <= csr_bankarray_csrbank3_dfii_pi0_address0_re;
    if (csr_bankarray_csrbank3_dfii_pi0_baddress0_re) begin
        basesoc_sdram_baddress_storage <= csr_bankarray_csrbank3_dfii_pi0_baddress0_r;
    end
    basesoc_sdram_baddress_re <= csr_bankarray_csrbank3_dfii_pi0_baddress0_re;
    if (csr_bankarray_csrbank3_dfii_pi0_wrdata0_re) begin
        basesoc_sdram_wrdata_storage <= csr_bankarray_csrbank3_dfii_pi0_wrdata0_r;
    end
    basesoc_sdram_wrdata_re <= csr_bankarray_csrbank3_dfii_pi0_wrdata0_re;
    basesoc_sdram_rddata_re <= csr_bankarray_csrbank3_dfii_pi0_rddata_re;
    csr_bankarray_interface4_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank4_sel) begin
        case (csr_bankarray_interface4_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_value_w;
            end
            3'd5: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface4_bank_bus_dat_r <= csr_bankarray_csrbank4_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank4_load0_re) begin
        basesoc_timer_load_storage <= csr_bankarray_csrbank4_load0_r;
    end
    basesoc_timer_load_re <= csr_bankarray_csrbank4_load0_re;
    if (csr_bankarray_csrbank4_reload0_re) begin
        basesoc_timer_reload_storage <= csr_bankarray_csrbank4_reload0_r;
    end
    basesoc_timer_reload_re <= csr_bankarray_csrbank4_reload0_re;
    if (csr_bankarray_csrbank4_en0_re) begin
        basesoc_timer_en_storage <= csr_bankarray_csrbank4_en0_r;
    end
    basesoc_timer_en_re <= csr_bankarray_csrbank4_en0_re;
    if (csr_bankarray_csrbank4_update_value0_re) begin
        basesoc_timer_update_value_storage <= csr_bankarray_csrbank4_update_value0_r;
    end
    basesoc_timer_update_value_re <= csr_bankarray_csrbank4_update_value0_re;
    basesoc_timer_value_re <= csr_bankarray_csrbank4_value_re;
    basesoc_timer_status_re <= csr_bankarray_csrbank4_ev_status_re;
    if (csr_bankarray_csrbank4_ev_pending_re) begin
        basesoc_timer_pending_r <= csr_bankarray_csrbank4_ev_pending_r;
    end
    basesoc_timer_pending_re <= csr_bankarray_csrbank4_ev_pending_re;
    if (csr_bankarray_csrbank4_ev_enable0_re) begin
        basesoc_timer_enable_storage <= csr_bankarray_csrbank4_ev_enable0_r;
    end
    basesoc_timer_enable_re <= csr_bankarray_csrbank4_ev_enable0_re;
    csr_bankarray_interface5_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank5_sel) begin
        case (csr_bankarray_interface5_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface5_bank_bus_dat_r <= basesoc_uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface5_bank_bus_dat_r <= csr_bankarray_csrbank5_rxfull_w;
            end
        endcase
    end
    basesoc_uart_txfull_re <= csr_bankarray_csrbank5_txfull_re;
    basesoc_uart_rxempty_re <= csr_bankarray_csrbank5_rxempty_re;
    basesoc_uart_status_re <= csr_bankarray_csrbank5_ev_status_re;
    if (csr_bankarray_csrbank5_ev_pending_re) begin
        basesoc_uart_pending_r <= csr_bankarray_csrbank5_ev_pending_r;
    end
    basesoc_uart_pending_re <= csr_bankarray_csrbank5_ev_pending_re;
    if (csr_bankarray_csrbank5_ev_enable0_re) begin
        basesoc_uart_enable_storage <= csr_bankarray_csrbank5_ev_enable0_r;
    end
    basesoc_uart_enable_re <= csr_bankarray_csrbank5_ev_enable0_re;
    basesoc_uart_txempty_re <= csr_bankarray_csrbank5_txempty_re;
    basesoc_uart_rxfull_re <= csr_bankarray_csrbank5_rxfull_re;
    if (sys_rst) begin
        basesoc_reset_storage <= 2'd0;
        basesoc_reset_re <= 1'd0;
        basesoc_scratch_storage <= 32'd305419896;
        basesoc_scratch_re <= 1'd0;
        basesoc_bus_errors_re <= 1'd0;
        basesoc_bus_errors <= 32'd0;
        basesoc_basesoc_ram_bus_ack <= 1'd0;
        basesoc_ram_bus_ram_bus_ack <= 1'd0;
        serial_tx <= 1'd1;
        basesoc_tx_tick <= 1'd0;
        basesoc_rx_tick <= 1'd0;
        basesoc_rx_rx_d <= 1'd0;
        basesoc_uart_txfull_re <= 1'd0;
        basesoc_uart_rxempty_re <= 1'd0;
        basesoc_uart_tx_pending <= 1'd0;
        basesoc_uart_tx_trigger_d <= 1'd0;
        basesoc_uart_rx_pending <= 1'd0;
        basesoc_uart_rx_trigger_d <= 1'd0;
        basesoc_uart_status_re <= 1'd0;
        basesoc_uart_pending_re <= 1'd0;
        basesoc_uart_pending_r <= 2'd0;
        basesoc_uart_enable_storage <= 2'd0;
        basesoc_uart_enable_re <= 1'd0;
        basesoc_uart_txempty_re <= 1'd0;
        basesoc_uart_rxfull_re <= 1'd0;
        basesoc_uart_tx_fifo_readable <= 1'd0;
        basesoc_uart_tx_fifo_level0 <= 5'd0;
        basesoc_uart_tx_fifo_produce <= 4'd0;
        basesoc_uart_tx_fifo_consume <= 4'd0;
        basesoc_uart_rx_fifo_readable <= 1'd0;
        basesoc_uart_rx_fifo_level0 <= 5'd0;
        basesoc_uart_rx_fifo_produce <= 4'd0;
        basesoc_uart_rx_fifo_consume <= 4'd0;
        basesoc_timer_load_storage <= 32'd0;
        basesoc_timer_load_re <= 1'd0;
        basesoc_timer_reload_storage <= 32'd0;
        basesoc_timer_reload_re <= 1'd0;
        basesoc_timer_en_storage <= 1'd0;
        basesoc_timer_en_re <= 1'd0;
        basesoc_timer_update_value_storage <= 1'd0;
        basesoc_timer_update_value_re <= 1'd0;
        basesoc_timer_value_status <= 32'd0;
        basesoc_timer_value_re <= 1'd0;
        basesoc_timer_zero_pending <= 1'd0;
        basesoc_timer_zero_trigger_d <= 1'd0;
        basesoc_timer_status_re <= 1'd0;
        basesoc_timer_pending_re <= 1'd0;
        basesoc_timer_pending_r <= 1'd0;
        basesoc_timer_enable_storage <= 1'd0;
        basesoc_timer_enable_re <= 1'd0;
        basesoc_timer_value <= 32'd0;
        dfi_p0_rddata_valid <= 1'd0;
        rddata_en <= 3'd0;
        basesoc_sdram_storage <= 4'd1;
        basesoc_sdram_re <= 1'd0;
        basesoc_sdram_command_storage <= 8'd0;
        basesoc_sdram_command_re <= 1'd0;
        basesoc_sdram_address_re <= 1'd0;
        basesoc_sdram_baddress_re <= 1'd0;
        basesoc_sdram_wrdata_re <= 1'd0;
        basesoc_sdram_rddata_status <= 32'd0;
        basesoc_sdram_rddata_re <= 1'd0;
        basesoc_sdram_dfi_p0_address <= 11'd0;
        basesoc_sdram_dfi_p0_bank <= 2'd0;
        basesoc_sdram_dfi_p0_cas_n <= 1'd1;
        basesoc_sdram_dfi_p0_cs_n <= 1'd1;
        basesoc_sdram_dfi_p0_ras_n <= 1'd1;
        basesoc_sdram_dfi_p0_we_n <= 1'd1;
        basesoc_sdram_dfi_p0_wrdata_en <= 1'd0;
        basesoc_sdram_dfi_p0_rddata_en <= 1'd0;
        basesoc_sdram_cmd_payload_a <= 11'd0;
        basesoc_sdram_cmd_payload_ba <= 2'd0;
        basesoc_sdram_cmd_payload_cas <= 1'd0;
        basesoc_sdram_cmd_payload_ras <= 1'd0;
        basesoc_sdram_cmd_payload_we <= 1'd0;
        basesoc_sdram_timer_count1 <= 10'd749;
        basesoc_sdram_postponer_req_o <= 1'd0;
        basesoc_sdram_postponer_count <= 1'd0;
        basesoc_sdram_sequencer_done1 <= 1'd0;
        basesoc_sdram_sequencer_counter <= 3'd0;
        basesoc_sdram_sequencer_count <= 1'd0;
        basesoc_sdram_bankmachine0_level <= 4'd0;
        basesoc_sdram_bankmachine0_produce <= 3'd0;
        basesoc_sdram_bankmachine0_consume <= 3'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine0_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine0_row <= 11'd0;
        basesoc_sdram_bankmachine0_row_opened <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine0_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine0_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine0_trascon_count <= 1'd0;
        basesoc_sdram_bankmachine1_level <= 4'd0;
        basesoc_sdram_bankmachine1_produce <= 3'd0;
        basesoc_sdram_bankmachine1_consume <= 3'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine1_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine1_row <= 11'd0;
        basesoc_sdram_bankmachine1_row_opened <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine1_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine1_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine1_trascon_count <= 1'd0;
        basesoc_sdram_bankmachine2_level <= 4'd0;
        basesoc_sdram_bankmachine2_produce <= 3'd0;
        basesoc_sdram_bankmachine2_consume <= 3'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine2_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine2_row <= 11'd0;
        basesoc_sdram_bankmachine2_row_opened <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine2_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine2_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine2_trascon_count <= 1'd0;
        basesoc_sdram_bankmachine3_level <= 4'd0;
        basesoc_sdram_bankmachine3_produce <= 3'd0;
        basesoc_sdram_bankmachine3_consume <= 3'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_valid <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        basesoc_sdram_bankmachine3_pipe_valid_source_payload_addr <= 19'd0;
        basesoc_sdram_bankmachine3_row <= 11'd0;
        basesoc_sdram_bankmachine3_row_opened <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_twtpcon_count <= 2'd0;
        basesoc_sdram_bankmachine3_trccon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trccon_count <= 2'd0;
        basesoc_sdram_bankmachine3_trascon_ready <= 1'd0;
        basesoc_sdram_bankmachine3_trascon_count <= 1'd0;
        basesoc_sdram_choose_cmd_grant <= 2'd0;
        basesoc_sdram_choose_req_grant <= 2'd0;
        basesoc_sdram_trrdcon_ready <= 1'd0;
        basesoc_sdram_trrdcon_count <= 1'd0;
        basesoc_sdram_tccdcon_ready <= 1'd0;
        basesoc_sdram_tccdcon_count <= 1'd0;
        basesoc_sdram_twtrcon_ready <= 1'd0;
        basesoc_sdram_twtrcon_count <= 3'd0;
        basesoc_sdram_time0 <= 5'd0;
        basesoc_sdram_time1 <= 4'd0;
        basesoc_wishbone_bridge_cmd_count <= 2'd0;
        basesoc_wishbone_bridge_cmd_addr <= 19'd0;
        basesoc_wishbone_bridge_cmd_we <= 1'd0;
        basesoc_wishbone_bridge_wdata_converter_converter_mux <= 2'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_data <= 128'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_source_payload_valid_token_count <= 3'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_demux <= 2'd0;
        basesoc_wishbone_bridge_rdata_converter_converter_strobe_all <= 1'd0;
        basesoc_wishbone_bridge_aborted <= 1'd0;
        leds_storage <= 6'd0;
        leds_re <= 1'd0;
        leds_chaser <= 6'd0;
        leds_mode <= 1'd0;
        leds_count <= 22'd4000000;
        buttons_re <= 1'd0;
        interface1_re <= 1'd0;
        interface1_we <= 1'd0;
        grant <= 1'd0;
        slave_sel_r <= 4'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        refresher_state <= 2'd0;
        bankmachine0_state <= 3'd0;
        bankmachine1_state <= 3'd0;
        bankmachine2_state <= 3'd0;
        bankmachine3_state <= 3'd0;
        multiplexer_state <= 3'd0;
        new_master_wdata_ready <= 1'd0;
        new_master_rdata_valid0 <= 1'd0;
        new_master_rdata_valid1 <= 1'd0;
        new_master_rdata_valid2 <= 1'd0;
        new_master_rdata_valid3 <= 1'd0;
        fullmemorywe_state <= 2'd0;
        litedramnativeportconverter_state <= 1'd0;
        fsm_state <= 2'd0;
        wishbone2csr_state <= 2'd0;
    end
    multiregimpl0_regs0 <= serial_rx;
    multiregimpl0_regs1 <= multiregimpl0_regs0;
    multiregimpl1_regs0 <= (~{btn1, btn0});
    multiregimpl1_regs1 <= multiregimpl1_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 6470-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:6469];
initial begin
	$readmemh("sipeed_tang_nano_20k_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[basesoc_basesoc_adr];
end
assign basesoc_basesoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sipeed_tang_nano_20k_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (basesoc_ram_we[0])
		sram[basesoc_ram_adr][7:0] <= basesoc_ram_dat_w[7:0];
	if (basesoc_ram_we[1])
		sram[basesoc_ram_adr][15:8] <= basesoc_ram_dat_w[15:8];
	if (basesoc_ram_we[2])
		sram[basesoc_ram_adr][23:16] <= basesoc_ram_dat_w[23:16];
	if (basesoc_ram_we[3])
		sram[basesoc_ram_adr][31:24] <= basesoc_ram_dat_w[31:24];
	sram_adr0 <= basesoc_ram_adr;
end
assign basesoc_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 47-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:46];
initial begin
	$readmemh("sipeed_tang_nano_20k_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_wrport_we)
		storage[basesoc_uart_tx_fifo_wrport_adr] <= basesoc_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[basesoc_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[basesoc_uart_tx_fifo_rdport_adr];
end
assign basesoc_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign basesoc_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_wrport_we)
		storage_1[basesoc_uart_rx_fifo_wrport_adr] <= basesoc_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[basesoc_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (basesoc_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[basesoc_uart_rx_fifo_rdport_adr];
end
assign basesoc_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign basesoc_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Memory storage_2: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 22 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_2[0:7];
reg [21:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine0_wrport_we)
		storage_2[basesoc_sdram_bankmachine0_wrport_adr] <= basesoc_sdram_bankmachine0_wrport_dat_w;
	storage_2_dat0 <= storage_2[basesoc_sdram_bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine0_wrport_dat_r = storage_2_dat0;
assign basesoc_sdram_bankmachine0_rdport_dat_r = storage_2[basesoc_sdram_bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 22 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_3[0:7];
reg [21:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine1_wrport_we)
		storage_3[basesoc_sdram_bankmachine1_wrport_adr] <= basesoc_sdram_bankmachine1_wrport_dat_w;
	storage_3_dat0 <= storage_3[basesoc_sdram_bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine1_wrport_dat_r = storage_3_dat0;
assign basesoc_sdram_bankmachine1_rdport_dat_r = storage_3[basesoc_sdram_bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 22 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_4[0:7];
reg [21:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine2_wrport_we)
		storage_4[basesoc_sdram_bankmachine2_wrport_adr] <= basesoc_sdram_bankmachine2_wrport_dat_w;
	storage_4_dat0 <= storage_4[basesoc_sdram_bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine2_wrport_dat_r = storage_4_dat0;
assign basesoc_sdram_bankmachine2_rdport_dat_r = storage_4[basesoc_sdram_bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 8-words x 22-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 22 
// Port 1 | Read: Async | Write: ---- | 
reg [21:0] storage_5[0:7];
reg [21:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (basesoc_sdram_bankmachine3_wrport_we)
		storage_5[basesoc_sdram_bankmachine3_wrport_adr] <= basesoc_sdram_bankmachine3_wrport_dat_w;
	storage_5_dat0 <= storage_5[basesoc_sdram_bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign basesoc_sdram_bankmachine3_wrport_dat_r = storage_5_dat0;
assign basesoc_sdram_bankmachine3_rdport_dat_r = storage_5[basesoc_sdram_bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory tag_mem: 8-words x 28-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 28 
reg [27:0] tag_mem[0:7];
reg [2:0] tag_mem_adr0;
always @(posedge sys_clk) begin
	if (basesoc_tag_port_we)
		tag_mem[basesoc_tag_port_adr] <= basesoc_tag_port_dat_w;
	tag_mem_adr0 <= basesoc_tag_port_adr;
end
assign basesoc_tag_port_dat_r = tag_mem[tag_mem_adr0];


//------------------------------------------------------------------------------
// Instance rPLL of rPLL Module.
//------------------------------------------------------------------------------
rPLL #(
	// Parameters.
	.CLKFB_SEL        ("internal"),
	.CLKOUTD3_SRC     ("CLKOUT"),
	.CLKOUTD_BYPASS   ("false"),
	.CLKOUTD_SRC      ("CLKOUT"),
	.CLKOUTP_BYPASS   ("false"),
	.CLKOUTP_DLY_STEP (1'd0),
	.CLKOUTP_FT_DIR   (1'd1),
	.CLKOUT_BYPASS    ("false"),
	.CLKOUT_DLY_STEP  (1'd0),
	.CLKOUT_FT_DIR    (1'd1),
	.DEVICE           ("GW2AR-18C"),
	.DUTYDA_SEL       ("1000"),
	.DYN_DA_EN        ("false"),
	.DYN_FBDIV_SEL    ("false"),
	.DYN_IDIV_SEL     ("false"),
	.DYN_ODIV_SEL     ("false"),
	.DYN_SDIV_SEL     (2'd2),
	.FBDIV_SEL        (4'd15),
	.FCLKIN           ("27.0"),
	.IDIV_SEL         (4'd8),
	.ODIV_SEL         (5'd16),
	.PSDA_SEL         ("0000")
) rPLL (
	// Inputs.
	.CLKFB    (1'd0),
	.CLKIN    (crg_clkin),
	.DUTYDA   (4'd0),
	.FBDSEL   (6'd0),
	.FDLY     (4'd15),
	.IDSEL    (6'd0),
	.ODSEL    (6'd0),
	.PSDA     (4'd0),
	.RESET    (crg_reset),
	.RESET_P  (1'd0),

	// Outputs.
	.CLKOUT   (crg_clkout),
	.CLKOUTD  (gw2apll1),
	.CLKOUTD3 (gw2apll2),
	.CLKOUTP  (gw2apll0),
	.LOCK     (crg_locked)
);

//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (basesoc_dbus_ack),
	.dBusWishbone_DAT_MISO  (basesoc_dbus_dat_r),
	.dBusWishbone_ERR       (basesoc_dbus_err),
	.externalInterruptArray (basesoc_interrupt),
	.externalResetVector    (basesoc_vexriscv),
	.iBusWishbone_ACK       (basesoc_ibus_ack),
	.iBusWishbone_DAT_MISO  (basesoc_ibus_dat_r),
	.iBusWishbone_ERR       (basesoc_ibus_err),
	.reset                  ((sys_rst | basesoc_reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (basesoc_dbus_adr),
	.dBusWishbone_BTE       (basesoc_dbus_bte),
	.dBusWishbone_CTI       (basesoc_dbus_cti),
	.dBusWishbone_CYC       (basesoc_dbus_cyc),
	.dBusWishbone_DAT_MOSI  (basesoc_dbus_dat_w),
	.dBusWishbone_SEL       (basesoc_dbus_sel),
	.dBusWishbone_STB       (basesoc_dbus_stb),
	.dBusWishbone_WE        (basesoc_dbus_we),
	.iBusWishbone_ADR       (basesoc_ibus_adr),
	.iBusWishbone_BTE       (basesoc_ibus_bte),
	.iBusWishbone_CTI       (basesoc_ibus_cti),
	.iBusWishbone_CYC       (basesoc_ibus_cyc),
	.iBusWishbone_DAT_MOSI  (basesoc_ibus_dat_w),
	.iBusWishbone_SEL       (basesoc_ibus_sel),
	.iBusWishbone_STB       (basesoc_ibus_stb),
	.iBusWishbone_WE        (basesoc_ibus_we)
);

//------------------------------------------------------------------------------
// Memory data_mem_grain0: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain0[0:7];
reg [2:0] data_mem_grain0_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[0])
		data_mem_grain0[basesoc_data_port_adr] <= basesoc_data_port_dat_w[7:0];
	data_mem_grain0_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[7:0] = data_mem_grain0[data_mem_grain0_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain1: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain1[0:7];
reg [2:0] data_mem_grain1_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[1])
		data_mem_grain1[basesoc_data_port_adr] <= basesoc_data_port_dat_w[15:8];
	data_mem_grain1_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[15:8] = data_mem_grain1[data_mem_grain1_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain2: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain2[0:7];
reg [2:0] data_mem_grain2_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[2])
		data_mem_grain2[basesoc_data_port_adr] <= basesoc_data_port_dat_w[23:16];
	data_mem_grain2_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[23:16] = data_mem_grain2[data_mem_grain2_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain3: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain3[0:7];
reg [2:0] data_mem_grain3_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[3])
		data_mem_grain3[basesoc_data_port_adr] <= basesoc_data_port_dat_w[31:24];
	data_mem_grain3_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[31:24] = data_mem_grain3[data_mem_grain3_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain4: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain4[0:7];
reg [2:0] data_mem_grain4_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[4])
		data_mem_grain4[basesoc_data_port_adr] <= basesoc_data_port_dat_w[39:32];
	data_mem_grain4_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[39:32] = data_mem_grain4[data_mem_grain4_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain5: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain5[0:7];
reg [2:0] data_mem_grain5_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[5])
		data_mem_grain5[basesoc_data_port_adr] <= basesoc_data_port_dat_w[47:40];
	data_mem_grain5_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[47:40] = data_mem_grain5[data_mem_grain5_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain6: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain6[0:7];
reg [2:0] data_mem_grain6_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[6])
		data_mem_grain6[basesoc_data_port_adr] <= basesoc_data_port_dat_w[55:48];
	data_mem_grain6_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[55:48] = data_mem_grain6[data_mem_grain6_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain7: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain7[0:7];
reg [2:0] data_mem_grain7_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[7])
		data_mem_grain7[basesoc_data_port_adr] <= basesoc_data_port_dat_w[63:56];
	data_mem_grain7_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[63:56] = data_mem_grain7[data_mem_grain7_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain8: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain8[0:7];
reg [2:0] data_mem_grain8_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[8])
		data_mem_grain8[basesoc_data_port_adr] <= basesoc_data_port_dat_w[71:64];
	data_mem_grain8_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[71:64] = data_mem_grain8[data_mem_grain8_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain9: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain9[0:7];
reg [2:0] data_mem_grain9_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[9])
		data_mem_grain9[basesoc_data_port_adr] <= basesoc_data_port_dat_w[79:72];
	data_mem_grain9_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[79:72] = data_mem_grain9[data_mem_grain9_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain10: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain10[0:7];
reg [2:0] data_mem_grain10_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[10])
		data_mem_grain10[basesoc_data_port_adr] <= basesoc_data_port_dat_w[87:80];
	data_mem_grain10_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[87:80] = data_mem_grain10[data_mem_grain10_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain11: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain11[0:7];
reg [2:0] data_mem_grain11_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[11])
		data_mem_grain11[basesoc_data_port_adr] <= basesoc_data_port_dat_w[95:88];
	data_mem_grain11_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[95:88] = data_mem_grain11[data_mem_grain11_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain12: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain12[0:7];
reg [2:0] data_mem_grain12_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[12])
		data_mem_grain12[basesoc_data_port_adr] <= basesoc_data_port_dat_w[103:96];
	data_mem_grain12_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[103:96] = data_mem_grain12[data_mem_grain12_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain13: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain13[0:7];
reg [2:0] data_mem_grain13_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[13])
		data_mem_grain13[basesoc_data_port_adr] <= basesoc_data_port_dat_w[111:104];
	data_mem_grain13_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[111:104] = data_mem_grain13[data_mem_grain13_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain14: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain14[0:7];
reg [2:0] data_mem_grain14_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[14])
		data_mem_grain14[basesoc_data_port_adr] <= basesoc_data_port_dat_w[119:112];
	data_mem_grain14_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[119:112] = data_mem_grain14[data_mem_grain14_adr0];


//------------------------------------------------------------------------------
// Memory data_mem_grain15: 8-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [7:0] data_mem_grain15[0:7];
reg [2:0] data_mem_grain15_adr0;
always @(posedge sys_clk) begin
	if (basesoc_data_port_we[15])
		data_mem_grain15[basesoc_data_port_adr] <= basesoc_data_port_dat_w[127:120];
	data_mem_grain15_adr0 <= basesoc_data_port_adr;
end
assign basesoc_data_port_dat_r[127:120] = data_mem_grain15[data_mem_grain15_adr0];


//------------------------------------------------------------------------------
// Instance DFFP of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP(
	// Inputs.
	.CLK    (sys_clk),
	.D      (1'd0),
	.PRESET (crg_reset),

	// Outputs.
	.Q      (rst1)
);

//------------------------------------------------------------------------------
// Instance DFFP_1 of DFFP Module.
//------------------------------------------------------------------------------
DFFP DFFP_1(
	// Inputs.
	.CLK    (sys_clk),
	.D      (rst1),
	.PRESET (crg_reset),

	// Outputs.
	.Q      (sys_rst)
);

//------------------------------------------------------------------------------
// Instance ODDR of ODDR Module.
//------------------------------------------------------------------------------
ODDR ODDR(
	// Inputs.
	.CLK (sys_clk),
	.D0  (1'd0),
	.D1  (1'd1),
	.TX  (1'd0),

	// Outputs.
	.Q0  (O_sdram_clk),
	.Q1  (gowinddroutputimpl)
);

assign IO_sdram_dq[0] = inferedsdrtristate0_oe ? inferedsdrtristate0__o : 1'bz;
assign inferedsdrtristate0__i = IO_sdram_dq[0];

assign IO_sdram_dq[1] = inferedsdrtristate1_oe ? inferedsdrtristate1__o : 1'bz;
assign inferedsdrtristate1__i = IO_sdram_dq[1];

assign IO_sdram_dq[2] = inferedsdrtristate2_oe ? inferedsdrtristate2__o : 1'bz;
assign inferedsdrtristate2__i = IO_sdram_dq[2];

assign IO_sdram_dq[3] = inferedsdrtristate3_oe ? inferedsdrtristate3__o : 1'bz;
assign inferedsdrtristate3__i = IO_sdram_dq[3];

assign IO_sdram_dq[4] = inferedsdrtristate4_oe ? inferedsdrtristate4__o : 1'bz;
assign inferedsdrtristate4__i = IO_sdram_dq[4];

assign IO_sdram_dq[5] = inferedsdrtristate5_oe ? inferedsdrtristate5__o : 1'bz;
assign inferedsdrtristate5__i = IO_sdram_dq[5];

assign IO_sdram_dq[6] = inferedsdrtristate6_oe ? inferedsdrtristate6__o : 1'bz;
assign inferedsdrtristate6__i = IO_sdram_dq[6];

assign IO_sdram_dq[7] = inferedsdrtristate7_oe ? inferedsdrtristate7__o : 1'bz;
assign inferedsdrtristate7__i = IO_sdram_dq[7];

assign IO_sdram_dq[8] = inferedsdrtristate8_oe ? inferedsdrtristate8__o : 1'bz;
assign inferedsdrtristate8__i = IO_sdram_dq[8];

assign IO_sdram_dq[9] = inferedsdrtristate9_oe ? inferedsdrtristate9__o : 1'bz;
assign inferedsdrtristate9__i = IO_sdram_dq[9];

assign IO_sdram_dq[10] = inferedsdrtristate10_oe ? inferedsdrtristate10__o : 1'bz;
assign inferedsdrtristate10__i = IO_sdram_dq[10];

assign IO_sdram_dq[11] = inferedsdrtristate11_oe ? inferedsdrtristate11__o : 1'bz;
assign inferedsdrtristate11__i = IO_sdram_dq[11];

assign IO_sdram_dq[12] = inferedsdrtristate12_oe ? inferedsdrtristate12__o : 1'bz;
assign inferedsdrtristate12__i = IO_sdram_dq[12];

assign IO_sdram_dq[13] = inferedsdrtristate13_oe ? inferedsdrtristate13__o : 1'bz;
assign inferedsdrtristate13__i = IO_sdram_dq[13];

assign IO_sdram_dq[14] = inferedsdrtristate14_oe ? inferedsdrtristate14__o : 1'bz;
assign inferedsdrtristate14__i = IO_sdram_dq[14];

assign IO_sdram_dq[15] = inferedsdrtristate15_oe ? inferedsdrtristate15__o : 1'bz;
assign inferedsdrtristate15__i = IO_sdram_dq[15];

assign IO_sdram_dq[16] = inferedsdrtristate16_oe ? inferedsdrtristate16__o : 1'bz;
assign inferedsdrtristate16__i = IO_sdram_dq[16];

assign IO_sdram_dq[17] = inferedsdrtristate17_oe ? inferedsdrtristate17__o : 1'bz;
assign inferedsdrtristate17__i = IO_sdram_dq[17];

assign IO_sdram_dq[18] = inferedsdrtristate18_oe ? inferedsdrtristate18__o : 1'bz;
assign inferedsdrtristate18__i = IO_sdram_dq[18];

assign IO_sdram_dq[19] = inferedsdrtristate19_oe ? inferedsdrtristate19__o : 1'bz;
assign inferedsdrtristate19__i = IO_sdram_dq[19];

assign IO_sdram_dq[20] = inferedsdrtristate20_oe ? inferedsdrtristate20__o : 1'bz;
assign inferedsdrtristate20__i = IO_sdram_dq[20];

assign IO_sdram_dq[21] = inferedsdrtristate21_oe ? inferedsdrtristate21__o : 1'bz;
assign inferedsdrtristate21__i = IO_sdram_dq[21];

assign IO_sdram_dq[22] = inferedsdrtristate22_oe ? inferedsdrtristate22__o : 1'bz;
assign inferedsdrtristate22__i = IO_sdram_dq[22];

assign IO_sdram_dq[23] = inferedsdrtristate23_oe ? inferedsdrtristate23__o : 1'bz;
assign inferedsdrtristate23__i = IO_sdram_dq[23];

assign IO_sdram_dq[24] = inferedsdrtristate24_oe ? inferedsdrtristate24__o : 1'bz;
assign inferedsdrtristate24__i = IO_sdram_dq[24];

assign IO_sdram_dq[25] = inferedsdrtristate25_oe ? inferedsdrtristate25__o : 1'bz;
assign inferedsdrtristate25__i = IO_sdram_dq[25];

assign IO_sdram_dq[26] = inferedsdrtristate26_oe ? inferedsdrtristate26__o : 1'bz;
assign inferedsdrtristate26__i = IO_sdram_dq[26];

assign IO_sdram_dq[27] = inferedsdrtristate27_oe ? inferedsdrtristate27__o : 1'bz;
assign inferedsdrtristate27__i = IO_sdram_dq[27];

assign IO_sdram_dq[28] = inferedsdrtristate28_oe ? inferedsdrtristate28__o : 1'bz;
assign inferedsdrtristate28__i = IO_sdram_dq[28];

assign IO_sdram_dq[29] = inferedsdrtristate29_oe ? inferedsdrtristate29__o : 1'bz;
assign inferedsdrtristate29__i = IO_sdram_dq[29];

assign IO_sdram_dq[30] = inferedsdrtristate30_oe ? inferedsdrtristate30__o : 1'bz;
assign inferedsdrtristate30__i = IO_sdram_dq[30];

assign IO_sdram_dq[31] = inferedsdrtristate31_oe ? inferedsdrtristate31__o : 1'bz;
assign inferedsdrtristate31__i = IO_sdram_dq[31];

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-02-12 19:24:27.
//------------------------------------------------------------------------------
