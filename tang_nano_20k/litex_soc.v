// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litex_soc.v
// Device     : 
// LiteX sha1 : 2bcbbafdd
// Date       : 2025-02-12 16:41:03
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litex_soc (
    input  wire          clk,
    output reg     [7:0] debug,
    input  wire          mmap_m_ack,
    output wire   [29:0] mmap_m_adr,
    output wire    [1:0] mmap_m_bte,
    output wire    [2:0] mmap_m_cti,
    output wire          mmap_m_cyc,
    input  wire   [31:0] mmap_m_dat_r,
    output wire   [31:0] mmap_m_dat_w,
    input  wire          mmap_m_err,
    output wire    [3:0] mmap_m_sel,
    output wire          mmap_m_stb,
    output wire          mmap_m_we,
    output wire          mmap_s_ack,
    input  wire   [29:0] mmap_s_adr,
    input  wire    [1:0] mmap_s_bte,
    input  wire    [2:0] mmap_s_cti,
    input  wire          mmap_s_cyc,
    output wire   [31:0] mmap_s_dat_r,
    input  wire   [31:0] mmap_s_dat_w,
    output wire          mmap_s_err,
    input  wire    [3:0] mmap_s_sel,
    input  wire          mmap_s_stb,
    input  wire          mmap_s_we,
    input  wire          rst,
    input  wire          uart_rx,
    output reg           uart_tx
);


//------------------------------------------------------------------------------
// Hierarchy
//------------------------------------------------------------------------------

/*
LiteXSoCGenerator
└─── crg (CRG)
└─── bus (SoCBusHandler)
│    └─── _interconnect (InterconnectShared)
│    │    └─── arbiter (Arbiter)
│    │    │    └─── rr (RoundRobin)
│    │    └─── decoder (Decoder)
│    │    └─── timeout (Timeout)
│    │    │    └─── waittimer_0* (WaitTimer)
└─── csr (SoCCSRHandler)
└─── irq (SoCIRQHandler)
└─── ctrl (SoCController)
└─── cpu (VexRiscv)
│    └─── [VexRiscv]
└─── rom (SRAM)
└─── sram (SRAM)
└─── identifier (Identifier)
└─── uart_phy (RS232PHY)
│    └─── tx (RS232PHYTX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
│    └─── rx (RS232PHYRX)
│    │    └─── clk_phase_accum (RS232ClkPhaseAccum)
│    │    └─── fsm (FSM)
└─── uart (UART)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
│    │    └─── eventsourceprocess_1* (EventSourceProcess)
│    └─── tx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
│    └─── rx_fifo (SyncFIFO)
│    │    └─── fifo (SyncFIFOBuffered)
│    │    │    └─── fifo (SyncFIFO)
└─── timer0 (Timer)
│    └─── ev (EventManager)
│    │    └─── eventsourceprocess_0* (EventSourceProcess)
└─── csr_bridge (Wishbone2CSR)
│    └─── fsm (FSM)
└─── csr_bankarray (CSRBankArray)
│    └─── csrbank_0* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    └─── sram_0* (SRAM)
│    └─── csrbank_1* (CSRBank)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstorage_1* (CSRStorage)
│    │    └─── csrstorage_2* (CSRStorage)
│    │    └─── csrstorage_3* (CSRStorage)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstorage_4* (CSRStorage)
│    └─── csrbank_2* (CSRBank)
│    │    └─── csrstatus_0* (CSRStatus)
│    │    └─── csrstatus_1* (CSRStatus)
│    │    └─── csrstatus_2* (CSRStatus)
│    │    └─── csrstatus_3* (CSRStatus)
│    │    └─── csrstorage_0* (CSRStorage)
│    │    └─── csrstatus_4* (CSRStatus)
│    │    └─── csrstatus_5* (CSRStatus)
└─── csr_interconnect (InterconnectShared)
* : Generated name.
[]: BlackBox.
*/

//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg    [29:0] array_muxed0 = 30'd0;
reg    [31:0] array_muxed1 = 32'd0;
reg     [3:0] array_muxed2 = 4'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg     [2:0] array_muxed6 = 3'd0;
reg     [1:0] array_muxed7 = 2'd0;
wire          bus_error;
reg    [31:0] bus_errors = 32'd0;
reg           bus_errors_re = 1'd0;
wire   [31:0] bus_errors_status;
wire          bus_errors_we;
reg    [19:0] count = 20'd1000000;
wire          cpu_rst;
wire    [5:0] csr_bankarray_adr;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_r;
reg           csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_bus_errors_w;
reg           csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_r;
reg           csr_bankarray_csrbank0_reset0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank0_reset0_w;
reg           csr_bankarray_csrbank0_reset0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_r;
reg           csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank0_scratch0_w;
reg           csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire          csr_bankarray_csrbank0_sel;
wire          csr_bankarray_csrbank1_en0_r;
reg           csr_bankarray_csrbank1_en0_re = 1'd0;
wire          csr_bankarray_csrbank1_en0_w;
reg           csr_bankarray_csrbank1_en0_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_r;
reg           csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_enable0_w;
reg           csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_r;
reg           csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_pending_w;
reg           csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_r;
reg           csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire          csr_bankarray_csrbank1_ev_status_w;
reg           csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_load0_r;
reg           csr_bankarray_csrbank1_load0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_load0_w;
reg           csr_bankarray_csrbank1_load0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_reload0_r;
reg           csr_bankarray_csrbank1_reload0_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_reload0_w;
reg           csr_bankarray_csrbank1_reload0_we = 1'd0;
wire          csr_bankarray_csrbank1_sel;
wire          csr_bankarray_csrbank1_update_value0_r;
reg           csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire          csr_bankarray_csrbank1_update_value0_w;
reg           csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_value_r;
reg           csr_bankarray_csrbank1_value_re = 1'd0;
wire   [31:0] csr_bankarray_csrbank1_value_w;
reg           csr_bankarray_csrbank1_value_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_enable0_r;
reg           csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_enable0_w;
reg           csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_pending_r;
reg           csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_pending_w;
reg           csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_status_r;
reg           csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire    [1:0] csr_bankarray_csrbank2_ev_status_w;
reg           csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire          csr_bankarray_csrbank2_rxempty_r;
reg           csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire          csr_bankarray_csrbank2_rxempty_w;
reg           csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire          csr_bankarray_csrbank2_rxfull_r;
reg           csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire          csr_bankarray_csrbank2_rxfull_w;
reg           csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire          csr_bankarray_csrbank2_sel;
wire          csr_bankarray_csrbank2_txempty_r;
reg           csr_bankarray_csrbank2_txempty_re = 1'd0;
wire          csr_bankarray_csrbank2_txempty_w;
reg           csr_bankarray_csrbank2_txempty_we = 1'd0;
wire          csr_bankarray_csrbank2_txfull_r;
reg           csr_bankarray_csrbank2_txfull_re = 1'd0;
wire          csr_bankarray_csrbank2_txfull_w;
reg           csr_bankarray_csrbank2_txfull_we = 1'd0;
wire    [7:0] csr_bankarray_dat_r;
wire   [13:0] csr_bankarray_interface0_bank_bus_adr;
reg    [31:0] csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface0_bank_bus_dat_w;
wire          csr_bankarray_interface0_bank_bus_re;
wire          csr_bankarray_interface0_bank_bus_we;
wire   [13:0] csr_bankarray_interface1_bank_bus_adr;
reg    [31:0] csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface1_bank_bus_dat_w;
wire          csr_bankarray_interface1_bank_bus_re;
wire          csr_bankarray_interface1_bank_bus_we;
wire   [13:0] csr_bankarray_interface2_bank_bus_adr;
reg    [31:0] csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_interface2_bank_bus_dat_w;
wire          csr_bankarray_interface2_bank_bus_re;
wire          csr_bankarray_interface2_bank_bus_we;
wire          csr_bankarray_sel;
reg           csr_bankarray_sel_r = 1'd0;
wire   [13:0] csr_bankarray_sram_bus_adr;
reg    [31:0] csr_bankarray_sram_bus_dat_r = 32'd0;
wire   [31:0] csr_bankarray_sram_bus_dat_w;
wire          csr_bankarray_sram_bus_re;
wire          csr_bankarray_sram_bus_we;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_re;
wire          csr_interconnect_we;
wire          dbus_ack;
wire   [29:0] dbus_adr;
wire    [1:0] dbus_bte;
wire    [2:0] dbus_cti;
wire          dbus_cyc;
wire   [31:0] dbus_dat_r;
wire   [31:0] dbus_dat_w;
wire          dbus_err;
wire    [3:0] dbus_sel;
wire          dbus_stb;
wire          dbus_we;
wire          done;
reg           error = 1'd0;
reg     [1:0] grant = 2'd0;
wire          ibus_ack;
wire   [29:0] ibus_adr;
wire    [1:0] ibus_bte;
wire    [2:0] ibus_cti;
wire          ibus_cyc;
wire   [31:0] ibus_dat_r;
wire   [31:0] ibus_dat_w;
wire          ibus_err;
wire    [3:0] ibus_sel;
wire          ibus_stb;
wire          ibus_we;
reg           int_rst = 1'd1;
wire          interface0_ack0;
reg           interface0_ack1 = 1'd0;
wire   [29:0] interface0_adr0;
wire   [29:0] interface0_adr1;
wire    [1:0] interface0_bte0;
wire    [1:0] interface0_bte1;
wire    [2:0] interface0_cti0;
wire    [2:0] interface0_cti1;
wire          interface0_cyc0;
wire          interface0_cyc1;
wire   [31:0] interface0_dat_r0;
reg    [31:0] interface0_dat_r1 = 32'd0;
wire   [31:0] interface0_dat_w0;
wire   [31:0] interface0_dat_w1;
wire          interface0_err0;
reg           interface0_err1 = 1'd0;
wire    [3:0] interface0_sel0;
wire    [3:0] interface0_sel1;
wire          interface0_stb0;
wire          interface0_stb1;
wire          interface0_we0;
wire          interface0_we1;
wire          interface1_ack;
wire   [29:0] interface1_adr0;
reg    [13:0] interface1_adr1 = 14'd0;
wire    [1:0] interface1_bte;
wire    [2:0] interface1_cti;
wire          interface1_cyc;
wire   [31:0] interface1_dat_r0;
wire   [31:0] interface1_dat_r1;
wire   [31:0] interface1_dat_w0;
reg    [31:0] interface1_dat_w1 = 32'd0;
wire          interface1_err;
reg           interface1_re = 1'd0;
wire    [3:0] interface1_sel;
wire          interface1_stb;
wire          interface1_we0;
reg           interface1_we1 = 1'd0;
reg    [31:0] interrupt = 32'd0;
wire   [14:0] litexsocgenerator_adr;
reg           litexsocgenerator_adr_burst = 1'd0;
wire   [31:0] litexsocgenerator_dat_r;
reg           litexsocgenerator_ram_bus_ack = 1'd0;
wire   [29:0] litexsocgenerator_ram_bus_adr;
wire    [1:0] litexsocgenerator_ram_bus_bte;
wire    [2:0] litexsocgenerator_ram_bus_cti;
wire          litexsocgenerator_ram_bus_cyc;
wire   [31:0] litexsocgenerator_ram_bus_dat_r;
wire   [31:0] litexsocgenerator_ram_bus_dat_w;
reg           litexsocgenerator_ram_bus_err = 1'd0;
wire    [3:0] litexsocgenerator_ram_bus_sel;
wire          litexsocgenerator_ram_bus_stb;
wire          litexsocgenerator_ram_bus_we;
reg           next_state = 1'd0;
wire          por_clk;
wire   [10:0] ram_adr;
reg           ram_adr_burst = 1'd0;
reg           ram_bus_ram_bus_ack = 1'd0;
wire   [29:0] ram_bus_ram_bus_adr;
wire    [1:0] ram_bus_ram_bus_bte;
wire    [2:0] ram_bus_ram_bus_cti;
wire          ram_bus_ram_bus_cyc;
wire   [31:0] ram_bus_ram_bus_dat_r;
wire   [31:0] ram_bus_ram_bus_dat_w;
reg           ram_bus_ram_bus_err = 1'd0;
wire    [3:0] ram_bus_ram_bus_sel;
wire          ram_bus_ram_bus_stb;
wire          ram_bus_ram_bus_we;
wire   [31:0] ram_dat_r;
wire   [31:0] ram_dat_w;
reg     [3:0] ram_we = 4'd0;
reg           regs0 = 1'd0;
reg           regs1 = 1'd0;
wire    [2:0] request;
wire          reset;
reg           reset_re = 1'd0;
reg     [1:0] reset_storage = 2'd0;
reg           rs232phyrx_next_state = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg           rs232phytx_state = 1'd0;
reg     [3:0] rx_count = 4'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data = 8'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg           rx_enable = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
wire          rx_source_ready;
reg           rx_source_valid = 1'd0;
reg           rx_tick = 1'd0;
reg           scratch_re = 1'd0;
reg    [31:0] scratch_storage = 32'd305419896;
reg           shared_ack = 1'd0;
wire   [29:0] shared_adr;
wire    [1:0] shared_bte;
wire    [2:0] shared_cti;
wire          shared_cyc;
reg    [31:0] shared_dat_r = 32'd0;
wire   [31:0] shared_dat_w;
wire          shared_err;
wire    [3:0] shared_sel;
wire          shared_stb;
wire          shared_we;
reg     [3:0] slave_sel = 4'd0;
reg     [3:0] slave_sel_r = 4'd0;
reg           soc_rst = 1'd0;
reg           state = 1'd0;
wire          sys_clk;
wire          sys_rst;
reg           timer_en_re = 1'd0;
reg           timer_en_storage = 1'd0;
reg           timer_enable_re = 1'd0;
reg           timer_enable_storage = 1'd0;
wire          timer_irq;
reg           timer_load_re = 1'd0;
reg    [31:0] timer_load_storage = 32'd0;
reg           timer_pending_r = 1'd0;
reg           timer_pending_re = 1'd0;
wire          timer_pending_status;
wire          timer_pending_we;
reg           timer_reload_re = 1'd0;
reg    [31:0] timer_reload_storage = 32'd0;
reg           timer_status_re = 1'd0;
wire          timer_status_status;
wire          timer_status_we;
reg           timer_update_value_re = 1'd0;
reg           timer_update_value_storage = 1'd0;
reg    [31:0] timer_value = 32'd0;
reg           timer_value_re = 1'd0;
reg    [31:0] timer_value_status = 32'd0;
wire          timer_value_we;
wire          timer_zero0;
wire          timer_zero1;
wire          timer_zero2;
reg           timer_zero_clear = 1'd0;
reg           timer_zero_pending = 1'd0;
wire          timer_zero_status;
wire          timer_zero_trigger;
reg           timer_zero_trigger_d = 1'd0;
reg     [3:0] tx_count = 4'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg     [7:0] tx_data = 8'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           tx_enable = 1'd0;
reg    [31:0] tx_phase = 32'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_valid;
reg           tx_tick = 1'd0;
reg           uart_enable_re = 1'd0;
reg     [1:0] uart_enable_storage = 2'd0;
wire          uart_irq;
reg     [1:0] uart_pending_r = 2'd0;
reg           uart_pending_re = 1'd0;
reg     [1:0] uart_pending_status = 2'd0;
wire          uart_pending_we;
wire          uart_rx1;
wire          uart_rx2;
wire          uart_rx3;
reg           uart_rx_clear = 1'd0;
reg     [3:0] uart_rx_fifo_consume = 4'd0;
wire          uart_rx_fifo_do_read;
wire          uart_rx_fifo_fifo_in_first;
wire          uart_rx_fifo_fifo_in_last;
wire    [7:0] uart_rx_fifo_fifo_in_payload_data;
wire          uart_rx_fifo_fifo_out_first;
wire          uart_rx_fifo_fifo_out_last;
wire    [7:0] uart_rx_fifo_fifo_out_payload_data;
reg     [4:0] uart_rx_fifo_level0 = 5'd0;
wire    [4:0] uart_rx_fifo_level1;
reg     [3:0] uart_rx_fifo_produce = 4'd0;
wire    [3:0] uart_rx_fifo_rdport_adr;
wire    [9:0] uart_rx_fifo_rdport_dat_r;
wire          uart_rx_fifo_rdport_re;
wire          uart_rx_fifo_re;
reg           uart_rx_fifo_readable = 1'd0;
reg           uart_rx_fifo_replace = 1'd0;
wire          uart_rx_fifo_sink_first;
wire          uart_rx_fifo_sink_last;
wire    [7:0] uart_rx_fifo_sink_payload_data;
wire          uart_rx_fifo_sink_ready;
wire          uart_rx_fifo_sink_valid;
wire          uart_rx_fifo_source_first;
wire          uart_rx_fifo_source_last;
wire    [7:0] uart_rx_fifo_source_payload_data;
wire          uart_rx_fifo_source_ready;
wire          uart_rx_fifo_source_valid;
wire    [9:0] uart_rx_fifo_syncfifo_din;
wire    [9:0] uart_rx_fifo_syncfifo_dout;
wire          uart_rx_fifo_syncfifo_re;
wire          uart_rx_fifo_syncfifo_readable;
wire          uart_rx_fifo_syncfifo_we;
wire          uart_rx_fifo_syncfifo_writable;
reg     [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_rx_fifo_wrport_dat_r;
wire    [9:0] uart_rx_fifo_wrport_dat_w;
wire          uart_rx_fifo_wrport_we;
reg           uart_rx_pending = 1'd0;
wire          uart_rx_status;
wire          uart_rx_trigger;
reg           uart_rx_trigger_d = 1'd0;
reg           uart_rxempty_re = 1'd0;
wire          uart_rxempty_status;
wire          uart_rxempty_we;
reg           uart_rxfull_re = 1'd0;
wire          uart_rxfull_status;
wire          uart_rxfull_we;
wire    [7:0] uart_rxtx_r;
reg           uart_rxtx_re = 1'd0;
wire    [7:0] uart_rxtx_w;
reg           uart_rxtx_we = 1'd0;
reg           uart_status_re = 1'd0;
reg     [1:0] uart_status_status = 2'd0;
wire          uart_status_we;
reg           uart_tx0_rs232phytx_next_value1 = 1'd0;
reg           uart_tx0_rs232phytx_next_value_ce1 = 1'd0;
wire          uart_tx1;
wire          uart_tx2;
wire          uart_tx3;
reg           uart_tx_clear = 1'd0;
reg     [3:0] uart_tx_fifo_consume = 4'd0;
wire          uart_tx_fifo_do_read;
wire          uart_tx_fifo_fifo_in_first;
wire          uart_tx_fifo_fifo_in_last;
wire    [7:0] uart_tx_fifo_fifo_in_payload_data;
wire          uart_tx_fifo_fifo_out_first;
wire          uart_tx_fifo_fifo_out_last;
wire    [7:0] uart_tx_fifo_fifo_out_payload_data;
reg     [4:0] uart_tx_fifo_level0 = 5'd0;
wire    [4:0] uart_tx_fifo_level1;
reg     [3:0] uart_tx_fifo_produce = 4'd0;
wire    [3:0] uart_tx_fifo_rdport_adr;
wire    [9:0] uart_tx_fifo_rdport_dat_r;
wire          uart_tx_fifo_rdport_re;
wire          uart_tx_fifo_re;
reg           uart_tx_fifo_readable = 1'd0;
reg           uart_tx_fifo_replace = 1'd0;
reg           uart_tx_fifo_sink_first = 1'd0;
reg           uart_tx_fifo_sink_last = 1'd0;
wire    [7:0] uart_tx_fifo_sink_payload_data;
wire          uart_tx_fifo_sink_ready;
wire          uart_tx_fifo_sink_valid;
wire          uart_tx_fifo_source_first;
wire          uart_tx_fifo_source_last;
wire    [7:0] uart_tx_fifo_source_payload_data;
wire          uart_tx_fifo_source_ready;
wire          uart_tx_fifo_source_valid;
wire    [9:0] uart_tx_fifo_syncfifo_din;
wire    [9:0] uart_tx_fifo_syncfifo_dout;
wire          uart_tx_fifo_syncfifo_re;
wire          uart_tx_fifo_syncfifo_readable;
wire          uart_tx_fifo_syncfifo_we;
wire          uart_tx_fifo_syncfifo_writable;
reg     [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire    [9:0] uart_tx_fifo_wrport_dat_r;
wire    [9:0] uart_tx_fifo_wrport_dat_w;
wire          uart_tx_fifo_wrport_we;
reg           uart_tx_pending = 1'd0;
wire          uart_tx_status;
wire          uart_tx_trigger;
reg           uart_tx_trigger_d = 1'd0;
reg           uart_txempty_re = 1'd0;
wire          uart_txempty_status;
wire          uart_txempty_we;
reg           uart_txfull_re = 1'd0;
wire          uart_txfull_status;
wire          uart_txfull_we;
wire          uart_uart_sink_first;
wire          uart_uart_sink_last;
wire    [7:0] uart_uart_sink_payload_data;
wire          uart_uart_sink_ready;
wire          uart_uart_sink_valid;
wire          uart_uart_source_first;
wire          uart_uart_source_last;
wire    [7:0] uart_uart_source_payload_data;
wire          uart_uart_source_ready;
wire          uart_uart_source_valid;
reg    [31:0] vexriscv = 32'd0;
wire          wait_1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign interface0_adr0 = mmap_s_adr;
assign interface0_dat_w0 = mmap_s_dat_w;
assign mmap_s_dat_r = interface0_dat_r0;
assign interface0_sel0 = mmap_s_sel;
assign interface0_cyc0 = mmap_s_cyc;
assign interface0_stb0 = mmap_s_stb;
assign mmap_s_ack = interface0_ack0;
assign interface0_we0 = mmap_s_we;
assign interface0_cti0 = mmap_s_cti;
assign interface0_bte0 = mmap_s_bte;
assign mmap_s_err = interface0_err0;
assign mmap_m_adr = interface1_adr0;
assign mmap_m_dat_w = interface1_dat_w0;
assign interface1_dat_r0 = mmap_m_dat_r;
assign mmap_m_sel = interface1_sel;
assign mmap_m_cyc = interface1_cyc;
assign mmap_m_stb = interface1_stb;
assign interface1_ack = mmap_m_ack;
assign mmap_m_we = interface1_we0;
assign mmap_m_cti = interface1_cti;
assign mmap_m_bte = interface1_bte;
assign interface1_err = mmap_m_err;
always @(*) begin
    debug <= 8'd0;
    debug[0] <= 1'd0;
    debug[1] <= 1'd1;
end
assign bus_error = error;
always @(*) begin
    interrupt <= 32'd0;
    interrupt[1] <= timer_irq;
    interrupt[0] <= uart_irq;
end
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign interface0_dat_r0 = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign interface0_ack0 = (shared_ack & (grant == 2'd2));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign interface0_err0 = (shared_err & (grant == 2'd2));
assign request = {interface0_cyc0, dbus_cyc, ibus_cyc};
always @(*) begin
    slave_sel <= 4'd0;
    slave_sel[0] <= (shared_adr[29:15] == 1'd0);
    slave_sel[1] <= (shared_adr[29:11] == 16'd32768);
    slave_sel[2] <= (shared_adr[29:26] == 4'd10);
    slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign litexsocgenerator_ram_bus_adr = shared_adr;
assign litexsocgenerator_ram_bus_dat_w = shared_dat_w;
assign litexsocgenerator_ram_bus_sel = shared_sel;
assign litexsocgenerator_ram_bus_stb = shared_stb;
assign litexsocgenerator_ram_bus_we = shared_we;
assign litexsocgenerator_ram_bus_cti = shared_cti;
assign litexsocgenerator_ram_bus_bte = shared_bte;
assign ram_bus_ram_bus_adr = shared_adr;
assign ram_bus_ram_bus_dat_w = shared_dat_w;
assign ram_bus_ram_bus_sel = shared_sel;
assign ram_bus_ram_bus_stb = shared_stb;
assign ram_bus_ram_bus_we = shared_we;
assign ram_bus_ram_bus_cti = shared_cti;
assign ram_bus_ram_bus_bte = shared_bte;
assign interface1_adr0 = shared_adr;
assign interface1_dat_w0 = shared_dat_w;
assign interface1_sel = shared_sel;
assign interface1_stb = shared_stb;
assign interface1_we0 = shared_we;
assign interface1_cti = shared_cti;
assign interface1_bte = shared_bte;
assign interface0_adr1 = shared_adr;
assign interface0_dat_w1 = shared_dat_w;
assign interface0_sel1 = shared_sel;
assign interface0_stb1 = shared_stb;
assign interface0_we1 = shared_we;
assign interface0_cti1 = shared_cti;
assign interface0_bte1 = shared_bte;
assign litexsocgenerator_ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign ram_bus_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_cyc = (shared_cyc & slave_sel[2]);
assign interface0_cyc1 = (shared_cyc & slave_sel[3]);
assign shared_err = (((litexsocgenerator_ram_bus_err | ram_bus_ram_bus_err) | interface1_err) | interface0_err1);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
    error <= 1'd0;
    shared_ack <= 1'd0;
    shared_dat_r <= 32'd0;
    shared_ack <= (((litexsocgenerator_ram_bus_ack | ram_bus_ram_bus_ack) | interface1_ack) | interface0_ack1);
    shared_dat_r <= (((({32{slave_sel_r[0]}} & litexsocgenerator_ram_bus_dat_r) | ({32{slave_sel_r[1]}} & ram_bus_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_dat_r0)) | ({32{slave_sel_r[3]}} & interface0_dat_r1));
    if (done) begin
        shared_dat_r <= 32'd4294967295;
        shared_ack <= 1'd1;
        error <= 1'd1;
    end
end
assign done = (count == 1'd0);
assign bus_errors_status = bus_errors;
assign litexsocgenerator_adr = litexsocgenerator_ram_bus_adr[14:0];
assign litexsocgenerator_ram_bus_dat_r = litexsocgenerator_dat_r;
always @(*) begin
    ram_we <= 4'd0;
    ram_we[0] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[0]);
    ram_we[1] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[1]);
    ram_we[2] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[2]);
    ram_we[3] <= (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ram_bus_ram_bus_we) & ram_bus_ram_bus_sel[3]);
end
assign ram_adr = ram_bus_ram_bus_adr[10:0];
assign ram_bus_ram_bus_dat_r = ram_dat_r;
assign ram_dat_w = ram_bus_ram_bus_dat_w;
always @(*) begin
    rs232phytx_next_state <= 1'd0;
    tx_count_rs232phytx_next_value0 <= 4'd0;
    tx_count_rs232phytx_next_value_ce0 <= 1'd0;
    tx_data_rs232phytx_next_value2 <= 8'd0;
    tx_data_rs232phytx_next_value_ce2 <= 1'd0;
    tx_enable <= 1'd0;
    tx_sink_ready <= 1'd0;
    uart_tx0_rs232phytx_next_value1 <= 1'd0;
    uart_tx0_rs232phytx_next_value_ce1 <= 1'd0;
    rs232phytx_next_state <= rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            tx_enable <= 1'd1;
            if (tx_tick) begin
                uart_tx0_rs232phytx_next_value1 <= tx_data;
                uart_tx0_rs232phytx_next_value_ce1 <= 1'd1;
                tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready <= 1'd1;
                    rs232phytx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 <= 1'd0;
            tx_count_rs232phytx_next_value_ce0 <= 1'd1;
            uart_tx0_rs232phytx_next_value1 <= 1'd1;
            uart_tx0_rs232phytx_next_value_ce1 <= 1'd1;
            if (tx_sink_valid) begin
                uart_tx0_rs232phytx_next_value1 <= 1'd0;
                uart_tx0_rs232phytx_next_value_ce1 <= 1'd1;
                tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 <= 1'd1;
                rs232phytx_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    rs232phyrx_next_state <= 1'd0;
    rx_count_rs232phyrx_next_value0 <= 4'd0;
    rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
    rx_data_rs232phyrx_next_value1 <= 8'd0;
    rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
    rx_enable <= 1'd0;
    rx_source_payload_data <= 8'd0;
    rx_source_valid <= 1'd0;
    rs232phyrx_next_state <= rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            rx_enable <= 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
                rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid <= (rx_rx == 1'd1);
                    rx_source_payload_data <= rx_data;
                    rs232phyrx_next_state <= 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 <= 1'd0;
            rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state <= 1'd1;
            end
        end
    endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx1 = uart_tx_status;
assign uart_tx2 = uart_tx_pending;
always @(*) begin
    uart_tx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[0])) begin
        uart_tx_clear <= 1'd1;
    end
end
assign uart_rx1 = uart_rx_status;
assign uart_rx2 = uart_rx_pending;
always @(*) begin
    uart_rx_clear <= 1'd0;
    if ((uart_pending_re & uart_pending_r[1])) begin
        uart_rx_clear <= 1'd1;
    end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
    uart_tx_fifo_wrport_adr <= 4'd0;
    if (uart_tx_fifo_replace) begin
        uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
    end else begin
        uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
    end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
    uart_rx_fifo_wrport_adr <= 4'd0;
    if (uart_rx_fifo_replace) begin
        uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
    end else begin
        uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
    end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
    timer_zero_clear <= 1'd0;
    if ((timer_pending_re & timer_pending_r)) begin
        timer_zero_clear <= 1'd1;
    end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
always @(*) begin
    interface0_ack1 <= 1'd0;
    interface0_dat_r1 <= 32'd0;
    interface1_adr1 <= 14'd0;
    interface1_dat_w1 <= 32'd0;
    interface1_re <= 1'd0;
    interface1_we1 <= 1'd0;
    next_state <= 1'd0;
    next_state <= state;
    case (state)
        1'd1: begin
            interface0_ack1 <= 1'd1;
            interface0_dat_r1 <= interface1_dat_r1;
            next_state <= 1'd0;
        end
        default: begin
            interface1_dat_w1 <= interface0_dat_w1;
            if ((interface0_cyc1 & interface0_stb1)) begin
                interface1_adr1 <= interface0_adr1;
                interface1_re <= ((~interface0_we1) & (interface0_sel1 != 1'd0));
                interface1_we1 <= (interface0_we1 & (interface0_sel1 != 1'd0));
                next_state <= 1'd1;
            end
        end
    endcase
end
assign csr_bankarray_csrbank0_sel = (csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign csr_bankarray_csrbank0_reset0_r = csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank0_reset0_re <= 1'd0;
    csr_bankarray_csrbank0_reset0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank0_reset0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_reset0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_scratch0_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_scratch0_re <= 1'd0;
    csr_bankarray_csrbank0_scratch0_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank0_scratch0_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_scratch0_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
assign csr_bankarray_csrbank0_bus_errors_r = csr_bankarray_interface0_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
    csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
    if ((csr_bankarray_csrbank0_sel & (csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank0_bus_errors_re <= csr_bankarray_interface0_bank_bus_we;
        csr_bankarray_csrbank0_bus_errors_we <= csr_bankarray_interface0_bank_bus_re;
    end
end
always @(*) begin
    soc_rst <= 1'd0;
    if (reset_re) begin
        soc_rst <= reset_storage[0];
    end
end
assign cpu_rst = reset_storage[1];
assign csr_bankarray_csrbank0_reset0_w = reset_storage;
assign csr_bankarray_csrbank0_scratch0_w = scratch_storage;
assign csr_bankarray_csrbank0_bus_errors_w = bus_errors_status;
assign bus_errors_we = csr_bankarray_csrbank0_bus_errors_we;
assign csr_bankarray_sel = (csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
    csr_bankarray_sram_bus_dat_r <= 32'd0;
    if (csr_bankarray_sel_r) begin
        csr_bankarray_sram_bus_dat_r <= csr_bankarray_dat_r;
    end
end
assign csr_bankarray_adr = csr_bankarray_sram_bus_adr[5:0];
assign csr_bankarray_csrbank1_sel = (csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign csr_bankarray_csrbank1_load0_r = csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank1_load0_re <= 1'd0;
    csr_bankarray_csrbank1_load0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csr_bankarray_csrbank1_load0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_load0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_reload0_r = csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank1_reload0_re <= 1'd0;
    csr_bankarray_csrbank1_reload0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank1_reload0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_reload0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_en0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_en0_re <= 1'd0;
    csr_bankarray_csrbank1_en0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank1_en0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_en0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_update_value0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_update_value0_re <= 1'd0;
    csr_bankarray_csrbank1_update_value0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank1_update_value0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_update_value0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_value_r = csr_bankarray_interface1_bank_bus_dat_w;
always @(*) begin
    csr_bankarray_csrbank1_value_re <= 1'd0;
    csr_bankarray_csrbank1_value_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank1_value_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_value_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_status_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_status_re <= 1'd0;
    csr_bankarray_csrbank1_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank1_ev_status_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_status_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_pending_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank1_ev_pending_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_pending_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_ev_enable0_r = csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank1_sel & (csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank1_ev_enable0_re <= csr_bankarray_interface1_bank_bus_we;
        csr_bankarray_csrbank1_ev_enable0_we <= csr_bankarray_interface1_bank_bus_re;
    end
end
assign csr_bankarray_csrbank1_load0_w = timer_load_storage;
assign csr_bankarray_csrbank1_reload0_w = timer_reload_storage;
assign csr_bankarray_csrbank1_en0_w = timer_en_storage;
assign csr_bankarray_csrbank1_update_value0_w = timer_update_value_storage;
assign csr_bankarray_csrbank1_value_w = timer_value_status;
assign timer_value_we = csr_bankarray_csrbank1_value_we;
assign timer_status_status = timer_zero0;
assign csr_bankarray_csrbank1_ev_status_w = timer_status_status;
assign timer_status_we = csr_bankarray_csrbank1_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csr_bankarray_csrbank1_ev_pending_w = timer_pending_status;
assign timer_pending_we = csr_bankarray_csrbank1_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csr_bankarray_csrbank1_ev_enable0_w = timer_enable_storage;
assign csr_bankarray_csrbank2_sel = (csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign uart_rxtx_r = csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
    uart_rxtx_re <= 1'd0;
    uart_rxtx_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
        uart_rxtx_re <= csr_bankarray_interface2_bank_bus_we;
        uart_rxtx_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txfull_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_txfull_re <= 1'd0;
    csr_bankarray_csrbank2_txfull_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csr_bankarray_csrbank2_txfull_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_txfull_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_rxempty_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_rxempty_re <= 1'd0;
    csr_bankarray_csrbank2_rxempty_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
        csr_bankarray_csrbank2_rxempty_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_rxempty_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_status_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_status_re <= 1'd0;
    csr_bankarray_csrbank2_ev_status_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csr_bankarray_csrbank2_ev_status_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_status_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_pending_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
    csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csr_bankarray_csrbank2_ev_pending_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_pending_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_ev_enable0_r = csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
    csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
    csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csr_bankarray_csrbank2_ev_enable0_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_ev_enable0_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txempty_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_txempty_re <= 1'd0;
    csr_bankarray_csrbank2_txempty_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csr_bankarray_csrbank2_txempty_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_txempty_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_rxfull_r = csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
    csr_bankarray_csrbank2_rxfull_re <= 1'd0;
    csr_bankarray_csrbank2_rxfull_we <= 1'd0;
    if ((csr_bankarray_csrbank2_sel & (csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csr_bankarray_csrbank2_rxfull_re <= csr_bankarray_interface2_bank_bus_we;
        csr_bankarray_csrbank2_rxfull_we <= csr_bankarray_interface2_bank_bus_re;
    end
end
assign csr_bankarray_csrbank2_txfull_w = uart_txfull_status;
assign uart_txfull_we = csr_bankarray_csrbank2_txfull_we;
assign csr_bankarray_csrbank2_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
    uart_status_status <= 2'd0;
    uart_status_status[0] <= uart_tx1;
    uart_status_status[1] <= uart_rx1;
end
assign csr_bankarray_csrbank2_ev_status_w = uart_status_status;
assign uart_status_we = csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
    uart_pending_status <= 2'd0;
    uart_pending_status[0] <= uart_tx2;
    uart_pending_status[1] <= uart_rx2;
end
assign csr_bankarray_csrbank2_ev_pending_w = uart_pending_status;
assign uart_pending_we = csr_bankarray_csrbank2_ev_pending_we;
assign uart_tx3 = uart_enable_storage[0];
assign uart_rx3 = uart_enable_storage[1];
assign csr_bankarray_csrbank2_ev_enable0_w = uart_enable_storage;
assign csr_bankarray_csrbank2_txempty_w = uart_txempty_status;
assign uart_txempty_we = csr_bankarray_csrbank2_txempty_we;
assign csr_bankarray_csrbank2_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csr_bankarray_csrbank2_rxfull_we;
assign csr_interconnect_adr = interface1_adr1;
assign csr_interconnect_re = interface1_re;
assign csr_interconnect_we = interface1_we1;
assign csr_interconnect_dat_w = interface1_dat_w1;
assign interface1_dat_r1 = csr_interconnect_dat_r;
assign csr_bankarray_interface0_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface1_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface2_bank_bus_adr = csr_interconnect_adr;
assign csr_bankarray_sram_bus_adr = csr_interconnect_adr;
assign csr_bankarray_interface0_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface1_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_interface2_bank_bus_re = csr_interconnect_re;
assign csr_bankarray_sram_bus_re = csr_interconnect_re;
assign csr_bankarray_interface0_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface1_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_interface2_bank_bus_we = csr_interconnect_we;
assign csr_bankarray_sram_bus_we = csr_interconnect_we;
assign csr_bankarray_interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_bankarray_sram_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((csr_bankarray_interface0_bank_bus_dat_r | csr_bankarray_interface1_bank_bus_dat_r) | csr_bankarray_interface2_bank_bus_dat_r) | csr_bankarray_sram_bus_dat_r);
always @(*) begin
    array_muxed0 <= 30'd0;
    case (grant)
        1'd0: begin
            array_muxed0 <= ibus_adr;
        end
        1'd1: begin
            array_muxed0 <= dbus_adr;
        end
        default: begin
            array_muxed0 <= interface0_adr0;
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 32'd0;
    case (grant)
        1'd0: begin
            array_muxed1 <= ibus_dat_w;
        end
        1'd1: begin
            array_muxed1 <= dbus_dat_w;
        end
        default: begin
            array_muxed1 <= interface0_dat_w0;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 4'd0;
    case (grant)
        1'd0: begin
            array_muxed2 <= ibus_sel;
        end
        1'd1: begin
            array_muxed2 <= dbus_sel;
        end
        default: begin
            array_muxed2 <= interface0_sel0;
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed3 <= ibus_cyc;
        end
        1'd1: begin
            array_muxed3 <= dbus_cyc;
        end
        default: begin
            array_muxed3 <= interface0_cyc0;
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed4 <= ibus_stb;
        end
        1'd1: begin
            array_muxed4 <= dbus_stb;
        end
        default: begin
            array_muxed4 <= interface0_stb0;
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (grant)
        1'd0: begin
            array_muxed5 <= ibus_we;
        end
        1'd1: begin
            array_muxed5 <= dbus_we;
        end
        default: begin
            array_muxed5 <= interface0_we0;
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 3'd0;
    case (grant)
        1'd0: begin
            array_muxed6 <= ibus_cti;
        end
        1'd1: begin
            array_muxed6 <= dbus_cti;
        end
        default: begin
            array_muxed6 <= interface0_cti0;
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 2'd0;
    case (grant)
        1'd0: begin
            array_muxed7 <= ibus_bte;
        end
        1'd1: begin
            array_muxed7 <= dbus_bte;
        end
        default: begin
            array_muxed7 <= interface0_bte0;
        end
    endcase
end
assign rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
    int_rst <= rst;
end

always @(posedge sys_clk) begin
    case (grant)
        1'd0: begin
            if ((~request[0])) begin
                if (request[1]) begin
                    grant <= 1'd1;
                end else begin
                    if (request[2]) begin
                        grant <= 2'd2;
                    end
                end
            end
        end
        1'd1: begin
            if ((~request[1])) begin
                if (request[2]) begin
                    grant <= 2'd2;
                end else begin
                    if (request[0]) begin
                        grant <= 1'd0;
                    end
                end
            end
        end
        2'd2: begin
            if ((~request[2])) begin
                if (request[0]) begin
                    grant <= 1'd0;
                end else begin
                    if (request[1]) begin
                        grant <= 1'd1;
                    end
                end
            end
        end
    endcase
    slave_sel_r <= slave_sel;
    if (wait_1) begin
        if ((~done)) begin
            count <= (count - 1'd1);
        end
    end else begin
        count <= 20'd1000000;
    end
    if ((bus_errors != 32'd4294967295)) begin
        if (bus_error) begin
            bus_errors <= (bus_errors + 1'd1);
        end
    end
    litexsocgenerator_ram_bus_ack <= 1'd0;
    if (((litexsocgenerator_ram_bus_cyc & litexsocgenerator_ram_bus_stb) & ((~litexsocgenerator_ram_bus_ack) | litexsocgenerator_adr_burst))) begin
        litexsocgenerator_ram_bus_ack <= 1'd1;
    end
    ram_bus_ram_bus_ack <= 1'd0;
    if (((ram_bus_ram_bus_cyc & ram_bus_ram_bus_stb) & ((~ram_bus_ram_bus_ack) | ram_adr_burst))) begin
        ram_bus_ram_bus_ack <= 1'd1;
    end
    {tx_tick, tx_phase} <= 24'd9895604;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 24'd9895604);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (uart_tx0_rs232phytx_next_value_ce1) begin
        uart_tx <= uart_tx0_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 24'd9895604);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (uart_tx_clear) begin
        uart_tx_pending <= 1'd0;
    end
    uart_tx_trigger_d <= uart_tx_trigger;
    if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
        uart_tx_pending <= 1'd1;
    end
    if (uart_rx_clear) begin
        uart_rx_pending <= 1'd0;
    end
    uart_rx_trigger_d <= uart_rx_trigger;
    if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
        uart_rx_pending <= 1'd1;
    end
    if (uart_tx_fifo_syncfifo_re) begin
        uart_tx_fifo_readable <= 1'd1;
    end else begin
        if (uart_tx_fifo_re) begin
            uart_tx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
    end
    if (uart_tx_fifo_do_read) begin
        uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
    end
    if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
        if ((~uart_tx_fifo_do_read)) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_tx_fifo_do_read) begin
            uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
        end
    end
    if (uart_rx_fifo_syncfifo_re) begin
        uart_rx_fifo_readable <= 1'd1;
    end else begin
        if (uart_rx_fifo_re) begin
            uart_rx_fifo_readable <= 1'd0;
        end
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
    end
    if (uart_rx_fifo_do_read) begin
        uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
    end
    if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
        if ((~uart_rx_fifo_do_read)) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (uart_rx_fifo_do_read) begin
            uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
        end
    end
    if (timer_en_storage) begin
        if ((timer_value == 1'd0)) begin
            timer_value <= timer_reload_storage;
        end else begin
            timer_value <= (timer_value - 1'd1);
        end
    end else begin
        timer_value <= timer_load_storage;
    end
    if (timer_update_value_re) begin
        timer_value_status <= timer_value;
    end
    if (timer_zero_clear) begin
        timer_zero_pending <= 1'd0;
    end
    timer_zero_trigger_d <= timer_zero_trigger;
    if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
        timer_zero_pending <= 1'd1;
    end
    state <= next_state;
    csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank0_sel) begin
        case (csr_bankarray_interface0_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_reset0_w;
            end
            1'd1: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_scratch0_w;
            end
            2'd2: begin
                csr_bankarray_interface0_bank_bus_dat_r <= csr_bankarray_csrbank0_bus_errors_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank0_reset0_re) begin
        reset_storage <= csr_bankarray_csrbank0_reset0_r;
    end
    reset_re <= csr_bankarray_csrbank0_reset0_re;
    if (csr_bankarray_csrbank0_scratch0_re) begin
        scratch_storage <= csr_bankarray_csrbank0_scratch0_r;
    end
    scratch_re <= csr_bankarray_csrbank0_scratch0_re;
    bus_errors_re <= csr_bankarray_csrbank0_bus_errors_re;
    csr_bankarray_sel_r <= csr_bankarray_sel;
    csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank1_sel) begin
        case (csr_bankarray_interface1_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_load0_w;
            end
            1'd1: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_reload0_w;
            end
            2'd2: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_en0_w;
            end
            2'd3: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_update_value0_w;
            end
            3'd4: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_value_w;
            end
            3'd5: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_status_w;
            end
            3'd6: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_pending_w;
            end
            3'd7: begin
                csr_bankarray_interface1_bank_bus_dat_r <= csr_bankarray_csrbank1_ev_enable0_w;
            end
        endcase
    end
    if (csr_bankarray_csrbank1_load0_re) begin
        timer_load_storage <= csr_bankarray_csrbank1_load0_r;
    end
    timer_load_re <= csr_bankarray_csrbank1_load0_re;
    if (csr_bankarray_csrbank1_reload0_re) begin
        timer_reload_storage <= csr_bankarray_csrbank1_reload0_r;
    end
    timer_reload_re <= csr_bankarray_csrbank1_reload0_re;
    if (csr_bankarray_csrbank1_en0_re) begin
        timer_en_storage <= csr_bankarray_csrbank1_en0_r;
    end
    timer_en_re <= csr_bankarray_csrbank1_en0_re;
    if (csr_bankarray_csrbank1_update_value0_re) begin
        timer_update_value_storage <= csr_bankarray_csrbank1_update_value0_r;
    end
    timer_update_value_re <= csr_bankarray_csrbank1_update_value0_re;
    timer_value_re <= csr_bankarray_csrbank1_value_re;
    timer_status_re <= csr_bankarray_csrbank1_ev_status_re;
    if (csr_bankarray_csrbank1_ev_pending_re) begin
        timer_pending_r <= csr_bankarray_csrbank1_ev_pending_r;
    end
    timer_pending_re <= csr_bankarray_csrbank1_ev_pending_re;
    if (csr_bankarray_csrbank1_ev_enable0_re) begin
        timer_enable_storage <= csr_bankarray_csrbank1_ev_enable0_r;
    end
    timer_enable_re <= csr_bankarray_csrbank1_ev_enable0_re;
    csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
    if (csr_bankarray_csrbank2_sel) begin
        case (csr_bankarray_interface2_bank_bus_adr[8:0])
            1'd0: begin
                csr_bankarray_interface2_bank_bus_dat_r <= uart_rxtx_w;
            end
            1'd1: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_txfull_w;
            end
            2'd2: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_rxempty_w;
            end
            2'd3: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_status_w;
            end
            3'd4: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_pending_w;
            end
            3'd5: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_ev_enable0_w;
            end
            3'd6: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_txempty_w;
            end
            3'd7: begin
                csr_bankarray_interface2_bank_bus_dat_r <= csr_bankarray_csrbank2_rxfull_w;
            end
        endcase
    end
    uart_txfull_re <= csr_bankarray_csrbank2_txfull_re;
    uart_rxempty_re <= csr_bankarray_csrbank2_rxempty_re;
    uart_status_re <= csr_bankarray_csrbank2_ev_status_re;
    if (csr_bankarray_csrbank2_ev_pending_re) begin
        uart_pending_r <= csr_bankarray_csrbank2_ev_pending_r;
    end
    uart_pending_re <= csr_bankarray_csrbank2_ev_pending_re;
    if (csr_bankarray_csrbank2_ev_enable0_re) begin
        uart_enable_storage <= csr_bankarray_csrbank2_ev_enable0_r;
    end
    uart_enable_re <= csr_bankarray_csrbank2_ev_enable0_re;
    uart_txempty_re <= csr_bankarray_csrbank2_txempty_re;
    uart_rxfull_re <= csr_bankarray_csrbank2_rxfull_re;
    if (sys_rst) begin
        reset_storage <= 2'd0;
        reset_re <= 1'd0;
        scratch_storage <= 32'd305419896;
        scratch_re <= 1'd0;
        bus_errors_re <= 1'd0;
        bus_errors <= 32'd0;
        litexsocgenerator_ram_bus_ack <= 1'd0;
        ram_bus_ram_bus_ack <= 1'd0;
        uart_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        uart_txfull_re <= 1'd0;
        uart_rxempty_re <= 1'd0;
        uart_tx_pending <= 1'd0;
        uart_tx_trigger_d <= 1'd0;
        uart_rx_pending <= 1'd0;
        uart_rx_trigger_d <= 1'd0;
        uart_status_re <= 1'd0;
        uart_pending_re <= 1'd0;
        uart_pending_r <= 2'd0;
        uart_enable_storage <= 2'd0;
        uart_enable_re <= 1'd0;
        uart_txempty_re <= 1'd0;
        uart_rxfull_re <= 1'd0;
        uart_tx_fifo_readable <= 1'd0;
        uart_tx_fifo_level0 <= 5'd0;
        uart_tx_fifo_produce <= 4'd0;
        uart_tx_fifo_consume <= 4'd0;
        uart_rx_fifo_readable <= 1'd0;
        uart_rx_fifo_level0 <= 5'd0;
        uart_rx_fifo_produce <= 4'd0;
        uart_rx_fifo_consume <= 4'd0;
        timer_load_storage <= 32'd0;
        timer_load_re <= 1'd0;
        timer_reload_storage <= 32'd0;
        timer_reload_re <= 1'd0;
        timer_en_storage <= 1'd0;
        timer_en_re <= 1'd0;
        timer_update_value_storage <= 1'd0;
        timer_update_value_re <= 1'd0;
        timer_value_status <= 32'd0;
        timer_value_re <= 1'd0;
        timer_zero_pending <= 1'd0;
        timer_zero_trigger_d <= 1'd0;
        timer_status_re <= 1'd0;
        timer_pending_re <= 1'd0;
        timer_pending_r <= 1'd0;
        timer_enable_storage <= 1'd0;
        timer_enable_re <= 1'd0;
        timer_value <= 32'd0;
        grant <= 2'd0;
        slave_sel_r <= 4'd0;
        count <= 20'd1000000;
        csr_bankarray_sel_r <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        state <= 1'd0;
    end
    regs0 <= uart_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5996-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5995];
initial begin
	$readmemh("litex_soc_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk) begin
	rom_dat0 <= rom[litexsocgenerator_adr];
end
assign litexsocgenerator_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("litex_soc_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk) begin
	if (ram_we[0])
		sram[ram_adr][7:0] <= ram_dat_w[7:0];
	if (ram_we[1])
		sram[ram_adr][15:8] <= ram_dat_w[15:8];
	if (ram_we[2])
		sram[ram_adr][23:16] <= ram_dat_w[23:16];
	if (ram_we[3])
		sram[ram_adr][31:24] <= ram_dat_w[31:24];
	sram_adr0 <= ram_adr;
end
assign ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 53-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:52];
initial begin
	$readmemh("litex_soc_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk) begin
	mem_adr0 <= csr_bankarray_adr;
end
assign csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


//------------------------------------------------------------------------------
// Instance VexRiscv of VexRiscv Module.
//------------------------------------------------------------------------------
VexRiscv VexRiscv(
	// Inputs.
	.clk                    (sys_clk),
	.dBusWishbone_ACK       (dbus_ack),
	.dBusWishbone_DAT_MISO  (dbus_dat_r),
	.dBusWishbone_ERR       (dbus_err),
	.externalInterruptArray (interrupt),
	.externalResetVector    (vexriscv),
	.iBusWishbone_ACK       (ibus_ack),
	.iBusWishbone_DAT_MISO  (ibus_dat_r),
	.iBusWishbone_ERR       (ibus_err),
	.reset                  ((sys_rst | reset)),
	.softwareInterrupt      (1'd0),
	.timerInterrupt         (1'd0),

	// Outputs.
	.dBusWishbone_ADR       (dbus_adr),
	.dBusWishbone_BTE       (dbus_bte),
	.dBusWishbone_CTI       (dbus_cti),
	.dBusWishbone_CYC       (dbus_cyc),
	.dBusWishbone_DAT_MOSI  (dbus_dat_w),
	.dBusWishbone_SEL       (dbus_sel),
	.dBusWishbone_STB       (dbus_stb),
	.dBusWishbone_WE        (dbus_we),
	.iBusWishbone_ADR       (ibus_adr),
	.iBusWishbone_BTE       (ibus_bte),
	.iBusWishbone_CTI       (ibus_cti),
	.iBusWishbone_CYC       (ibus_cyc),
	.iBusWishbone_DAT_MOSI  (ibus_dat_w),
	.iBusWishbone_SEL       (ibus_sel),
	.iBusWishbone_STB       (ibus_stb),
	.iBusWishbone_WE        (ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2025-02-12 16:41:03.
//------------------------------------------------------------------------------
